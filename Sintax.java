
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jun 02 21:30:13 CST 2023
//----------------------------------------------------

package analizadores;

import java.util.LinkedList;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jun 02 21:30:13 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\004\000\002\022\003\000\002\022" +
    "\004\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\023\003\000\002\023\003\000\002\003\003\000" +
    "\002\003\004\000\002\004\005\000\002\005\003\000\002" +
    "\005\003\000\002\014\003\000\002\014\003\000\002\006" +
    "\003\000\002\011\005\000\002\011\004\000\002\012\004" +
    "\000\002\012\005\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\007\003\000\002\007\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\145\000\046\004\021\005\020\006\004\007\034\010" +
    "\006\011\011\012\033\016\013\017\014\020\005\021\007" +
    "\022\012\023\030\042\032\043\035\u0141\024\u0142\027\u0143" +
    "\023\001\002\000\044\002\uffd8\013\uffd8\014\uffd8\015\uffd8" +
    "\u0128\uffd8\u0129\uffd8\u012a\uffd8\u012b\uffd8\u012c\uffd8\u012d\uffd8\u012e" +
    "\uffd8\u012f\uffd8\u0130\uffd8\u0131\uffd8\u0132\uffd8\u013f\uffd8\u0140\uffd8" +
    "\001\002\000\044\002\uffd1\013\uffd1\014\uffd1\015\uffd1\u0128" +
    "\uffd1\u0129\uffd1\u012a\uffd1\u012b\uffd1\u012c\uffd1\u012d\uffd1\u012e\uffd1" +
    "\u012f\uffd1\u0130\uffd1\u0131\uffd1\u0132\uffd1\u013f\uffd1\u0140\uffd1\001" +
    "\002\000\044\002\uffd6\013\uffd6\014\uffd6\015\uffd6\u0128\uffd6" +
    "\u0129\uffd6\u012a\uffd6\u012b\uffd6\u012c\uffd6\u012d\uffd6\u012e\uffd6\u012f" +
    "\uffd6\u0130\uffd6\u0131\uffd6\u0132\uffd6\u013f\uffd6\u0140\uffd6\001\002" +
    "\000\044\002\uffd0\013\uffd0\014\uffd0\015\uffd0\u0128\uffd0\u0129" +
    "\uffd0\u012a\uffd0\u012b\uffd0\u012c\uffd0\u012d\uffd0\u012e\uffd0\u012f\uffd0" +
    "\u0130\uffd0\u0131\uffd0\u0132\uffd0\u013f\uffd0\u0140\uffd0\001\002\000" +
    "\126\024\142\025\131\026\135\027\126\030\130\031\125" +
    "\032\145\033\133\034\141\035\136\036\127\037\134\040" +
    "\146\041\140\042\132\043\144\145\102\146\052\147\073" +
    "\150\105\151\104\152\056\153\071\154\076\155\072\156" +
    "\063\157\055\160\077\161\067\162\062\271\074\272\053" +
    "\273\051\274\070\275\060\276\061\277\103\300\064\301" +
    "\075\302\100\303\057\304\066\001\002\000\044\002\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\u0128\uffd5\u0129\uffd5\u012a\uffd5\u012b" +
    "\uffd5\u012c\uffd5\u012d\uffd5\u012e\uffd5\u012f\uffd5\u0130\uffd5\u0131\uffd5" +
    "\u0132\uffd5\u013f\uffd5\u0140\uffd5\001\002\000\044\002\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\u0128\uffcf\u0129\uffcf\u012a\uffcf\u012b\uffcf" +
    "\u012c\uffcf\u012d\uffcf\u012e\uffcf\u012f\uffcf\u0130\uffcf\u0131\uffcf\u0132" +
    "\uffcf\u013f\uffcf\u0140\uffcf\001\002\000\044\002\uffd3\013\uffd3" +
    "\014\uffd3\015\uffd3\u0128\uffd3\u0129\uffd3\u012a\uffd3\u012b\uffd3\u012c" +
    "\uffd3\u012d\uffd3\u012e\uffd3\u012f\uffd3\u0130\uffd3\u0131\uffd3\u0132\uffd3" +
    "\u013f\uffd3\u0140\uffd3\001\002\000\044\002\uffd2\013\uffd2\014" +
    "\uffd2\015\uffd2\u0128\uffd2\u0129\uffd2\u012a\uffd2\u012b\uffd2\u012c\uffd2" +
    "\u012d\uffd2\u012e\uffd2\u012f\uffd2\u0130\uffd2\u0131\uffd2\u0132\uffd2\u013f" +
    "\uffd2\u0140\uffd2\001\002\000\044\002\ufff5\013\ufff5\014\ufff5" +
    "\015\ufff5\u0128\ufff5\u0129\ufff5\u012a\ufff5\u012b\ufff5\u012c\ufff5\u012d" +
    "\ufff5\u012e\ufff5\u012f\ufff5\u0130\ufff5\u0131\ufff5\u0132\ufff5\u013f\ufff5" +
    "\u0140\ufff5\001\002\000\032\002\000\u0128\123\u0129\112\u012a" +
    "\120\u012b\121\u012c\124\u012d\117\u012e\116\u012f\113\u0130\122" +
    "\u0131\111\u0132\115\001\002\000\032\002\ufffd\u0128\ufffd\u0129" +
    "\ufffd\u012a\ufffd\u012b\ufffd\u012c\ufffd\u012d\ufffd\u012e\ufffd\u012f\ufffd" +
    "\u0130\ufffd\u0131\ufffd\u0132\ufffd\001\002\000\044\002\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\u0128\uffd9\u0129\uffd9\u012a\uffd9\u012b\uffd9" +
    "\u012c\uffd9\u012d\uffd9\u012e\uffd9\u012f\uffd9\u0130\uffd9\u0131\uffd9\u0132" +
    "\uffd9\u013f\uffd9\u0140\uffd9\001\002\000\044\002\uffda\013\uffda" +
    "\014\uffda\015\uffda\u0128\uffda\u0129\uffda\u012a\uffda\u012b\uffda\u012c" +
    "\uffda\u012d\uffda\u012e\uffda\u012f\uffda\u0130\uffda\u0131\uffda\u0132\uffda" +
    "\u013f\uffda\u0140\uffda\001\002\000\044\002\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\u0128\ufff6\u0129\ufff6\u012a\ufff6\u012b\ufff6\u012c\ufff6" +
    "\u012d\ufff6\u012e\ufff6\u012f\ufff6\u0130\ufff6\u0131\ufff6\u0132\ufff6\u013f" +
    "\ufff6\u0140\ufff6\001\002\000\126\024\uffbe\025\uffbe\026\uffbe" +
    "\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035" +
    "\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe" +
    "\145\uffbe\146\uffbe\147\uffbe\150\uffbe\151\uffbe\152\uffbe\153" +
    "\uffbe\154\uffbe\155\uffbe\156\uffbe\157\uffbe\160\uffbe\161\uffbe" +
    "\162\uffbe\271\uffbe\272\uffbe\273\uffbe\274\uffbe\275\uffbe\276" +
    "\uffbe\277\uffbe\300\uffbe\301\uffbe\302\uffbe\303\uffbe\304\uffbe" +
    "\001\002\000\126\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030" +
    "\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\145\uffc0\146" +
    "\uffc0\147\uffc0\150\uffc0\151\uffc0\152\uffc0\153\uffc0\154\uffc0" +
    "\155\uffc0\156\uffc0\157\uffc0\160\uffc0\161\uffc0\162\uffc0\271" +
    "\uffc0\272\uffc0\273\uffc0\274\uffc0\275\uffc0\276\uffc0\277\uffc0" +
    "\300\uffc0\301\uffc0\302\uffc0\303\uffc0\304\uffc0\001\002\000" +
    "\004\002\110\001\002\000\044\002\ufff9\013\046\014\050" +
    "\015\045\u0128\ufff9\u0129\ufff9\u012a\ufff9\u012b\ufff9\u012c\ufff9\u012d" +
    "\ufff9\u012e\ufff9\u012f\ufff9\u0130\ufff9\u0131\ufff9\u0132\ufff9\u013f\ufff9" +
    "\u0140\ufff9\001\002\000\126\024\uffbf\025\uffbf\026\uffbf\027" +
    "\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf" +
    "\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\145" +
    "\uffbf\146\uffbf\147\uffbf\150\uffbf\151\uffbf\152\uffbf\153\uffbf" +
    "\154\uffbf\155\uffbf\156\uffbf\157\uffbf\160\uffbf\161\uffbf\162" +
    "\uffbf\271\uffbf\272\uffbf\273\uffbf\274\uffbf\275\uffbf\276\uffbf" +
    "\277\uffbf\300\uffbf\301\uffbf\302\uffbf\303\uffbf\304\uffbf\001" +
    "\002\000\044\002\uffce\013\uffce\014\uffce\015\uffce\u0128\uffce" +
    "\u0129\uffce\u012a\uffce\u012b\uffce\u012c\uffce\u012d\uffce\u012e\uffce\u012f" +
    "\uffce\u0130\uffce\u0131\uffce\u0132\uffce\u013f\uffce\u0140\uffce\001\002" +
    "\000\036\002\ufffe\u0128\ufffe\u0129\ufffe\u012a\ufffe\u012b\ufffe\u012c" +
    "\ufffe\u012d\ufffe\u012e\ufffe\u012f\ufffe\u0130\ufffe\u0131\ufffe\u0132\ufffe" +
    "\u013f\037\u0140\041\001\002\000\032\002\ufffa\u0128\ufffa\u0129" +
    "\ufffa\u012a\ufffa\u012b\ufffa\u012c\ufffa\u012d\ufffa\u012e\ufffa\u012f\ufffa" +
    "\u0130\ufffa\u0131\ufffa\u0132\ufffa\001\002\000\044\002\uffd4\013" +
    "\uffd4\014\uffd4\015\uffd4\u0128\uffd4\u0129\uffd4\u012a\uffd4\u012b\uffd4" +
    "\u012c\uffd4\u012d\uffd4\u012e\uffd4\u012f\uffd4\u0130\uffd4\u0131\uffd4\u0132" +
    "\uffd4\u013f\uffd4\u0140\uffd4\001\002\000\044\002\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\u0128\uffd7\u0129\uffd7\u012a\uffd7\u012b\uffd7\u012c" +
    "\uffd7\u012d\uffd7\u012e\uffd7\u012f\uffd7\u0130\uffd7\u0131\uffd7\u0132\uffd7" +
    "\u013f\uffd7\u0140\uffd7\001\002\000\032\002\ufffb\u0128\ufffb\u0129" +
    "\ufffb\u012a\ufffb\u012b\ufffb\u012c\ufffb\u012d\ufffb\u012e\ufffb\u012f\ufffb" +
    "\u0130\ufffb\u0131\ufffb\u0132\ufffb\001\002\000\032\002\ufffc\u0128" +
    "\ufffc\u0129\ufffc\u012a\ufffc\u012b\ufffc\u012c\ufffc\u012d\ufffc\u012e\ufffc" +
    "\u012f\ufffc\u0130\ufffc\u0131\ufffc\u0132\ufffc\001\002\000\042\004" +
    "\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd" +
    "\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\u0141" +
    "\uffcd\u0142\uffcd\u0143\uffcd\001\002\000\042\004\021\005\020" +
    "\006\004\007\034\010\006\011\011\012\033\016\013\017" +
    "\014\020\005\021\007\022\012\023\030\u0141\024\u0142\027" +
    "\u0143\023\001\002\000\042\004\uffcc\005\uffcc\006\uffcc\007" +
    "\uffcc\010\uffcc\011\uffcc\012\uffcc\016\uffcc\017\uffcc\020\uffcc" +
    "\021\uffcc\022\uffcc\023\uffcc\u0141\uffcc\u0142\uffcc\u0143\uffcc\001" +
    "\002\000\032\002\ufff7\u0128\ufff7\u0129\ufff7\u012a\ufff7\u012b\ufff7" +
    "\u012c\ufff7\u012d\ufff7\u012e\ufff7\u012f\ufff7\u0130\ufff7\u0131\ufff7\u0132" +
    "\ufff7\001\002\000\072\145\102\146\052\147\073\150\105" +
    "\151\104\152\056\153\071\154\076\155\072\156\063\157" +
    "\055\160\077\161\067\162\062\271\074\272\053\273\051" +
    "\274\070\275\060\276\061\277\103\300\064\301\075\302" +
    "\100\303\057\304\066\u0133\054\u0136\101\001\002\000\036" +
    "\002\ufff2\u0128\ufff2\u0129\ufff2\u012a\ufff2\u012b\ufff2\u012c\ufff2\u012d" +
    "\ufff2\u012e\ufff2\u012f\ufff2\u0130\ufff2\u0131\ufff2\u0132\ufff2\u013f\ufff2" +
    "\u0140\ufff2\001\002\000\072\145\uffdb\146\uffdb\147\uffdb\150" +
    "\uffdb\151\uffdb\152\uffdb\153\uffdb\154\uffdb\155\uffdb\156\uffdb" +
    "\157\uffdb\160\uffdb\161\uffdb\162\uffdb\271\uffdb\272\uffdb\273" +
    "\uffdb\274\uffdb\275\uffdb\276\uffdb\277\uffdb\300\uffdb\301\uffdb" +
    "\302\uffdb\303\uffdb\304\uffdb\u0133\uffdb\u0136\uffdb\001\002\000" +
    "\072\145\uffdd\146\uffdd\147\uffdd\150\uffdd\151\uffdd\152\uffdd" +
    "\153\uffdd\154\uffdd\155\uffdd\156\uffdd\157\uffdd\160\uffdd\161" +
    "\uffdd\162\uffdd\271\uffdd\272\uffdd\273\uffdd\274\uffdd\275\uffdd" +
    "\276\uffdd\277\uffdd\300\uffdd\301\uffdd\302\uffdd\303\uffdd\304" +
    "\uffdd\u0133\uffdd\u0136\uffdd\001\002\000\036\002\ufff8\u0128\ufff8" +
    "\u0129\ufff8\u012a\ufff8\u012b\ufff8\u012c\ufff8\u012d\ufff8\u012e\ufff8\u012f" +
    "\ufff8\u0130\ufff8\u0131\ufff8\u0132\ufff8\u013f\ufff8\u0140\ufff8\001\002" +
    "\000\072\145\uffdc\146\uffdc\147\uffdc\150\uffdc\151\uffdc\152" +
    "\uffdc\153\uffdc\154\uffdc\155\uffdc\156\uffdc\157\uffdc\160\uffdc" +
    "\161\uffdc\162\uffdc\271\uffdc\272\uffdc\273\uffdc\274\uffdc\275" +
    "\uffdc\276\uffdc\277\uffdc\300\uffdc\301\uffdc\302\uffdc\303\uffdc" +
    "\304\uffdc\u0133\uffdc\u0136\uffdc\001\002\000\046\024\uffad\025" +
    "\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad" +
    "\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042" +
    "\uffad\043\uffad\u0133\uffad\u0136\uffad\001\002\000\046\024\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\u0133\uffbc\u0136\uffbc\001\002\000\046\024" +
    "\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae" +
    "\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041" +
    "\uffae\042\uffae\043\uffae\u0133\uffae\u0136\uffae\001\002\000\036" +
    "\002\ufff4\u0128\ufff4\u0129\ufff4\u012a\ufff4\u012b\ufff4\u012c\ufff4\u012d" +
    "\ufff4\u012e\ufff4\u012f\ufff4\u0130\ufff4\u0131\ufff4\u0132\ufff4\u013f\ufff4" +
    "\u0140\ufff4\001\002\000\046\024\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\u0133" +
    "\uffb3\u0136\uffb3\001\002\000\046\024\uffb8\025\uffb8\026\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8" +
    "\u0133\uffb8\u0136\uffb8\001\002\000\046\024\uffa5\025\uffa5\026" +
    "\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5" +
    "\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043" +
    "\uffa5\u0133\uffa5\u0136\uffa5\001\002\000\046\024\uffab\025\uffab" +
    "\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034" +
    "\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab" +
    "\043\uffab\u0133\uffab\u0136\uffab\001\002\000\046\024\uffaa\025" +
    "\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa" +
    "\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042" +
    "\uffaa\043\uffaa\u0133\uffaa\u0136\uffaa\001\002\000\046\024\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033" +
    "\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0" +
    "\042\uffb0\043\uffb0\u0133\uffb0\u0136\uffb0\001\002\000\046\024" +
    "\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041" +
    "\uffb4\042\uffb4\043\uffb4\u0133\uffb4\u0136\uffb4\001\002\000\046" +
    "\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032" +
    "\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8" +
    "\041\uffa8\042\uffa8\043\uffa8\u0133\uffa8\u0136\uffa8\001\002\000" +
    "\006\u0133\054\u0136\101\001\002\000\046\024\uffa4\025\uffa4" +
    "\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034" +
    "\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4" +
    "\043\uffa4\u0133\uffa4\u0136\uffa4\001\002\000\046\024\uffb1\025" +
    "\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1" +
    "\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042" +
    "\uffb1\043\uffb1\u0133\uffb1\u0136\uffb1\001\002\000\046\024\uffac" +
    "\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033" +
    "\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac" +
    "\042\uffac\043\uffac\u0133\uffac\u0136\uffac\001\002\000\046\024" +
    "\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7" +
    "\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041" +
    "\uffb7\042\uffb7\043\uffb7\u0133\uffb7\u0136\uffb7\001\002\000\046" +
    "\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032" +
    "\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5" +
    "\041\uffb5\042\uffb5\043\uffb5\u0133\uffb5\u0136\uffb5\001\002\000" +
    "\046\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb" +
    "\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040" +
    "\uffbb\041\uffbb\042\uffbb\043\uffbb\u0133\uffbb\u0136\uffbb\001\002" +
    "\000\046\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031" +
    "\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf" +
    "\040\uffaf\041\uffaf\042\uffaf\043\uffaf\u0133\uffaf\u0136\uffaf\001" +
    "\002\000\046\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7" +
    "\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037" +
    "\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\u0133\uffa7\u0136\uffa7" +
    "\001\002\000\046\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\u0133\uffb6\u0136" +
    "\uffb6\001\002\000\046\024\uffb2\025\uffb2\026\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036" +
    "\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\u0133\uffb2" +
    "\u0136\uffb2\001\002\000\046\024\uffa6\025\uffa6\026\uffa6\027" +
    "\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6" +
    "\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\u0133" +
    "\uffa6\u0136\uffa6\001\002\000\036\002\ufff3\u0128\ufff3\u0129\ufff3" +
    "\u012a\ufff3\u012b\ufff3\u012c\ufff3\u012d\ufff3\u012e\ufff3\u012f\ufff3\u0130" +
    "\ufff3\u0131\ufff3\u0132\ufff3\u013f\ufff3\u0140\ufff3\001\002\000\046" +
    "\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\u0133\uffbd\u0136\uffbd\001\002\000" +
    "\046\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9" +
    "\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040" +
    "\uffa9\041\uffa9\042\uffa9\043\uffa9\u0133\uffa9\u0136\uffa9\001\002" +
    "\000\046\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9" +
    "\040\uffb9\041\uffb9\042\uffb9\043\uffb9\u0133\uffb9\u0136\uffb9\001" +
    "\002\000\046\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba" +
    "\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037" +
    "\uffba\040\uffba\041\uffba\042\uffba\043\uffba\u0133\uffba\u0136\uffba" +
    "\001\002\000\036\002\uffef\u0128\uffef\u0129\uffef\u012a\uffef\u012b" +
    "\uffef\u012c\uffef\u012d\uffef\u012e\uffef\u012f\uffef\u0130\uffef\u0131\uffef" +
    "\u0132\uffef\u013f\uffef\u0140\uffef\001\002\000\036\002\uffee\u0128" +
    "\uffee\u0129\uffee\u012a\uffee\u012b\uffee\u012c\uffee\u012d\uffee\u012e\uffee" +
    "\u012f\uffee\u0130\uffee\u0131\uffee\u0132\uffee\u013f\uffee\u0140\uffee\001" +
    "\002\000\004\002\001\001\002\000\004\002\uffc2\001\002" +
    "\000\004\002\uffca\001\002\000\004\002\uffc4\001\002\000" +
    "\004\002\uffff\001\002\000\004\002\uffc1\001\002\000\004" +
    "\002\uffc5\001\002\000\004\002\uffc6\001\002\000\004\002" +
    "\uffc9\001\002\000\004\002\uffc8\001\002\000\004\002\uffc3" +
    "\001\002\000\004\002\uffcb\001\002\000\004\002\uffc7\001" +
    "\002\000\044\002\uffe8\013\uffe8\014\uffe8\015\uffe8\u0128\uffe8" +
    "\u0129\uffe8\u012a\uffe8\u012b\uffe8\u012c\uffe8\u012d\uffe8\u012e\uffe8\u012f" +
    "\uffe8\u0130\uffe8\u0131\uffe8\u0132\uffe8\u013f\uffe8\u0140\uffe8\001\002" +
    "\000\044\002\uffea\013\uffea\014\uffea\015\uffea\u0128\uffea\u0129" +
    "\uffea\u012a\uffea\u012b\uffea\u012c\uffea\u012d\uffea\u012e\uffea\u012f\uffea" +
    "\u0130\uffea\u0131\uffea\u0132\uffea\u013f\uffea\u0140\uffea\001\002\000" +
    "\044\002\uffe3\013\uffe3\014\uffe3\015\uffe3\u0128\uffe3\u0129\uffe3" +
    "\u012a\uffe3\u012b\uffe3\u012c\uffe3\u012d\uffe3\u012e\uffe3\u012f\uffe3\u0130" +
    "\uffe3\u0131\uffe3\u0132\uffe3\u013f\uffe3\u0140\uffe3\001\002\000\044" +
    "\002\uffe9\013\uffe9\014\uffe9\015\uffe9\u0128\uffe9\u0129\uffe9\u012a" +
    "\uffe9\u012b\uffe9\u012c\uffe9\u012d\uffe9\u012e\uffe9\u012f\uffe9\u0130\uffe9" +
    "\u0131\uffe9\u0132\uffe9\u013f\uffe9\u0140\uffe9\001\002\000\044\002" +
    "\uffec\013\uffec\014\uffec\015\uffec\u0128\uffec\u0129\uffec\u012a\uffec" +
    "\u012b\uffec\u012c\uffec\u012d\uffec\u012e\uffec\u012f\uffec\u0130\uffec\u0131" +
    "\uffec\u0132\uffec\u013f\uffec\u0140\uffec\001\002\000\044\002\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\u0128\uffdf\u0129\uffdf\u012a\uffdf\u012b" +
    "\uffdf\u012c\uffdf\u012d\uffdf\u012e\uffdf\u012f\uffdf\u0130\uffdf\u0131\uffdf" +
    "\u0132\uffdf\u013f\uffdf\u0140\uffdf\001\002\000\044\002\uffe6\013" +
    "\uffe6\014\uffe6\015\uffe6\u0128\uffe6\u0129\uffe6\u012a\uffe6\u012b\uffe6" +
    "\u012c\uffe6\u012d\uffe6\u012e\uffe6\u012f\uffe6\u0130\uffe6\u0131\uffe6\u0132" +
    "\uffe6\u013f\uffe6\u0140\uffe6\001\002\000\044\002\uffe2\013\uffe2" +
    "\014\uffe2\015\uffe2\u0128\uffe2\u0129\uffe2\u012a\uffe2\u012b\uffe2\u012c" +
    "\uffe2\u012d\uffe2\u012e\uffe2\u012f\uffe2\u0130\uffe2\u0131\uffe2\u0132\uffe2" +
    "\u013f\uffe2\u0140\uffe2\001\002\000\044\002\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\u0128\uffeb\u0129\uffeb\u012a\uffeb\u012b\uffeb\u012c\uffeb" +
    "\u012d\uffeb\u012e\uffeb\u012f\uffeb\u0130\uffeb\u0131\uffeb\u0132\uffeb\u013f" +
    "\uffeb\u0140\uffeb\001\002\000\044\002\uffe4\013\uffe4\014\uffe4" +
    "\015\uffe4\u0128\uffe4\u0129\uffe4\u012a\uffe4\u012b\uffe4\u012c\uffe4\u012d" +
    "\uffe4\u012e\uffe4\u012f\uffe4\u0130\uffe4\u0131\uffe4\u0132\uffe4\u013f\uffe4" +
    "\u0140\uffe4\001\002\000\044\002\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\u0128\ufff0\u0129\ufff0\u012a\ufff0\u012b\ufff0\u012c\ufff0\u012d\ufff0" +
    "\u012e\ufff0\u012f\ufff0\u0130\ufff0\u0131\ufff0\u0132\ufff0\u013f\ufff0\u0140" +
    "\ufff0\001\002\000\044\002\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\u0128\uffe0\u0129\uffe0\u012a\uffe0\u012b\uffe0\u012c\uffe0\u012d\uffe0\u012e" +
    "\uffe0\u012f\uffe0\u0130\uffe0\u0131\uffe0\u0132\uffe0\u013f\uffe0\u0140\uffe0" +
    "\001\002\000\044\002\uffe5\013\uffe5\014\uffe5\015\uffe5\u0128" +
    "\uffe5\u0129\uffe5\u012a\uffe5\u012b\uffe5\u012c\uffe5\u012d\uffe5\u012e\uffe5" +
    "\u012f\uffe5\u0130\uffe5\u0131\uffe5\u0132\uffe5\u013f\uffe5\u0140\uffe5\001" +
    "\002\000\044\002\uffed\013\uffed\014\uffed\015\uffed\u0128\uffed" +
    "\u0129\uffed\u012a\uffed\u012b\uffed\u012c\uffed\u012d\uffed\u012e\uffed\u012f" +
    "\uffed\u0130\uffed\u0131\uffed\u0132\uffed\u013f\uffed\u0140\uffed\001\002" +
    "\000\042\024\142\025\131\026\135\027\126\030\130\031" +
    "\125\032\145\033\133\034\141\035\136\036\127\037\134" +
    "\040\146\041\140\042\132\043\144\001\002\000\044\002" +
    "\uffde\013\uffde\014\uffde\015\uffde\u0128\uffde\u0129\uffde\u012a\uffde" +
    "\u012b\uffde\u012c\uffde\u012d\uffde\u012e\uffde\u012f\uffde\u0130\uffde\u0131" +
    "\uffde\u0132\uffde\u013f\uffde\u0140\uffde\001\002\000\044\002\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\u0128\uffe7\u0129\uffe7\u012a\uffe7\u012b" +
    "\uffe7\u012c\uffe7\u012d\uffe7\u012e\uffe7\u012f\uffe7\u0130\uffe7\u0131\uffe7" +
    "\u0132\uffe7\u013f\uffe7\u0140\uffe7\001\002\000\044\002\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\u0128\uffe1\u0129\uffe1\u012a\uffe1\u012b\uffe1" +
    "\u012c\uffe1\u012d\uffe1\u012e\uffe1\u012f\uffe1\u0130\uffe1\u0131\uffe1\u0132" +
    "\uffe1\u013f\uffe1\u0140\uffe1\001\002\000\044\002\ufff1\013\ufff1" +
    "\014\ufff1\015\ufff1\u0128\ufff1\u0129\ufff1\u012a\ufff1\u012b\ufff1\u012c" +
    "\ufff1\u012d\ufff1\u012e\ufff1\u012f\ufff1\u0130\ufff1\u0131\ufff1\u0132\ufff1" +
    "\u013f\ufff1\u0140\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\145\000\024\002\015\003\030\004\016\005\025\010" +
    "\021\011\014\013\007\022\024\023\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\142\016\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\046\012\043\017\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\041\005\025" +
    "\010\021\011\014\013\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\105\015\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public static Nodo padre;
	public int contador=0;

	//Listas para almacenar las PALABRAS RESERVADAS, SIMBOLOS, CADENAS Y VALORES NUMÉRICOS
	public static LinkedList<String> PalabraReservada = new LinkedList<String>();
	public static LinkedList<String> Simbolo = new LinkedList<String>();
	public static LinkedList<String> Cadenas = new LinkedList<String>();
        public static LinkedList<String> Variables = new LinkedList<String>();
	public static LinkedList<String> ValoresNumericos = new LinkedList<String>();
	
        public static LinkedList<String> Errores = new LinkedList<String>();

    
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/
/* 
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
            parser.Errores.add("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+". \n");
    }
*/ 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
/*
      public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
            parser.Errores.add("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+". \n");
    }
*/  

    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }
    
    public Symbol getS(){
        return this.s;
}  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ADJETIVO ::= INCREDIBLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ADJETIVO ::= FANTASTIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ADJETIVO ::= EXCELLENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ADJETIVO ::= WONDERFUL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ADJETIVO ::= CHARMING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ADJETIVO ::= LOVELY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ADJETIVO ::= INTERESTING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ADJETIVO ::= EXCITING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ADJETIVO ::= DELICIOUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ADJETIVO ::= AMAZING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ADJETIVO ::= VARIOUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ADJETIVO ::= CERTAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ADJETIVO ::= NAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ADJETIVO ::= ELEGANT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ADJETIVO ::= SMART 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ADJETIVO ::= COLD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ADJETIVO ::= RED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ADJETIVO ::= BRAVE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ADJETIVO ::= TALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ADJETIVO ::= FUNNY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ADJETIVO ::= OLD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ADJETIVO ::= SMALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ADJETIVO ::= INTELLIGENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ADJETIVO ::= HAPPY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ADJETIVO ::= BEAUTIFUL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ADJETIVO ::= BIG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ARTICULO ::= AN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARTICULO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ARTICULO ::= A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARTICULO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ARTICULO ::= THE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARTICULO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PUNTUACION ::= cerrllac 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PUNTUACION ::= abrllac 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PUNTUACION ::= cerrpar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PUNTUACION ::= abrpar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PUNTUACION ::= cerrin 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PUNTUACION ::= cerrad 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PUNTUACION ::= dospum 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PUNTUACION ::= puncom 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PUNTUACION ::= comm 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PUNTUACION ::= punn 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PUNTUACION ::= nadaa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONJUNCION ::= OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONJUNCION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONJUNCION ::= AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONJUNCION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PRONOMBRE ::= ME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PRONOMBRE ::= YOURSELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PRONOMBRE ::= MYSELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PRONOMBRE ::= HIM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PRONOMBRE ::= THEM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PRONOMBRE ::= US 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PRONOMBRE ::= THEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PRONOMBRE ::= WE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PRONOMBRE ::= IT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PRONOMBRE ::= SHE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PRONOMBRE ::= HE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PRONOMBRE ::= YOU 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PRONOMBRE ::= I 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VERBO ::= IS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VERBO ::= ARE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VERBO ::= AM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SUSTANTIVO ::= HI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SUSTANTIVO ::= HELLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SUSTANTIVO ::= BOOKSHELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SUSTANTIVO ::= SUN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SUSTANTIVO ::= PHONE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SUSTANTIVO ::= COMPUTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SUSTANTIVO ::= PEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SUSTANTIVO ::= TABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SUSTANTIVO ::= FLOWER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SUSTANTIVO ::= TREE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SUSTANTIVO ::= CHAIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SUSTANTIVO ::= CAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SUSTANTIVO ::= HOUSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SUSTANTIVO ::= BOOK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SUSTANTIVO ::= CAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SUSTANTIVO ::= DOG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FRASEVERBAL ::= VERBO ADJETIVO ADVERBIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FRASEVERBAL",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FRASEVERBAL ::= VERBO ADVERBIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FRASEVERBAL",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FRASENOMINAL ::= ARTICULO SUSTANTIVO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FRASENOMINAL",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FRASENOMINAL ::= ARTICULO ADJETIVO SUSTANTIVO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FRASENOMINAL",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PREDICADO ::= FRASEVERBAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PREDICADO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ADVERBIO ::= SLOWLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADVERBIO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ADVERBIO ::= QUICKLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADVERBIO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SUJETO ::= FRASENOMINAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUJETO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SUJETO ::= PRONOMBRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUJETO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // COMPUESTASENTENCIA ::= SIMPLESENTENCIA CONJUNCION SIMPLESENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPUESTASENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SIMPLESENTENCIA ::= SUJETO PREDICADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIMPLESENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SIMPLESENTENCIA ::= SUJETO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIMPLESENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SALUDO ::= HELLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALUDO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SALUDO ::= HI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALUDO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SALUDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= COMPUESTASENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SIMPLESENTENCIA 
            {
              Object RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object instr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		

            Nodo nd = new Nodo("SIMPLESENTENCIA");
            nd.setIdNod(parser.contador++);
            nd.AddHijos((Nodo) instr);
            nd.AddHijos((Nodo) nd);
            RESULT = instr;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PARRAFO ::= SENTENCIA PUNTUACION 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("PARRAFO");
    tmp.setValor(" Parrafo");
    tmp.setIdNod(parser.contador++);
    tmp.AddHijos((Nodo) s1);
    tmp.AddHijos((Nodo) s2);
    RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARRAFO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PARRAFO ::= SENTENCIA 
            {
              Object RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object instr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		

    Nodo nd = new Nodo("PARRAFO");
    nd.setIdNod(parser.contador++);

    nd.AddHijos((Nodo) instr);
    parser.padre = (Nodo) nd;
    System.out.println(parser.padre);
    RESULT = instr;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARRAFO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PARRAFO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

