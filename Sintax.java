
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jun 02 23:32:33 CST 2023
//----------------------------------------------------

package analizadores;

import java.util.LinkedList;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jun 02 23:32:33 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\004\000\002\022\003\000\002\022" +
    "\004\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\023\002\000\002\023\003\000" +
    "\002\023\003\000\002\023\004\000\002\023\004\000\002" +
    "\024\005\000\002\003\003\000\002\003\004\000\002\004" +
    "\005\000\002\005\003\000\002\005\003\000\002\014\003" +
    "\000\002\014\003\000\002\006\003\000\002\011\005\000" +
    "\002\011\004\000\002\012\004\000\002\012\005\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\025\004" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\007\003\000\002\007\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\100\002\ufffa\004\022\005\020\006\005\007" +
    "\037\010\006\011\013\012\034\016\014\017\016\020\004" +
    "\021\010\022\012\023\032\042\035\043\040\u0129\ufffa\u012a" +
    "\ufffa\u012b\ufffa\u012c\ufffa\u012d\ufffa\u012e\ufffa\u012f\ufffa\u0130\ufffa" +
    "\u0131\ufffa\u0132\ufffa\u0133\ufffa\u0140\011\u0143\025\u0144\031\u0145" +
    "\024\001\002\000\044\002\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\u0129\uffcb\u012a\uffcb\u012b\uffcb\u012c\uffcb\u012d\uffcb\u012e\uffcb\u012f" +
    "\uffcb\u0130\uffcb\u0131\uffcb\u0132\uffcb\u0133\uffcb\u0141\uffcb\u0142\uffcb" +
    "\001\002\000\044\002\uffd2\013\uffd2\014\uffd2\015\uffd2\u0129" +
    "\uffd2\u012a\uffd2\u012b\uffd2\u012c\uffd2\u012d\uffd2\u012e\uffd2\u012f\uffd2" +
    "\u0130\uffd2\u0131\uffd2\u0132\uffd2\u0133\uffd2\u0141\uffd2\u0142\uffd2\001" +
    "\002\000\044\002\uffd0\013\uffd0\014\uffd0\015\uffd0\u0129\uffd0" +
    "\u012a\uffd0\u012b\uffd0\u012c\uffd0\u012d\uffd0\u012e\uffd0\u012f\uffd0\u0130" +
    "\uffd0\u0131\uffd0\u0132\uffd0\u0133\uffd0\u0141\uffd0\u0142\uffd0\001\002" +
    "\000\126\024\152\025\141\026\145\027\136\030\140\031" +
    "\135\032\155\033\143\034\151\035\146\036\137\037\144" +
    "\040\156\041\150\042\142\043\154\145\112\146\061\147" +
    "\101\150\114\151\113\152\065\153\100\154\104\155\102" +
    "\156\072\157\064\160\106\161\075\162\071\272\105\273" +
    "\060\274\062\275\077\276\070\277\067\300\111\301\073" +
    "\302\103\303\107\304\066\305\076\001\002\000\044\002" +
    "\uffca\013\uffca\014\uffca\015\uffca\u0129\uffca\u012a\uffca\u012b\uffca" +
    "\u012c\uffca\u012d\uffca\u012e\uffca\u012f\uffca\u0130\uffca\u0131\uffca\u0132" +
    "\uffca\u0133\uffca\u0141\uffca\u0142\uffca\001\002\000\004\022\134" +
    "\001\002\000\044\002\uffc9\013\uffc9\014\uffc9\015\uffc9\u0129" +
    "\uffc9\u012a\uffc9\u012b\uffc9\u012c\uffc9\u012d\uffc9\u012e\uffc9\u012f\uffc9" +
    "\u0130\uffc9\u0131\uffc9\u0132\uffc9\u0133\uffc9\u0141\uffc9\u0142\uffc9\001" +
    "\002\000\044\002\uffcf\013\uffcf\014\uffcf\015\uffcf\u0129\uffcf" +
    "\u012a\uffcf\u012b\uffcf\u012c\uffcf\u012d\uffcf\u012e\uffcf\u012f\uffcf\u0130" +
    "\uffcf\u0131\uffcf\u0132\uffcf\u0133\uffcf\u0141\uffcf\u0142\uffcf\001\002" +
    "\000\044\002\uffcd\013\uffcd\014\uffcd\015\uffcd\u0129\uffcd\u012a" +
    "\uffcd\u012b\uffcd\u012c\uffcd\u012d\uffcd\u012e\uffcd\u012f\uffcd\u0130\uffcd" +
    "\u0131\uffcd\u0132\uffcd\u0133\uffcd\u0141\uffcd\u0142\uffcd\001\002\000" +
    "\044\002\ufff0\013\ufff0\014\ufff0\015\ufff0\u0129\ufff0\u012a\ufff0" +
    "\u012b\ufff0\u012c\ufff0\u012d\ufff0\u012e\ufff0\u012f\ufff0\u0130\ufff0\u0131" +
    "\ufff0\u0132\ufff0\u0133\ufff0\u0141\ufff0\u0142\ufff0\001\002\000\044" +
    "\002\uffcc\013\uffcc\014\uffcc\015\uffcc\u0129\uffcc\u012a\uffcc\u012b" +
    "\uffcc\u012c\uffcc\u012d\uffcc\u012e\uffcc\u012f\uffcc\u0130\uffcc\u0131\uffcc" +
    "\u0132\uffcc\u0133\uffcc\u0141\uffcc\u0142\uffcc\001\002\000\032\002" +
    "\000\u0129\132\u012a\121\u012b\127\u012c\130\u012d\133\u012e\126" +
    "\u012f\125\u0130\122\u0131\131\u0132\120\u0133\124\001\002\000" +
    "\044\002\uffd3\013\uffd3\014\uffd3\015\uffd3\u0129\uffd3\u012a\uffd3" +
    "\u012b\uffd3\u012c\uffd3\u012d\uffd3\u012e\uffd3\u012f\uffd3\u0130\uffd3\u0131" +
    "\uffd3\u0132\uffd3\u0133\uffd3\u0141\uffd3\u0142\uffd3\001\002\000\032" +
    "\002\ufffc\u0129\ufffc\u012a\ufffc\u012b\ufffc\u012c\ufffc\u012d\ufffc\u012e" +
    "\ufffc\u012f\ufffc\u0130\ufffc\u0131\ufffc\u0132\ufffc\u0133\ufffc\001\002" +
    "\000\044\002\uffd4\013\uffd4\014\uffd4\015\uffd4\u0129\uffd4\u012a" +
    "\uffd4\u012b\uffd4\u012c\uffd4\u012d\uffd4\u012e\uffd4\u012f\uffd4\u0130\uffd4" +
    "\u0131\uffd4\u0132\uffd4\u0133\uffd4\u0141\uffd4\u0142\uffd4\001\002\000" +
    "\044\002\ufff1\013\ufff1\014\ufff1\015\ufff1\u0129\ufff1\u012a\ufff1" +
    "\u012b\ufff1\u012c\ufff1\u012d\ufff1\u012e\ufff1\u012f\ufff1\u0130\ufff1\u0131" +
    "\ufff1\u0132\ufff1\u0133\ufff1\u0141\ufff1\u0142\ufff1\001\002\000\126" +
    "\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032" +
    "\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8" +
    "\041\uffb8\042\uffb8\043\uffb8\145\uffb8\146\uffb8\147\uffb8\150" +
    "\uffb8\151\uffb8\152\uffb8\153\uffb8\154\uffb8\155\uffb8\156\uffb8" +
    "\157\uffb8\160\uffb8\161\uffb8\162\uffb8\272\uffb8\273\uffb8\274" +
    "\uffb8\275\uffb8\276\uffb8\277\uffb8\300\uffb8\301\uffb8\302\uffb8" +
    "\303\uffb8\304\uffb8\305\uffb8\001\002\000\126\024\uffba\025" +
    "\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba" +
    "\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042" +
    "\uffba\043\uffba\145\uffba\146\uffba\147\uffba\150\uffba\151\uffba" +
    "\152\uffba\153\uffba\154\uffba\155\uffba\156\uffba\157\uffba\160" +
    "\uffba\161\uffba\162\uffba\272\uffba\273\uffba\274\uffba\275\uffba" +
    "\276\uffba\277\uffba\300\uffba\301\uffba\302\uffba\303\uffba\304" +
    "\uffba\305\uffba\001\002\000\004\002\117\001\002\000\032" +
    "\002\ufffb\u0129\ufffb\u012a\ufffb\u012b\ufffb\u012c\ufffb\u012d\ufffb\u012e" +
    "\ufffb\u012f\ufffb\u0130\ufffb\u0131\ufffb\u0132\ufffb\u0133\ufffb\001\002" +
    "\000\044\002\ufff4\013\055\014\057\015\054\u0129\ufff4\u012a" +
    "\ufff4\u012b\ufff4\u012c\ufff4\u012d\ufff4\u012e\ufff4\u012f\ufff4\u0130\ufff4" +
    "\u0131\ufff4\u0132\ufff4\u0133\ufff4\u0141\ufff4\u0142\ufff4\001\002\000" +
    "\126\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9" +
    "\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040" +
    "\uffb9\041\uffb9\042\uffb9\043\uffb9\145\uffb9\146\uffb9\147\uffb9" +
    "\150\uffb9\151\uffb9\152\uffb9\153\uffb9\154\uffb9\155\uffb9\156" +
    "\uffb9\157\uffb9\160\uffb9\161\uffb9\162\uffb9\272\uffb9\273\uffb9" +
    "\274\uffb9\275\uffb9\276\uffb9\277\uffb9\300\uffb9\301\uffb9\302" +
    "\uffb9\303\uffb9\304\uffb9\305\uffb9\001\002\000\044\002\uffc8" +
    "\013\uffc8\014\uffc8\015\uffc8\u0129\uffc8\u012a\uffc8\u012b\uffc8\u012c" +
    "\uffc8\u012d\uffc8\u012e\uffc8\u012f\uffc8\u0130\uffc8\u0131\uffc8\u0132\uffc8" +
    "\u0133\uffc8\u0141\uffc8\u0142\uffc8\001\002\000\036\002\ufffd\u0129" +
    "\ufffd\u012a\ufffd\u012b\ufffd\u012c\ufffd\u012d\ufffd\u012e\ufffd\u012f\ufffd" +
    "\u0130\ufffd\u0131\ufffd\u0132\ufffd\u0133\ufffd\u0141\046\u0142\050\001" +
    "\002\000\044\002\uffce\013\uffce\014\uffce\015\uffce\u0129\uffce" +
    "\u012a\uffce\u012b\uffce\u012c\uffce\u012d\uffce\u012e\uffce\u012f\uffce\u0130" +
    "\uffce\u0131\uffce\u0132\uffce\u0133\uffce\u0141\uffce\u0142\uffce\001\002" +
    "\000\034\002\ufff8\u010c\042\u0129\ufff8\u012a\ufff8\u012b\ufff8\u012c" +
    "\ufff8\u012d\ufff8\u012e\ufff8\u012f\ufff8\u0130\ufff8\u0131\ufff8\u0132\ufff8" +
    "\u0133\ufff8\001\002\000\032\002\ufffe\u0129\ufffe\u012a\ufffe\u012b" +
    "\ufffe\u012c\ufffe\u012d\ufffe\u012e\ufffe\u012f\ufffe\u0130\ufffe\u0131\ufffe" +
    "\u0132\ufffe\u0133\ufffe\001\002\000\044\002\uffd1\013\uffd1\014" +
    "\uffd1\015\uffd1\u0129\uffd1\u012a\uffd1\u012b\uffd1\u012c\uffd1\u012d\uffd1" +
    "\u012e\uffd1\u012f\uffd1\u0130\uffd1\u0131\uffd1\u0132\uffd1\u0133\uffd1\u0141" +
    "\uffd1\u0142\uffd1\001\002\000\034\002\ufff9\u010c\042\u0129\ufff9" +
    "\u012a\ufff9\u012b\ufff9\u012c\ufff9\u012d\ufff9\u012e\ufff9\u012f\ufff9\u0130" +
    "\ufff9\u0131\ufff9\u0132\ufff9\u0133\ufff9\001\002\000\032\002\ufff7" +
    "\u0129\ufff7\u012a\ufff7\u012b\ufff7\u012c\ufff7\u012d\ufff7\u012e\ufff7\u012f" +
    "\ufff7\u0130\ufff7\u0131\ufff7\u0132\ufff7\u0133\ufff7\001\002\000\004" +
    "\014\043\001\002\000\004\005\044\001\002\000\032\002" +
    "\ufff5\u0129\ufff5\u012a\ufff5\u012b\ufff5\u012c\ufff5\u012d\ufff5\u012e\ufff5" +
    "\u012f\ufff5\u0130\ufff5\u0131\ufff5\u0132\ufff5\u0133\ufff5\001\002\000" +
    "\032\002\ufff6\u0129\ufff6\u012a\ufff6\u012b\ufff6\u012c\ufff6\u012d\ufff6" +
    "\u012e\ufff6\u012f\ufff6\u0130\ufff6\u0131\ufff6\u0132\ufff6\u0133\ufff6\001" +
    "\002\000\042\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7" +
    "\011\uffc7\012\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\023\uffc7\u0143\uffc7\u0144\uffc7\u0145\uffc7\001\002\000\042" +
    "\004\022\005\020\006\005\007\037\010\006\011\013\012" +
    "\034\016\014\017\016\020\004\021\010\022\012\023\032" +
    "\u0143\025\u0144\031\u0145\024\001\002\000\042\004\uffc6\005" +
    "\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\016\uffc6" +
    "\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\u0143\uffc6\u0144" +
    "\uffc6\u0145\uffc6\001\002\000\032\002\ufff2\u0129\ufff2\u012a\ufff2" +
    "\u012b\ufff2\u012c\ufff2\u012d\ufff2\u012e\ufff2\u012f\ufff2\u0130\ufff2\u0131" +
    "\ufff2\u0132\ufff2\u0133\ufff2\001\002\000\072\145\112\146\061" +
    "\147\101\150\114\151\113\152\065\153\100\154\104\155" +
    "\102\156\072\157\064\160\106\161\075\162\071\272\105" +
    "\273\060\274\062\275\077\276\070\277\067\300\111\301" +
    "\073\302\103\303\107\304\066\305\076\u0134\063\u0137\110" +
    "\001\002\000\036\002\uffed\u0129\uffed\u012a\uffed\u012b\uffed\u012c" +
    "\uffed\u012d\uffed\u012e\uffed\u012f\uffed\u0130\uffed\u0131\uffed\u0132\uffed" +
    "\u0133\uffed\u0141\uffed\u0142\uffed\001\002\000\072\145\uffd6\146" +
    "\uffd6\147\uffd6\150\uffd6\151\uffd6\152\uffd6\153\uffd6\154\uffd6" +
    "\155\uffd6\156\uffd6\157\uffd6\160\uffd6\161\uffd6\162\uffd6\272" +
    "\uffd6\273\uffd6\274\uffd6\275\uffd6\276\uffd6\277\uffd6\300\uffd6" +
    "\301\uffd6\302\uffd6\303\uffd6\304\uffd6\305\uffd6\u0134\uffd6\u0137" +
    "\uffd6\001\002\000\072\145\uffd8\146\uffd8\147\uffd8\150\uffd8" +
    "\151\uffd8\152\uffd8\153\uffd8\154\uffd8\155\uffd8\156\uffd8\157" +
    "\uffd8\160\uffd8\161\uffd8\162\uffd8\272\uffd8\273\uffd8\274\uffd8" +
    "\275\uffd8\276\uffd8\277\uffd8\300\uffd8\301\uffd8\302\uffd8\303" +
    "\uffd8\304\uffd8\305\uffd8\u0134\uffd8\u0137\uffd8\001\002\000\036" +
    "\002\ufff3\u0129\ufff3\u012a\ufff3\u012b\ufff3\u012c\ufff3\u012d\ufff3\u012e" +
    "\ufff3\u012f\ufff3\u0130\ufff3\u0131\ufff3\u0132\ufff3\u0133\ufff3\u0141\ufff3" +
    "\u0142\ufff3\001\002\000\072\145\uffd7\146\uffd7\147\uffd7\150" +
    "\uffd7\151\uffd7\152\uffd7\153\uffd7\154\uffd7\155\uffd7\156\uffd7" +
    "\157\uffd7\160\uffd7\161\uffd7\162\uffd7\272\uffd7\273\uffd7\274" +
    "\uffd7\275\uffd7\276\uffd7\277\uffd7\300\uffd7\301\uffd7\302\uffd7" +
    "\303\uffd7\304\uffd7\305\uffd7\u0134\uffd7\u0137\uffd7\001\002\000" +
    "\046\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8" +
    "\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040" +
    "\uffa8\041\uffa8\042\uffa8\043\uffa8\u0134\uffa8\u0137\uffa8\001\002" +
    "\000\046\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031" +
    "\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6" +
    "\040\uffb6\041\uffb6\042\uffb6\043\uffb6\u0134\uffb6\u0137\uffb6\001" +
    "\002\000\046\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7" +
    "\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037" +
    "\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\u0134\uffa7\u0137\uffa7" +
    "\001\002\000\036\002\uffef\u0129\uffef\u012a\uffef\u012b\uffef\u012c" +
    "\uffef\u012d\uffef\u012e\uffef\u012f\uffef\u0130\uffef\u0131\uffef\u0132\uffef" +
    "\u0133\uffef\u0141\uffef\u0142\uffef\001\002\000\046\024\uffad\025" +
    "\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad" +
    "\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042" +
    "\uffad\043\uffad\u0134\uffad\u0137\uffad\001\002\000\046\024\uffb2" +
    "\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033" +
    "\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2" +
    "\042\uffb2\043\uffb2\u0134\uffb2\u0137\uffb2\001\002\000\046\024" +
    "\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f" +
    "\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041" +
    "\uff9f\042\uff9f\043\uff9f\u0134\uff9f\u0137\uff9f\001\002\000\046" +
    "\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032" +
    "\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4" +
    "\041\uffa4\042\uffa4\043\uffa4\u0134\uffa4\u0137\uffa4\001\002\000" +
    "\046\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5" +
    "\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040" +
    "\uffa5\041\uffa5\042\uffa5\043\uffa5\u0134\uffa5\u0137\uffa5\001\002" +
    "\000\046\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031" +
    "\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\u0134\uffaa\u0137\uffaa\001" +
    "\002\000\046\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae" +
    "\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037" +
    "\uffae\040\uffae\041\uffae\042\uffae\043\uffae\u0134\uffae\u0137\uffae" +
    "\001\002\000\046\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030" +
    "\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2" +
    "\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\u0134\uffa2\u0137" +
    "\uffa2\001\002\000\006\u0134\063\u0137\110\001\002\000\046" +
    "\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032" +
    "\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab" +
    "\041\uffab\042\uffab\043\uffab\u0134\uffab\u0137\uffab\001\002\000" +
    "\046\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e" +
    "\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040" +
    "\uff9e\041\uff9e\042\uff9e\043\uff9e\u0134\uff9e\u0137\uff9e\001\002" +
    "\000\046\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031" +
    "\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6" +
    "\040\uffa6\041\uffa6\042\uffa6\043\uffa6\u0134\uffa6\u0137\uffa6\001" +
    "\002\000\046\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\u0134\uffb1\u0137\uffb1" +
    "\001\002\000\046\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\u0134\uffb5\u0137" +
    "\uffb5\001\002\000\046\024\uffaf\025\uffaf\026\uffaf\027\uffaf" +
    "\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036" +
    "\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\u0134\uffaf" +
    "\u0137\uffaf\001\002\000\046\024\uffa1\025\uffa1\026\uffa1\027" +
    "\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1" +
    "\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\u0134" +
    "\uffa1\u0137\uffa1\001\002\000\046\024\uffb0\025\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\u0134\uffb0\u0137\uffb0\001\002\000\046\024\uffa9\025\uffa9\026" +
    "\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9" +
    "\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043" +
    "\uffa9\u0134\uffa9\u0137\uffa9\001\002\000\046\024\uffac\025\uffac" +
    "\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034" +
    "\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac" +
    "\043\uffac\u0134\uffac\u0137\uffac\001\002\000\046\024\uffa0\025" +
    "\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0" +
    "\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042" +
    "\uffa0\043\uffa0\u0134\uffa0\u0137\uffa0\001\002\000\036\002\uffee" +
    "\u0129\uffee\u012a\uffee\u012b\uffee\u012c\uffee\u012d\uffee\u012e\uffee\u012f" +
    "\uffee\u0130\uffee\u0131\uffee\u0132\uffee\u0133\uffee\u0141\uffee\u0142\uffee" +
    "\001\002\000\046\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030" +
    "\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3" +
    "\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\u0134\uffa3\u0137" +
    "\uffa3\001\002\000\046\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\u0134\uffb7" +
    "\u0137\uffb7\001\002\000\046\024\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\u0134" +
    "\uffb3\u0137\uffb3\001\002\000\046\024\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4" +
    "\u0134\uffb4\u0137\uffb4\001\002\000\036\002\uffea\u0129\uffea\u012a" +
    "\uffea\u012b\uffea\u012c\uffea\u012d\uffea\u012e\uffea\u012f\uffea\u0130\uffea" +
    "\u0131\uffea\u0132\uffea\u0133\uffea\u0141\uffea\u0142\uffea\001\002\000" +
    "\036\002\uffe9\u0129\uffe9\u012a\uffe9\u012b\uffe9\u012c\uffe9\u012d\uffe9" +
    "\u012e\uffe9\u012f\uffe9\u0130\uffe9\u0131\uffe9\u0132\uffe9\u0133\uffe9\u0141" +
    "\uffe9\u0142\uffe9\001\002\000\004\002\001\001\002\000\004" +
    "\002\uffbc\001\002\000\004\002\uffc4\001\002\000\004\002" +
    "\uffbe\001\002\000\004\002\uffff\001\002\000\004\002\uffbb" +
    "\001\002\000\004\002\uffbf\001\002\000\004\002\uffc0\001" +
    "\002\000\004\002\uffc3\001\002\000\004\002\uffc2\001\002" +
    "\000\004\002\uffbd\001\002\000\004\002\uffc5\001\002\000" +
    "\004\002\uffc1\001\002\000\032\002\uffd5\u0129\uffd5\u012a\uffd5" +
    "\u012b\uffd5\u012c\uffd5\u012d\uffd5\u012e\uffd5\u012f\uffd5\u0130\uffd5\u0131" +
    "\uffd5\u0132\uffd5\u0133\uffd5\001\002\000\044\002\uffe3\013\uffe3" +
    "\014\uffe3\015\uffe3\u0129\uffe3\u012a\uffe3\u012b\uffe3\u012c\uffe3\u012d" +
    "\uffe3\u012e\uffe3\u012f\uffe3\u0130\uffe3\u0131\uffe3\u0132\uffe3\u0133\uffe3" +
    "\u0141\uffe3\u0142\uffe3\001\002\000\044\002\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\u0129\uffe5\u012a\uffe5\u012b\uffe5\u012c\uffe5\u012d\uffe5" +
    "\u012e\uffe5\u012f\uffe5\u0130\uffe5\u0131\uffe5\u0132\uffe5\u0133\uffe5\u0141" +
    "\uffe5\u0142\uffe5\001\002\000\044\002\uffde\013\uffde\014\uffde" +
    "\015\uffde\u0129\uffde\u012a\uffde\u012b\uffde\u012c\uffde\u012d\uffde\u012e" +
    "\uffde\u012f\uffde\u0130\uffde\u0131\uffde\u0132\uffde\u0133\uffde\u0141\uffde" +
    "\u0142\uffde\001\002\000\044\002\uffe4\013\uffe4\014\uffe4\015" +
    "\uffe4\u0129\uffe4\u012a\uffe4\u012b\uffe4\u012c\uffe4\u012d\uffe4\u012e\uffe4" +
    "\u012f\uffe4\u0130\uffe4\u0131\uffe4\u0132\uffe4\u0133\uffe4\u0141\uffe4\u0142" +
    "\uffe4\001\002\000\044\002\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\u0129\uffe7\u012a\uffe7\u012b\uffe7\u012c\uffe7\u012d\uffe7\u012e\uffe7\u012f" +
    "\uffe7\u0130\uffe7\u0131\uffe7\u0132\uffe7\u0133\uffe7\u0141\uffe7\u0142\uffe7" +
    "\001\002\000\044\002\uffda\013\uffda\014\uffda\015\uffda\u0129" +
    "\uffda\u012a\uffda\u012b\uffda\u012c\uffda\u012d\uffda\u012e\uffda\u012f\uffda" +
    "\u0130\uffda\u0131\uffda\u0132\uffda\u0133\uffda\u0141\uffda\u0142\uffda\001" +
    "\002\000\044\002\uffe1\013\uffe1\014\uffe1\015\uffe1\u0129\uffe1" +
    "\u012a\uffe1\u012b\uffe1\u012c\uffe1\u012d\uffe1\u012e\uffe1\u012f\uffe1\u0130" +
    "\uffe1\u0131\uffe1\u0132\uffe1\u0133\uffe1\u0141\uffe1\u0142\uffe1\001\002" +
    "\000\044\002\uffdd\013\uffdd\014\uffdd\015\uffdd\u0129\uffdd\u012a" +
    "\uffdd\u012b\uffdd\u012c\uffdd\u012d\uffdd\u012e\uffdd\u012f\uffdd\u0130\uffdd" +
    "\u0131\uffdd\u0132\uffdd\u0133\uffdd\u0141\uffdd\u0142\uffdd\001\002\000" +
    "\044\002\uffe6\013\uffe6\014\uffe6\015\uffe6\u0129\uffe6\u012a\uffe6" +
    "\u012b\uffe6\u012c\uffe6\u012d\uffe6\u012e\uffe6\u012f\uffe6\u0130\uffe6\u0131" +
    "\uffe6\u0132\uffe6\u0133\uffe6\u0141\uffe6\u0142\uffe6\001\002\000\044" +
    "\002\uffdf\013\uffdf\014\uffdf\015\uffdf\u0129\uffdf\u012a\uffdf\u012b" +
    "\uffdf\u012c\uffdf\u012d\uffdf\u012e\uffdf\u012f\uffdf\u0130\uffdf\u0131\uffdf" +
    "\u0132\uffdf\u0133\uffdf\u0141\uffdf\u0142\uffdf\001\002\000\044\002" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\u0129\uffeb\u012a\uffeb\u012b\uffeb" +
    "\u012c\uffeb\u012d\uffeb\u012e\uffeb\u012f\uffeb\u0130\uffeb\u0131\uffeb\u0132" +
    "\uffeb\u0133\uffeb\u0141\uffeb\u0142\uffeb\001\002\000\044\002\uffdb" +
    "\013\uffdb\014\uffdb\015\uffdb\u0129\uffdb\u012a\uffdb\u012b\uffdb\u012c" +
    "\uffdb\u012d\uffdb\u012e\uffdb\u012f\uffdb\u0130\uffdb\u0131\uffdb\u0132\uffdb" +
    "\u0133\uffdb\u0141\uffdb\u0142\uffdb\001\002\000\044\002\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\u0129\uffe0\u012a\uffe0\u012b\uffe0\u012c\uffe0" +
    "\u012d\uffe0\u012e\uffe0\u012f\uffe0\u0130\uffe0\u0131\uffe0\u0132\uffe0\u0133" +
    "\uffe0\u0141\uffe0\u0142\uffe0\001\002\000\044\002\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\u0129\uffe8\u012a\uffe8\u012b\uffe8\u012c\uffe8\u012d" +
    "\uffe8\u012e\uffe8\u012f\uffe8\u0130\uffe8\u0131\uffe8\u0132\uffe8\u0133\uffe8" +
    "\u0141\uffe8\u0142\uffe8\001\002\000\042\024\152\025\141\026" +
    "\145\027\136\030\140\031\135\032\155\033\143\034\151" +
    "\035\146\036\137\037\144\040\156\041\150\042\142\043" +
    "\154\001\002\000\044\002\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\u0129\uffd9\u012a\uffd9\u012b\uffd9\u012c\uffd9\u012d\uffd9\u012e\uffd9\u012f" +
    "\uffd9\u0130\uffd9\u0131\uffd9\u0132\uffd9\u0133\uffd9\u0141\uffd9\u0142\uffd9" +
    "\001\002\000\044\002\uffe2\013\uffe2\014\uffe2\015\uffe2\u0129" +
    "\uffe2\u012a\uffe2\u012b\uffe2\u012c\uffe2\u012d\uffe2\u012e\uffe2\u012f\uffe2" +
    "\u0130\uffe2\u0131\uffe2\u0132\uffe2\u0133\uffe2\u0141\uffe2\u0142\uffe2\001" +
    "\002\000\044\002\uffdc\013\uffdc\014\uffdc\015\uffdc\u0129\uffdc" +
    "\u012a\uffdc\u012b\uffdc\u012c\uffdc\u012d\uffdc\u012e\uffdc\u012f\uffdc\u0130" +
    "\uffdc\u0131\uffdc\u0132\uffdc\u0133\uffdc\u0141\uffdc\u0142\uffdc\001\002" +
    "\000\044\002\uffec\013\uffec\014\uffec\015\uffec\u0129\uffec\u012a" +
    "\uffec\u012b\uffec\u012c\uffec\u012d\uffec\u012e\uffec\u012f\uffec\u0130\uffec" +
    "\u0131\uffec\u0132\uffec\u0133\uffec\u0141\uffec\u0142\uffec\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\026\002\016\003\032\004\020\005\027\010" +
    "\022\011\014\013\006\022\025\023\035\025\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\152\016\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\055\012" +
    "\052\017\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\046\001\001\000\002\001\001\000\004\024" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\050\005\027\010\022\011\014\013" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\114\015\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public static Nodo padre;
	public int contador=0;

	//Listas para almacenar las PALABRAS RESERVADAS, SIMBOLOS, CADENAS Y VALORES NUMÉRICOS
	public static LinkedList<String> PalabraReservada = new LinkedList<String>();
	public static LinkedList<String> Simbolo = new LinkedList<String>();
	public static LinkedList<String> Cadenas = new LinkedList<String>();
        public static LinkedList<String> Variables = new LinkedList<String>();
	public static LinkedList<String> ValoresNumericos = new LinkedList<String>();
	
        public static LinkedList<String> Errores = new LinkedList<String>();

    
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/
/* 
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
            parser.Errores.add("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+". \n");
    }
*/ 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
/*
      public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
            parser.Errores.add("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+". \n");
    }
*/  

    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }
    
    public Symbol getS(){
        return this.s;
}  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ADJETIVO ::= INCREDIBLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ADJETIVO ::= FANTASTIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ADJETIVO ::= EXCELLENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ADJETIVO ::= WONDERFUL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ADJETIVO ::= CHARMING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ADJETIVO ::= LOVELY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ADJETIVO ::= INTERESTING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ADJETIVO ::= EXCITING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ADJETIVO ::= DELICIOUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ADJETIVO ::= AMAZING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ADJETIVO ::= VARIOUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ADJETIVO ::= CERTAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ADJETIVO ::= NAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ADJETIVO ::= ELEGANT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ADJETIVO ::= SMART 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ADJETIVO ::= COLD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ADJETIVO ::= RED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ADJETIVO ::= BRAVE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ADJETIVO ::= TALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ADJETIVO ::= FUNNY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ADJETIVO ::= OLD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ADJETIVO ::= SMALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ADJETIVO ::= INTELLIGENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ADJETIVO ::= HAPPY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ADJETIVO ::= BEAUTIFUL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ADJETIVO ::= BIG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ARTICULO ::= AN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARTICULO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ARTICULO ::= A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARTICULO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ARTICULO ::= THE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARTICULO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PUNTUACION ::= cerrllac 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PUNTUACION ::= abrllac 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PUNTUACION ::= cerrpar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PUNTUACION ::= abrpar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PUNTUACION ::= cerrin 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PUNTUACION ::= cerrad 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PUNTUACION ::= dospum 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PUNTUACION ::= puncom 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PUNTUACION ::= comm 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PUNTUACION ::= punn 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PUNTUACION ::= nadaa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONJUNCION ::= OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONJUNCION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONJUNCION ::= AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONJUNCION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PRONOMBRE ::= ME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PRONOMBRE ::= YOURSELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PRONOMBRE ::= MYSELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PRONOMBRE ::= HIM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PRONOMBRE ::= THEM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PRONOMBRE ::= US 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PRONOMBRE ::= THEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PRONOMBRE ::= WE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PRONOMBRE ::= IT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PRONOMBRE ::= SHE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PRONOMBRE ::= HE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PRONOMBRE ::= YOU 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PRONOMBRE ::= I 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VERBO2 ::= ENJOY YOURSELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO2",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VERBO ::= IS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VERBO ::= ARE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VERBO ::= AM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SUSTANTIVO ::= HI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SUSTANTIVO ::= HELLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SUSTANTIVO ::= BOOKSHELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SUSTANTIVO ::= SUN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SUSTANTIVO ::= PHONE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SUSTANTIVO ::= COMPUTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SUSTANTIVO ::= PEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SUSTANTIVO ::= TABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SUSTANTIVO ::= FLOWER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SUSTANTIVO ::= TREE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SUSTANTIVO ::= CHAIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SUSTANTIVO ::= CAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SUSTANTIVO ::= HOUSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SUSTANTIVO ::= BOOK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SUSTANTIVO ::= CAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SUSTANTIVO ::= DOG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FRASEVERBAL ::= VERBO ADJETIVO ADVERBIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FRASEVERBAL",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FRASEVERBAL ::= VERBO ADVERBIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FRASEVERBAL",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FRASENOMINAL ::= ARTICULO SUSTANTIVO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FRASENOMINAL",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FRASENOMINAL ::= ARTICULO ADJETIVO SUSTANTIVO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FRASENOMINAL",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PREDICADO ::= FRASEVERBAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PREDICADO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ADVERBIO ::= SLOWLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADVERBIO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ADVERBIO ::= QUICKLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADVERBIO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SUJETO ::= FRASENOMINAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUJETO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SUJETO ::= PRONOMBRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUJETO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // COMPUESTASENTENCIA ::= SIMPLESENTENCIA CONJUNCION SIMPLESENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPUESTASENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SIMPLESENTENCIA ::= SUJETO PREDICADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIMPLESENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SIMPLESENTENCIA ::= SUJETO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIMPLESENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INTERROGACIONSAL ::= HOW ARE YOU 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTERROGACIONSAL",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SALUDO ::= HELLO INTERROGACIONSAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALUDO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SALUDO ::= HI INTERROGACIONSAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALUDO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SALUDO ::= HELLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALUDO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SALUDO ::= HI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALUDO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SALUDO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALUDO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= VERBO2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= COMPUESTASENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SIMPLESENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SALUDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PARRAFO ::= SENTENCIA PUNTUACION 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("PARRAFO");
    tmp.setValor(" Parrafo");
    tmp.setIdNod(parser.contador++);
    tmp.AddHijos((Nodo) s1);
    tmp.AddHijos((Nodo) s2);
    RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARRAFO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PARRAFO ::= SENTENCIA 
            {
              Object RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object instr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		

    Nodo nd = new Nodo("PARRAFO");
    nd.setIdNod(parser.contador++);

    nd.AddHijos((Nodo) instr);
    parser.padre = (Nodo) nd;
    System.out.println(parser.padre);
    RESULT = instr;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARRAFO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PARRAFO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

