/* The following code was generated by JFlex 1.4.3 on 19/05/23 10:48 AM */

package analizadores;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 19/05/23 10:48 AM from the specification file
 * <tt>C:/Users/audyc/Documents/NetBeansProjects/ProyectoTraductor/src/analizadores/LexerCup.flex</tt>
 */
class LexerCup {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\1\2\0\1\1\22\0\1\61\1\62\5\0\1\24\4\0"+
    "\1\1\1\64\2\0\12\0\7\0\1\21\1\47\1\34\1\41\1\27"+
    "\1\56\1\52\1\10\1\2\1\66\1\0\1\35\1\50\1\45\1\37"+
    "\1\33\1\0\1\26\1\13\1\20\1\40\1\44\1\16\1\60\1\4"+
    "\1\54\4\0\1\0\1\0\1\23\1\46\1\31\1\36\1\11\1\55"+
    "\1\51\1\12\1\3\1\65\1\0\1\32\1\22\1\43\1\5\1\30"+
    "\1\0\1\25\1\14\1\15\1\6\1\42\1\17\1\57\1\7\1\53"+
    "\45\0\1\63\1\67\uff5e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\47\0\1\3\1\4\5\0\1\5"+
    "\13\0\1\6\1\0\1\7\1\0\1\10\4\0\1\11"+
    "\1\0\1\12\6\0\1\13\5\0\1\14\5\0\1\14"+
    "\1\0\1\14\1\15\5\0\1\16\4\0\1\15\3\0"+
    "\1\17\2\0\1\20\43\0\1\6\2\0\1\7\20\0"+
    "\1\21\37\0\1\20\5\0\1\22\1\23\1\24\1\25"+
    "\5\0\1\26\2\0\1\27\2\0\1\30\3\0\1\31"+
    "\1\32\13\0\1\33\1\0\1\33\3\0\1\34\1\35"+
    "\2\0\1\36\7\0\1\37\3\0\1\40\2\0\1\41"+
    "\4\0\1\40\1\37\10\0\1\42\4\0\1\43\3\0"+
    "\1\44\1\45\11\0\1\46\32\0\1\26\11\0\1\47"+
    "\5\0\1\50\1\0\1\51\5\0\1\52\26\0\1\53"+
    "\25\0\1\54\3\0\1\7\1\55\12\0\1\56\10\0"+
    "\1\57\2\0\1\60\11\0\1\61\1\62\15\0\1\63"+
    "\6\0\1\64\15\0\1\65\1\66\1\67\4\0\1\70"+
    "\3\0\1\71\3\0\1\71\1\72\1\0\1\73\12\0"+
    "\1\74\2\0\1\75\1\0\1\74\3\0\1\76\14\0"+
    "\1\77\2\0\1\100\1\0\1\101\1\0\1\102\1\0"+
    "\1\103\3\0\1\102\1\104\11\0\1\105\5\0\1\106"+
    "\7\0\1\107\4\0\1\110\1\0\1\111\1\112\7\0"+
    "\1\113\2\0\1\113\3\0\1\114\1\0\1\115\1\116"+
    "\12\0\1\114\4\0\1\117\7\0\1\120\2\0\1\121"+
    "\1\0\1\107\2\0\1\122\7\0\1\105\10\0\1\123"+
    "\3\0\1\124\13\0\1\125\1\0\1\126\1\0\1\127"+
    "\13\0\1\130\1\0\1\131\1\132\5\0\1\133\4\0"+
    "\1\134\1\135\1\0\1\136\1\0\1\137\1\140\1\141"+
    "\7\0\1\142\6\0\1\143\2\0\1\144\2\0\1\145"+
    "\14\0\1\146\4\0\1\147\2\0\1\140\1\0\1\150"+
    "\3\0\1\151\6\0\1\152\1\0\1\153\1\0\1\152"+
    "\1\0\1\154\1\155\1\0\1\156\5\0\1\157\1\0"+
    "\1\102\7\0\1\160\3\0\1\161\4\0\1\162\6\0"+
    "\1\163\1\0\1\163\1\0\1\164\1\165\1\0\1\166"+
    "\1\0\1\167\7\0\1\170\1\0\1\171\42\0\1\172"+
    "\3\0\1\173\3\0\1\173\13\0\1\174\1\175\1\0"+
    "\1\176\2\0\1\15\6\0\1\177\3\0\1\177\12\0"+
    "\1\174\17\0\1\200\7\0\1\200\1\201\1\202\1\0"+
    "\1\203\1\204\1\0\1\203\1\0\1\205\1\206\3\0"+
    "\1\207\1\174\1\0\1\210\1\0\1\211\1\0\1\211"+
    "\1\0\1\212\2\0\1\213\3\0\1\214\1\215\3\0"+
    "\1\216\1\217\3\0\1\220\1\221\2\0\1\222\10\0"+
    "\1\223\3\0\1\224\1\0\1\225\1\226\1\227\3\0"+
    "\1\230\1\231\3\0\1\224\1\0\1\225\4\0\1\232"+
    "\4\0\1\233\2\0\1\234\1\0\1\235\1\236\1\237"+
    "\1\0\1\234\2\0\1\240\1\152\3\0\1\224\1\0"+
    "\1\241\1\0\1\242\1\243\1\244";

  private static int [] zzUnpackAction() {
    int [] result = new int[1014];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348"+
    "\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508"+
    "\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8"+
    "\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888"+
    "\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u0968\0\u09a0\0\u09d8\0\u0a10"+
    "\0\u0a48\0\u0a80\0\u0968\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98"+
    "\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58"+
    "\0\u0d90\0\u0dc8\0\u0968\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0968"+
    "\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068"+
    "\0\u0968\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0"+
    "\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0"+
    "\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8\0\u0968\0\u1500\0\u1538"+
    "\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688\0\u0968\0\u16c0"+
    "\0\u16f8\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880"+
    "\0\u18b8\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40"+
    "\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00"+
    "\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0"+
    "\0\u1df8\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80"+
    "\0\u1fb8\0\u1ff0\0\u2028\0\u2060\0\u2098\0\u20d0\0\u2108\0\u2140"+
    "\0\u2178\0\u21b0\0\u21e8\0\u2220\0\u2258\0\u2290\0\u22c8\0\u2300"+
    "\0\u2338\0\u0968\0\u2370\0\u23a8\0\u23e0\0\u2418\0\u2450\0\u2488"+
    "\0\u24c0\0\u24f8\0\u2530\0\u2568\0\u25a0\0\u25d8\0\u2610\0\u2648"+
    "\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u2760\0\u2798\0\u27d0\0\u2808"+
    "\0\u2840\0\u2878\0\u28b0\0\u28e8\0\u2920\0\u2958\0\u2990\0\u29c8"+
    "\0\u2a00\0\u0968\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18\0\u0968"+
    "\0\u0968\0\u0968\0\u0968\0\u2b50\0\u2b88\0\u2bc0\0\u2bf8\0\u2c30"+
    "\0\u2c68\0\u2ca0\0\u2cd8\0\u0968\0\u2d10\0\u2d48\0\u0968\0\u2d80"+
    "\0\u2db8\0\u2df0\0\u0968\0\u0968\0\u2e28\0\u2e60\0\u2e98\0\u2ed0"+
    "\0\u2f08\0\u2f40\0\u2f78\0\u2fb0\0\u2fe8\0\u3020\0\u3058\0\u3090"+
    "\0\u30c8\0\u3100\0\u3138\0\u3170\0\u31a8\0\u0968\0\u0968\0\u31e0"+
    "\0\u3218\0\u0968\0\u3250\0\u3288\0\u32c0\0\u32f8\0\u3330\0\u3368"+
    "\0\u33a0\0\u33d8\0\u3410\0\u3448\0\u3480\0\u34b8\0\u34f0\0\u3528"+
    "\0\u0968\0\u3560\0\u3598\0\u35d0\0\u3608\0\u3640\0\u3678\0\u36b0"+
    "\0\u36e8\0\u3720\0\u3758\0\u3790\0\u37c8\0\u3800\0\u3838\0\u0968"+
    "\0\u3870\0\u38a8\0\u38e0\0\u3918\0\u0968\0\u3950\0\u3988\0\u39c0"+
    "\0\u0968\0\u0968\0\u39f8\0\u3a30\0\u3a68\0\u3aa0\0\u3ad8\0\u3b10"+
    "\0\u3b48\0\u3b80\0\u3bb8\0\u0968\0\u3bf0\0\u3c28\0\u3c60\0\u3c98"+
    "\0\u3cd0\0\u3d08\0\u3d40\0\u3d78\0\u3db0\0\u3de8\0\u3e20\0\u3e58"+
    "\0\u3e90\0\u3ec8\0\u3f00\0\u3f38\0\u3f70\0\u3fa8\0\u3fe0\0\u4018"+
    "\0\u4050\0\u4088\0\u40c0\0\u40f8\0\u4130\0\u4168\0\u41a0\0\u41d8"+
    "\0\u4210\0\u4248\0\u4280\0\u42b8\0\u42f0\0\u4328\0\u4360\0\u4398"+
    "\0\u0968\0\u43d0\0\u4408\0\u4440\0\u4478\0\u44b0\0\u0968\0\u44e8"+
    "\0\u0968\0\u4520\0\u4558\0\u4590\0\u45c8\0\u4600\0\u0968\0\u4638"+
    "\0\u4670\0\u46a8\0\u46e0\0\u4718\0\u4750\0\u4788\0\u47c0\0\u47f8"+
    "\0\u4830\0\u4868\0\u48a0\0\u48d8\0\u4910\0\u4948\0\u4980\0\u49b8"+
    "\0\u49f0\0\u4a28\0\u4a60\0\u4a98\0\u4ad0\0\u0968\0\u4b08\0\u4b40"+
    "\0\u4b78\0\u4bb0\0\u4be8\0\u4c20\0\u4c58\0\u4c90\0\u4cc8\0\u4d00"+
    "\0\u4d38\0\u4d70\0\u4da8\0\u4de0\0\u4e18\0\u4e50\0\u4e88\0\u4ec0"+
    "\0\u4ef8\0\u4f30\0\u4f68\0\u0968\0\u4fa0\0\u4fd8\0\u5010\0\u0968"+
    "\0\u0968\0\u5048\0\u5080\0\u50b8\0\u50f0\0\u5128\0\u5160\0\u5198"+
    "\0\u51d0\0\u5208\0\u5240\0\u0968\0\u5278\0\u52b0\0\u52e8\0\u5320"+
    "\0\u5358\0\u5390\0\u53c8\0\u5400\0\u0968\0\u5438\0\u5470\0\u0968"+
    "\0\u54a8\0\u54e0\0\u5518\0\u5550\0\u5588\0\u55c0\0\u55f8\0\u5630"+
    "\0\u5668\0\u0968\0\u0968\0\u56a0\0\u56d8\0\u5710\0\u5748\0\u5780"+
    "\0\u57b8\0\u57f0\0\u5828\0\u5860\0\u5898\0\u58d0\0\u5908\0\u5940"+
    "\0\u0968\0\u5978\0\u59b0\0\u59e8\0\u5a20\0\u5a58\0\u5a90\0\u0968"+
    "\0\u5ac8\0\u5b00\0\u5b38\0\u5b70\0\u5ba8\0\u5be0\0\u5c18\0\u5c50"+
    "\0\u5c88\0\u5cc0\0\u5cf8\0\u5d30\0\u5d68\0\u0968\0\u0968\0\u0968"+
    "\0\u5da0\0\u5dd8\0\u5e10\0\u5e48\0\u0968\0\u5e80\0\u5eb8\0\u5ef0"+
    "\0\u5f28\0\u5f60\0\u5f98\0\u5fd0\0\u6008\0\u0968\0\u6040\0\u0968"+
    "\0\u6078\0\u60b0\0\u60e8\0\u6120\0\u6158\0\u6190\0\u61c8\0\u6200"+
    "\0\u6238\0\u6270\0\u62a8\0\u62e0\0\u6318\0\u0968\0\u6350\0\u6388"+
    "\0\u63c0\0\u63f8\0\u6430\0\u0968\0\u6468\0\u64a0\0\u64d8\0\u6510"+
    "\0\u6548\0\u6580\0\u65b8\0\u65f0\0\u6628\0\u6660\0\u6698\0\u66d0"+
    "\0\u0968\0\u6708\0\u6740\0\u0968\0\u6778\0\u0968\0\u67b0\0\u67e8"+
    "\0\u6820\0\u0968\0\u6858\0\u6890\0\u68c8\0\u6900\0\u0968\0\u6938"+
    "\0\u6970\0\u69a8\0\u69e0\0\u6a18\0\u6a50\0\u6a88\0\u6ac0\0\u6af8"+
    "\0\u6b30\0\u6b68\0\u6ba0\0\u6bd8\0\u6c10\0\u6c48\0\u0968\0\u6c80"+
    "\0\u6cb8\0\u6cf0\0\u6d28\0\u6d60\0\u6d98\0\u6dd0\0\u6e08\0\u6e40"+
    "\0\u6e78\0\u6eb0\0\u6ee8\0\u0968\0\u6f20\0\u0968\0\u0968\0\u6f58"+
    "\0\u6f90\0\u6fc8\0\u7000\0\u7038\0\u7070\0\u70a8\0\u70e0\0\u7118"+
    "\0\u7150\0\u7188\0\u71c0\0\u71f8\0\u7230\0\u7268\0\u72a0\0\u0968"+
    "\0\u0968\0\u72d8\0\u7310\0\u7348\0\u7380\0\u73b8\0\u73f0\0\u7428"+
    "\0\u7460\0\u7498\0\u74d0\0\u7508\0\u7540\0\u7578\0\u75b0\0\u75e8"+
    "\0\u0968\0\u7620\0\u7658\0\u7690\0\u76c8\0\u7700\0\u7738\0\u7770"+
    "\0\u0968\0\u77a8\0\u77e0\0\u0968\0\u7818\0\u7850\0\u7888\0\u78c0"+
    "\0\u0968\0\u78f8\0\u7930\0\u7968\0\u79a0\0\u79d8\0\u7a10\0\u7a48"+
    "\0\u7a80\0\u7ab8\0\u7af0\0\u7b28\0\u7b60\0\u7b98\0\u7bd0\0\u7c08"+
    "\0\u7c40\0\u0968\0\u7c78\0\u7cb0\0\u7ce8\0\u0968\0\u7d20\0\u7d58"+
    "\0\u7d90\0\u7dc8\0\u7e00\0\u7e38\0\u7e70\0\u7ea8\0\u7ee0\0\u7f18"+
    "\0\u7f50\0\u0968\0\u7f88\0\u0968\0\u7fc0\0\u0968\0\u7ff8\0\u8030"+
    "\0\u8068\0\u80a0\0\u80d8\0\u8110\0\u8148\0\u8180\0\u81b8\0\u81f0"+
    "\0\u8228\0\u0968\0\u8260\0\u0968\0\u0968\0\u8298\0\u82d0\0\u8308"+
    "\0\u8340\0\u8378\0\u0968\0\u83b0\0\u83e8\0\u8420\0\u8458\0\u0968"+
    "\0\u0968\0\u8490\0\u0968\0\u84c8\0\u0968\0\u8500\0\u0968\0\u8538"+
    "\0\u8570\0\u85a8\0\u85e0\0\u8618\0\u8650\0\u8688\0\u0968\0\u86c0"+
    "\0\u86f8\0\u8730\0\u8768\0\u87a0\0\u87d8\0\u0968\0\u8810\0\u8848"+
    "\0\u0968\0\u8880\0\u88b8\0\u0968\0\u88f0\0\u8928\0\u8960\0\u8998"+
    "\0\u89d0\0\u8a08\0\u8a40\0\u8a78\0\u8ab0\0\u8ae8\0\u8b20\0\u8b58"+
    "\0\u0968\0\u8b90\0\u8bc8\0\u8c00\0\u8c38\0\u0968\0\u8c70\0\u8ca8"+
    "\0\u8ce0\0\u8d18\0\u0968\0\u8d50\0\u8d88\0\u8dc0\0\u0968\0\u8df8"+
    "\0\u8e30\0\u8e68\0\u8ea0\0\u8ed8\0\u8f10\0\u8f48\0\u8f80\0\u0968"+
    "\0\u8fb8\0\u8ff0\0\u9028\0\u0968\0\u0968\0\u9060\0\u0968\0\u9098"+
    "\0\u90d0\0\u9108\0\u9140\0\u9178\0\u0968\0\u91b0\0\u0968\0\u91e8"+
    "\0\u9220\0\u9258\0\u9290\0\u92c8\0\u9300\0\u9338\0\u0968\0\u9370"+
    "\0\u93a8\0\u93e0\0\u0968\0\u9418\0\u9450\0\u9488\0\u94c0\0\u0968"+
    "\0\u94f8\0\u9530\0\u9568\0\u95a0\0\u95d8\0\u9610\0\u9648\0\u9680"+
    "\0\u96b8\0\u96f0\0\u0968\0\u0968\0\u9728\0\u0968\0\u9760\0\u0968"+
    "\0\u9798\0\u97d0\0\u9808\0\u9840\0\u9878\0\u98b0\0\u98e8\0\u0968"+
    "\0\u9920\0\u0968\0\u9958\0\u9990\0\u99c8\0\u9a00\0\u9a38\0\u9a70"+
    "\0\u9aa8\0\u9ae0\0\u9b18\0\u9b50\0\u9b88\0\u9bc0\0\u9bf8\0\u9c30"+
    "\0\u9c68\0\u9ca0\0\u9cd8\0\u9d10\0\u9d48\0\u9d80\0\u9db8\0\u9df0"+
    "\0\u9e28\0\u9e60\0\u9e98\0\u9ed0\0\u9f08\0\u9f40\0\u9f78\0\u9fb0"+
    "\0\u9fe8\0\ua020\0\ua058\0\ua090\0\u0968\0\ua0c8\0\ua100\0\ua138"+
    "\0\ua170\0\ua1a8\0\ua1e0\0\ua218\0\ua250\0\ua288\0\ua2c0\0\ua2f8"+
    "\0\ua330\0\ua368\0\ua3a0\0\ua3d8\0\ua410\0\ua448\0\ua480\0\ua4b8"+
    "\0\ua4f0\0\u0968\0\ua528\0\u0968\0\ua560\0\ua598\0\u0968\0\ua5d0"+
    "\0\ua608\0\ua640\0\ua678\0\ua6b0\0\ua6e8\0\ua720\0\ua758\0\ua790"+
    "\0\ua7c8\0\ua800\0\ua838\0\ua870\0\ua8a8\0\ua8e0\0\ua918\0\ua950"+
    "\0\ua988\0\ua9c0\0\ua9f8\0\uaa30\0\uaa68\0\uaaa0\0\uaad8\0\uab10"+
    "\0\uab48\0\uab80\0\uabb8\0\uabf0\0\uac28\0\uac60\0\uac98\0\uacd0"+
    "\0\uad08\0\uad40\0\uad78\0\uadb0\0\uade8\0\uae20\0\uae58\0\uae90"+
    "\0\uaec8\0\uaf00\0\uaf38\0\uaf70\0\uafa8\0\u0968\0\u0968\0\uafe0"+
    "\0\ub018\0\u0968\0\ub050\0\ub088\0\ub0c0\0\u0968\0\u0968\0\ub0f8"+
    "\0\ub130\0\ub168\0\u0968\0\u0968\0\ub1a0\0\u0968\0\ub1d8\0\ub210"+
    "\0\ub248\0\ub280\0\ub2b8\0\u0968\0\ub2f0\0\ub328\0\u0968\0\ub360"+
    "\0\ub398\0\ub3d0\0\u0968\0\u0968\0\ub408\0\ub440\0\ub478\0\u0968"+
    "\0\u0968\0\ub4b0\0\ub4e8\0\ub520\0\u0968\0\u0968\0\ub558\0\ub590"+
    "\0\u0968\0\ub5c8\0\ub600\0\ub638\0\ub670\0\ub6a8\0\ub6e0\0\ub718"+
    "\0\ub750\0\u0968\0\ub788\0\ub7c0\0\ub7f8\0\ub830\0\ub868\0\ub8a0"+
    "\0\u0968\0\u0968\0\ub8d8\0\ub910\0\ub948\0\u0968\0\u0968\0\ub980"+
    "\0\ub9b8\0\ub9f0\0\uba28\0\uba60\0\uba98\0\ubad0\0\ubb08\0\ubb40"+
    "\0\ubb78\0\u0968\0\ubbb0\0\ubbe8\0\ubc20\0\ubc58\0\u0968\0\ubc90"+
    "\0\ubcc8\0\ubd00\0\ubd38\0\u0968\0\u0968\0\u0968\0\ubd70\0\ubda8"+
    "\0\ubde0\0\ube18\0\u0968\0\u0968\0\ube50\0\ube88\0\ubec0\0\u0968"+
    "\0\ubef8\0\u0968\0\ubf30\0\u0968\0\u0968\0\u0968";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1014];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\3\0\1\25\1\26\1\0"+
    "\1\27\1\30\1\0\1\31\1\32\1\33\1\34\1\35"+
    "\1\0\1\36\1\0\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\2\0\1\2\3\0"+
    "\1\51\1\52\1\53\1\0\1\2\57\0\1\2\21\0"+
    "\2\54\1\55\4\0\1\56\1\0\1\57\16\0\1\60"+
    "\1\0\1\61\2\0\1\62\4\0\2\63\25\0\1\54"+
    "\1\55\4\0\1\56\1\0\1\57\16\0\1\60\11\0"+
    "\1\63\14\0\1\64\1\65\1\0\1\66\1\67\2\0"+
    "\1\70\7\0\1\71\1\0\1\72\3\0\1\73\10\0"+
    "\1\74\35\0\1\75\6\0\1\76\7\0\1\77\14\0"+
    "\1\100\1\101\11\0\1\102\24\0\1\103\30\0\1\104"+
    "\5\0\1\105\21\0\1\106\1\0\1\66\1\67\2\0"+
    "\1\70\11\0\1\107\46\0\1\110\2\0\1\111\3\0"+
    "\1\112\10\0\1\113\4\0\1\114\7\0\1\115\10\0"+
    "\1\116\22\0\1\117\17\0\1\120\1\0\1\121\4\0"+
    "\1\122\10\0\1\123\27\0\1\110\1\0\1\124\3\0"+
    "\1\112\10\0\1\113\47\0\1\125\1\126\1\0\1\127"+
    "\1\130\1\0\1\131\1\132\1\133\14\0\1\134\7\0"+
    "\1\135\1\136\32\0\1\126\1\0\1\137\1\130\2\0"+
    "\1\132\1\133\62\0\1\140\3\0\1\141\1\142\4\0"+
    "\1\143\44\0\1\144\10\0\1\145\3\0\1\146\25\0"+
    "\1\147\35\0\1\145\3\0\1\146\63\0\1\140\2\0"+
    "\1\150\1\141\1\142\3\0\1\151\1\143\7\0\1\152"+
    "\7\0\1\153\24\0\1\154\13\0\1\155\1\0\1\156"+
    "\2\157\1\0\1\160\1\161\2\0\1\162\2\0\1\163"+
    "\1\164\3\0\1\165\2\0\1\166\1\167\2\0\1\170"+
    "\1\0\1\171\1\0\1\172\1\173\1\174\1\175\4\0"+
    "\1\176\1\177\16\0\1\200\1\201\2\0\1\202\10\0"+
    "\1\113\1\203\56\0\1\156\1\0\1\157\2\0\1\161"+
    "\2\0\1\162\2\0\1\204\4\0\1\165\3\0\1\167"+
    "\4\0\1\171\2\0\1\173\6\0\1\176\14\0\1\205"+
    "\1\117\15\0\1\206\1\0\1\120\1\0\2\121\3\0"+
    "\1\122\2\0\1\207\5\0\1\123\1\0\1\210\45\0"+
    "\1\211\1\0\1\212\45\0\1\213\5\0\1\214\77\0"+
    "\1\215\1\0\1\211\1\0\1\212\1\216\43\0\1\217"+
    "\1\213\5\0\1\214\15\0\1\220\45\0\1\221\1\222"+
    "\14\0\1\223\52\0\1\224\6\0\1\76\2\0\1\225"+
    "\4\0\1\77\1\226\11\0\1\227\1\0\1\100\1\101"+
    "\1\230\1\231\7\0\1\102\1\232\21\0\1\103\1\0"+
    "\1\103\30\0\1\104\1\0\1\233\3\0\1\105\1\234"+
    "\22\0\1\221\1\222\12\0\1\235\1\0\1\223\13\0"+
    "\1\236\1\237\32\0\1\240\1\0\1\241\15\0\1\242"+
    "\46\0\1\243\1\240\1\0\1\244\13\0\1\245\1\0"+
    "\1\242\13\0\1\246\33\0\1\247\1\0\1\250\1\251"+
    "\1\252\1\0\1\253\11\0\1\254\46\0\1\255\1\256"+
    "\1\252\1\250\1\251\1\252\1\0\1\253\7\0\1\257"+
    "\5\0\1\260\7\0\1\261\1\262\34\0\1\200\1\201"+
    "\2\0\1\202\7\0\1\263\1\113\1\203\3\0\1\264"+
    "\7\0\1\265\1\266\7\0\1\116\24\0\1\267\3\0"+
    "\1\270\63\0\1\267\3\0\1\270\15\0\1\271\7\0"+
    "\1\272\41\0\1\273\67\0\1\273\15\0\1\274\43\0"+
    "\1\275\1\0\1\276\3\0\1\277\13\0\1\300\44\0"+
    "\1\301\1\275\1\0\1\276\3\0\1\277\13\0\1\300"+
    "\1\302\1\303\7\0\1\304\41\0\1\305\67\0\1\305"+
    "\15\0\1\306\52\0\1\307\33\0\1\310\141\0\1\311"+
    "\61\0\1\312\126\0\1\313\67\0\1\314\41\0\1\315"+
    "\67\0\1\316\64\0\1\317\45\0\1\320\103\0\1\321"+
    "\62\0\1\322\12\0\1\63\43\0\1\323\72\0\1\324"+
    "\100\0\1\322\12\0\1\63\104\0\1\321\34\0\1\325"+
    "\64\0\1\326\136\0\1\327\17\0\1\330\67\0\1\331"+
    "\3\0\1\332\14\0\1\333\112\0\1\334\3\0\1\335"+
    "\23\0\1\336\64\0\1\337\105\0\1\340\46\0\1\323"+
    "\65\0\1\341\11\0\1\342\57\0\1\343\102\0\1\344"+
    "\51\0\1\343\101\0\1\345\14\0\1\346\3\0\1\347"+
    "\100\0\1\344\34\0\1\350\33\0\1\351\47\0\1\352"+
    "\47\0\1\353\63\0\1\354\67\0\1\355\11\0\1\342"+
    "\10\0\1\356\104\0\1\357\12\0\1\360\52\0\1\361"+
    "\13\0\1\362\32\0\1\363\36\0\1\364\37\0\1\365"+
    "\42\0\1\366\3\0\1\367\110\0\1\370\10\0\1\371"+
    "\34\0\1\366\1\0\1\372\1\367\111\0\1\373\7\0"+
    "\1\374\73\0\1\375\10\0\1\376\42\0\1\377\55\0"+
    "\1\363\36\0\1\u0100\67\0\1\u0101\51\0\1\u0102\27\0"+
    "\1\u0103\5\0\1\u0104\13\0\1\u0105\47\0\1\u0106\3\0"+
    "\1\u0107\72\0\1\u0108\72\0\1\u0109\66\0\1\u0109\53\0"+
    "\1\u010a\23\0\1\u010b\1\u010c\67\0\1\u010d\7\0\1\u010e"+
    "\75\0\1\u010f\103\0\1\u0110\21\0\1\u0111\1\u0108\102\0"+
    "\1\u0112\51\0\1\u0113\77\0\1\u0114\71\0\1\u0115\51\0"+
    "\1\u0116\67\0\1\u0117\3\0\1\u0118\37\0\1\u0119\45\0"+
    "\1\u0118\7\0\1\u011a\12\0\1\u011b\32\0\1\u011c\14\0"+
    "\1\u011d\55\0\1\u011e\14\0\1\u011d\74\0\1\u011f\71\0"+
    "\1\u0120\32\0\1\u0121\26\0\1\u0122\35\0\1\u0121\34\0"+
    "\1\u0122\33\0\1\u0123\6\0\1\u0124\66\0\1\u0125\23\0"+
    "\1\u0126\67\0\1\u0127\45\0\1\u0128\72\0\1\u0129\74\0"+
    "\1\u012a\73\0\1\u012b\50\0\1\u012c\120\0\1\u012d\31\0"+
    "\1\u0117\3\0\1\u0118\37\0\1\u012e\36\0\1\u012f\31\0"+
    "\1\u0130\51\0\1\u0131\62\0\1\u0132\77\0\1\u0133\44\0"+
    "\1\u0134\60\0\1\u0135\15\0\1\u0136\61\0\1\u0137\66\0"+
    "\1\u0138\66\0\1\u0139\75\0\1\u013a\15\0\1\u013b\50\0"+
    "\1\u013c\62\0\1\u013d\73\0\1\u013e\75\0\1\u013f\67\0"+
    "\1\u0140\57\0\1\u0141\62\0\1\u0142\140\0\1\u0143\26\0"+
    "\1\u0144\76\0\1\u0145\60\0\1\u0146\6\0\1\u0147\5\0"+
    "\1\u0148\110\0\1\334\2\0\1\u0149\26\0\1\u014a\57\0"+
    "\1\337\105\0\1\u014b\57\0\1\u014c\77\0\1\u014d\104\0"+
    "\1\u014e\41\0\1\u014f\12\0\1\u0150\51\0\1\u0151\122\0"+
    "\1\u0152\37\0\1\u0153\12\0\1\u0150\47\0\1\u0151\77\0"+
    "\1\u0154\12\0\1\u0155\77\0\1\u0156\31\0\1\u0157\7\0"+
    "\1\u0158\67\0\1\u0159\64\0\1\u015a\1\0\1\u015b\1\u015c"+
    "\14\0\1\u015d\22\0\1\u015e\24\0\1\u015f\122\0\1\u0160"+
    "\65\0\1\u0161\34\0\1\u015f\67\0\1\u0162\2\0\1\u0163"+
    "\4\0\1\u0164\14\0\1\u0165\20\0\1\u0166\31\0\1\u0167"+
    "\16\0\1\u0157\50\0\1\u0159\114\0\1\u0168\32\0\1\u012c"+
    "\105\0\1\u0169\75\0\1\u016a\47\0\1\u016b\116\0\1\u016c"+
    "\71\0\1\u016d\35\0\1\u016e\101\0\1\u016f\70\0\1\u0170"+
    "\66\0\1\u0171\14\0\1\u0172\12\0\1\u0173\20\0\1\u0174"+
    "\16\0\1\u0175\61\0\1\u0176\55\0\1\u0177\110\0\1\u0178"+
    "\15\0\1\u0179\11\0\1\u017a\50\0\1\u017b\46\0\1\u0176"+
    "\77\0\1\u017c\11\0\1\u017d\40\0\1\u017e\105\0\1\u017f"+
    "\43\0\1\u0180\1\0\1\u0181\105\0\1\u0182\67\0\1\u0183"+
    "\75\0\1\u0184\72\0\1\u0185\54\0\1\u0186\101\0\1\u0187"+
    "\64\0\1\u0188\121\0\1\323\66\0\1\u0189\17\0\1\u018a"+
    "\67\0\1\u018b\103\0\1\u018c\54\0\1\u018d\2\0\1\u018e"+
    "\4\0\1\u018f\52\0\1\u0190\71\0\1\u0191\75\0\1\u0192"+
    "\55\0\1\u0193\114\0\1\u0194\64\0\1\u0195\53\0\1\u0196"+
    "\105\0\1\u0197\67\0\1\u0198\66\0\1\u0199\53\0\1\u019a"+
    "\67\0\1\u019b\67\0\1\u019c\117\0\1\u019d\33\0\1\u019e"+
    "\106\0\1\u019f\53\0\1\u01a0\112\0\1\u01a1\53\0\1\u01a2"+
    "\100\0\1\u01a3\53\0\1\u01a4\63\0\1\u01a5\101\0\1\u01a6"+
    "\24\0\1\u01a7\31\0\1\u01a8\62\0\1\u01a9\73\0\1\u01aa"+
    "\115\0\1\u01ab\57\0\1\u01ac\67\0\1\u01a5\61\0\1\u01ad"+
    "\26\0\1\u01ae\27\0\1\u01a8\101\0\1\u01a7\1\u01a6\61\0"+
    "\1\u01af\67\0\1\u01b0\77\0\1\u01b1\51\0\1\u01b2\33\0"+
    "\1\u01b3\35\0\1\u01b4\70\0\1\u01b5\107\0\1\u01b6\10\0"+
    "\1\u01b7\36\0\1\u01b8\103\0\1\u01b9\70\0\1\u01ba\105\0"+
    "\1\u01b3\57\0\1\u01bb\7\0\1\u01bc\32\0\1\u01bd\77\0"+
    "\1\u01be\67\0\1\u01bf\57\0\1\u01c0\127\0\1\u01c1\41\0"+
    "\1\u01c1\51\0\1\u01c2\72\0\1\u01c3\123\0\1\u01c4\32\0"+
    "\1\u01c5\73\0\1\u01c6\115\0\1\u01c7\37\0\1\u01c8\71\0"+
    "\1\u01c9\65\0\1\u01ca\70\0\1\u01cb\105\0\1\u01cc\46\0"+
    "\1\u01cd\33\0\1\u01ce\36\0\1\u01cf\105\0\1\u01d0\100\0"+
    "\1\u01d1\3\0\1\u01d2\70\0\1\u01d3\33\0\1\u01d4\105\0"+
    "\1\u01d5\51\0\1\u01d6\70\0\1\u01d7\64\0\1\u01d8\72\0"+
    "\1\u01c8\65\0\1\u01d9\67\0\1\u01da\67\0\1\u019c\123\0"+
    "\1\u01db\63\0\1\u01dc\44\0\1\u01dd\60\0\1\u01de\112\0"+
    "\1\u01df\53\0\1\u01e0\66\0\1\u01e1\73\0\1\u01dd\103\0"+
    "\1\u01e2\73\0\1\u01e3\47\0\1\u01e4\62\0\1\u01e5\117\0"+
    "\1\u01e6\27\0\1\u01e7\127\0\1\u01e8\105\0\1\u01e9\35\0"+
    "\1\u01ea\67\0\1\u01eb\121\0\1\u01ec\34\0\1\u018c\100\0"+
    "\1\u0190\40\0\1\u01ed\7\0\1\u01ee\27\0\1\u01ef\23\0"+
    "\1\u0191\103\0\1\u01f0\51\0\1\u01f1\132\0\1\u01e8\67\0"+
    "\1\u01e6\24\0\1\u01f2\76\0\1\u01f3\3\0\1\u01f4\133\0"+
    "\1\u01f5\17\0\1\u01f6\76\0\1\u01f7\6\0\1\u01f8\121\0"+
    "\1\u01f9\67\0\1\u01fa\35\0\1\u01f6\111\0\1\u01fb\30\0"+
    "\1\u01fc\60\0\1\u01fd\67\0\1\u01fe\103\0\1\u01ff\55\0"+
    "\1\u0200\67\0\1\u0201\134\0\1\u0202\66\0\1\u0203\20\0"+
    "\1\u0204\67\0\1\u0205\103\0\1\u0206\110\0\1\u0207\67\0"+
    "\1\u0208\40\0\1\u01fc\63\0\1\u01d8\112\0\1\u01d6\50\0"+
    "\1\u01d7\71\0\1\u0209\66\0\1\u020a\105\0\1\u020b\50\0"+
    "\1\u0209\64\0\1\u020c\121\0\1\u020c\44\0\1\u020d\64\0"+
    "\1\u020e\73\0\1\u020f\77\0\1\u0210\57\0\1\u0211\74\0"+
    "\1\u0212\60\0\1\u0213\103\0\1\u020e\60\0\1\u0214\117\0"+
    "\1\u0212\37\0\1\u0215\75\0\1\u0216\114\0\1\u0217\70\0"+
    "\1\u0217\75\0\1\110\35\0\1\u0218\51\0\1\u0219\72\0"+
    "\1\u021a\75\0\1\u021b\65\0\1\u021c\66\0\1\u021d\76\0"+
    "\1\u021e\51\0\1\u021f\63\0\1\u0220\107\0\1\u0221\74\0"+
    "\1\u0222\43\0\1\u0223\73\0\1\u0224\60\0\1\u0225\76\0"+
    "\1\u0226\107\0\1\u0227\46\0\1\u0228\101\0\1\u0229\106\0"+
    "\1\u022a\71\0\1\u022b\101\0\1\u022c\32\0\1\u022d\57\0"+
    "\1\u022e\73\0\1\u022f\63\0\1\u0230\127\0\1\u0231\41\0"+
    "\1\u0232\121\0\1\u0233\41\0\1\u0234\42\0\1\u0235\1\0"+
    "\1\u0236\3\0\1\u0237\16\0\1\u0238\51\0\1\u0234\61\0"+
    "\1\u0239\3\0\1\u0236\1\0\1\u023a\1\u0237\71\0\1\u023b"+
    "\76\0\1\u023c\107\0\1\u023d\51\0\1\u023e\15\0\1\u023f"+
    "\71\0\1\u0240\50\0\1\u0241\16\0\1\u0242\35\0\1\u0243"+
    "\75\0\1\u0244\60\0\1\u0245\67\0\1\u0246\72\0\1\u0247"+
    "\20\0\1\u0248\42\0\1\u0249\64\0\1\u024a\123\0\1\u024b"+
    "\12\0\1\u024c\27\0\1\u024d\55\0\1\u024e\104\0\1\u024f"+
    "\20\0\1\u0248\55\0\1\u0249\104\0\1\u0250\11\0\1\u0251"+
    "\31\0\1\u0252\107\0\1\u0253\37\0\1\u0254\67\0\1\u0255"+
    "\61\0\1\u0256\146\0\1\u0257\67\0\1\u0258\57\0\1\u0259"+
    "\61\0\1\u025a\106\0\1\u025b\52\0\1\u025c\27\0\1\u025d"+
    "\121\0\1\u025e\73\0\1\u025f\71\0\1\u0260\37\0\1\u0261"+
    "\63\0\1\u0190\121\0\1\u0262\71\0\1\u0263\42\0\1\u0261"+
    "\76\0\1\u0190\112\0\1\u0259\42\0\1\u0264\70\0\1\u0264"+
    "\70\0\1\u0265\60\0\1\u0266\76\0\1\u0267\112\0\1\u0268"+
    "\53\0\1\u0269\46\0\1\u026a\104\0\1\u026b\116\0\1\u026c"+
    "\26\0\1\u026d\110\0\1\u0269\63\0\1\u026e\113\0\1\u026f"+
    "\51\0\1\u0270\63\0\1\u0220\56\0\1\u0271\76\0\1\u0272"+
    "\71\0\1\u0273\70\0\1\u0274\37\0\1\u0275\61\0\1\u0276"+
    "\75\0\1\u0277\114\0\1\u0227\77\0\1\u0278\37\0\1\u0279"+
    "\64\0\1\u027a\100\0\1\u027b\54\0\1\u027a\77\0\1\u027c"+
    "\70\0\1\u027b\67\0\1\u027d\53\0\1\u027e\125\0\1\u027f"+
    "\62\0\1\u0280\42\0\1\u0281\75\0\1\u01e6\75\0\1\u0282"+
    "\101\0\1\u027e\35\0\1\u0283\127\0\1\u0284\63\0\1\u0285"+
    "\55\0\1\u0286\56\0\1\u01e6\77\0\1\u0287\66\0\1\u0288"+
    "\70\0\1\u0289\56\0\1\u028a\55\0\1\u028b\3\0\1\u028c"+
    "\1\0\1\u028d\1\u028e\72\0\1\u028f\55\0\1\u0290\104\0"+
    "\1\u028a\51\0\1\u0291\1\0\1\u028c\3\0\1\u028e\16\0"+
    "\1\u0292\42\0\1\u0293\105\0\1\u0294\60\0\1\u0295\140\0"+
    "\1\u015f\10\0\1\u0296\100\0\1\u0297\66\0\1\u0298\56\0"+
    "\1\u0299\114\0\1\u029a\51\0\1\u029b\133\0\1\u029c\26\0"+
    "\1\u029d\2\0\1\u029e\64\0\1\u029f\116\0\1\u02a0\31\0"+
    "\1\u02a1\114\0\1\u02a2\46\0\1\u02a3\67\0\1\u029a\65\0"+
    "\1\u02a4\71\0\1\u02a5\105\0\1\u02a6\100\0\1\u02a7\33\0"+
    "\1\u02a8\110\0\1\u02a9\45\0\1\u02aa\3\0\1\u02ab\1\0"+
    "\1\u02ac\1\u02ad\120\0\1\u02ae\36\0\1\u02af\64\0\1\u02a8"+
    "\66\0\1\u02b0\110\0\1\u02b1\67\0\1\u02b2\51\0\1\u02b3"+
    "\67\0\1\u02b4\137\0\1\u02b5\51\0\1\u02b6\62\0\1\u02b7"+
    "\54\0\1\u02b8\61\0\1\u02b9\113\0\1\u02b7\47\0\1\u02ba"+
    "\66\0\1\u02bb\130\0\1\u02bc\53\0\1\u02bd\33\0\1\u02be"+
    "\63\0\1\u02bf\65\0\1\u02c0\3\0\1\u02c1\1\0\1\u02c2"+
    "\121\0\1\u02c3\35\0\1\u02c4\73\0\1\u02c5\55\0\1\u02c6"+
    "\111\0\1\u02c7\44\0\1\u02c8\1\0\1\u02c1\22\0\1\u02c9"+
    "\67\0\1\u02c4\60\0\1\u02ca\51\0\1\u02cb\132\0\1\u02cc"+
    "\61\0\1\u02cd\57\0\1\u02be\66\0\1\u02ce\117\0\1\u02cf"+
    "\66\0\1\u02d0\50\0\1\u02d1\114\0\1\u01c8\45\0\1\u02d1"+
    "\34\0\1\u02d2\121\0\1\u02d3\44\0\1\u02d4\72\0\1\u02d5"+
    "\64\0\1\u02d6\72\0\1\u02d6\75\0\1\u02a9\43\0\1\u02d7"+
    "\1\0\1\u02ab\3\0\1\u02ad\16\0\1\u02d8\105\0\1\u02d9"+
    "\32\0\1\u02af\62\0\1\u02da\75\0\1\u02db\73\0\1\u02dc"+
    "\54\0\1\u02dd\114\0\1\u02db\60\0\1\u02de\120\0\1\u02df"+
    "\31\0\1\u029d\2\0\1\u02e0\64\0\1\u02e1\132\0\1\u029c"+
    "\56\0\1\u02e2\61\0\1\u02e3\65\0\1\u02e4\61\0\1\u02a3"+
    "\112\0\1\u02df\20\0\1\u02e5\3\0\1\u02e6\1\0\1\u02e7"+
    "\72\0\1\u02e8\55\0\1\u02e9\1\0\1\u02ea\22\0\1\u02eb"+
    "\53\0\1\u02e8\112\0\1\u02ec\42\0\1\u02ed\67\0\1\u02ee"+
    "\67\0\1\u02ef\140\0\1\u027e\46\0\1\u02ec\55\0\1\u02ed"+
    "\67\0\1\u02f0\67\0\1\u02ef\45\0\1\u02f1\121\0\1\u02f2"+
    "\41\0\1\u02f3\67\0\1\u02f4\65\0\1\u02f5\1\0\1\u02f6"+
    "\1\u02f7\66\0\1\u02f8\105\0\1\u02f9\67\0\1\u02fa\67\0"+
    "\1\u02fb\44\0\1\u02f5\3\0\1\u02f7\16\0\1\u02fc\115\0"+
    "\1\u02fd\23\0\1\u02fe\67\0\1\u02ff\105\0\1\u02ff\67\0"+
    "\1\u0300\122\0\1\u0301\10\0\1\u0302\75\0\1\u0303\114\0"+
    "\1\u0304\37\0\1\u0305\113\0\1\u0306\117\0\1\u0307\32\0"+
    "\1\u0308\70\0\1\u0308\76\0\1\u0309\43\0\1\u030a\67\0"+
    "\1\u030b\73\0\1\u030c\104\0\1\u030d\55\0\1\u030e\114\0"+
    "\1\u030f\37\0\1\u0310\115\0\1\u0311\41\0\1\u0312\61\0"+
    "\1\u0313\112\0\1\u0314\40\0\1\u0315\3\0\1\u0316\1\0"+
    "\1\u0317\1\u0318\112\0\1\u0314\34\0\1\u0319\1\0\1\u0316"+
    "\3\0\1\u0318\16\0\1\u031a\60\0\1\u031b\53\0\1\u0313"+
    "\71\0\1\u031c\72\0\1\u031d\67\0\1\u031e\114\0\1\u031f"+
    "\43\0\1\u0320\66\0\1\u0321\73\0\1\u0322\101\0\1\u0323"+
    "\67\0\1\u0324\50\0\1\u0320\106\0\1\u0325\101\0\1\u0326"+
    "\66\0\1\u0327\47\0\1\u0322\75\0\1\u0328\66\0\1\u0329"+
    "\113\0\1\u032a\70\0\1\u032b\23\0\1\u032c\121\0\1\u032d"+
    "\56\0\1\u032e\67\0\1\u032f\60\0\1\u0330\100\0\1\u0331"+
    "\50\0\1\u0332\111\0\1\u0333\43\0\1\u0334\61\0\1\u0335"+
    "\114\0\1\u0303\101\0\1\u0336\66\0\1\u0337\64\0\1\u0338"+
    "\43\0\1\u0339\63\0\1\u033a\6\0\1\u033b\1\u033c\37\0"+
    "\1\u033d\23\0\1\u033e\105\0\1\u033f\53\0\1\u0340\4\0"+
    "\1\u0341\16\0\1\u0342\16\0\1\u0343\40\0\1\u0344\103\0"+
    "\1\u0345\71\0\1\u0345\30\0\1\u0346\121\0\1\u0347\44\0"+
    "\1\u0348\115\0\1\u0349\35\0\1\u034a\73\0\1\u034b\72\0"+
    "\1\u034c\114\0\1\u034d\42\0\1\u034e\76\0\1\u034f\46\0"+
    "\1\u0350\124\0\1\u0351\71\0\1\u0352\105\0\1\u029a\20\0"+
    "\1\u0353\100\0\1\u0354\56\0\1\u0355\56\0\1\u0356\147\0"+
    "\1\u02a8\41\0\1\u0357\47\0\1\u0358\115\0\1\u0359\36\0"+
    "\1\u035a\107\0\1\u035b\45\0\1\u035c\77\0\1\u035d\61\0"+
    "\1\u035c\72\0\1\u035e\57\0\1\u035f\73\0\1\u0360\67\0"+
    "\1\u0361\105\0\1\u0362\67\0\1\u0363\77\0\1\u035f\44\0"+
    "\1\u0364\70\0\1\u0365\115\0\1\u0366\51\0\1\u0367\57\0"+
    "\1\u0368\72\0\1\u0369\114\0\1\u036a\42\0\1\u036b\75\0"+
    "\1\u036c\54\0\1\u036d\113\0\1\u036e\35\0\1\u036f\74\0"+
    "\1\u0370\65\0\1\u0371\104\0\1\u0372\70\0\1\u0373\61\0"+
    "\1\u0374\114\0\1\u0375\32\0\1\u035a\102\0\1\u0376\67\0"+
    "\1\u0377\65\0\1\u0378\67\0\1\u0379\61\0\1\u037a\102\0"+
    "\1\u037b\54\0\1\u037c\56\0\1\u037d\102\0\1\u037e\115\0"+
    "\1\u037f\35\0\1\u0380\70\0\1\u0381\4\0\1\u0382\53\0"+
    "\1\u0383\1\0\1\u0384\125\0\1\u0385\44\0\1\u0386\76\0"+
    "\1\u0387\50\0\1\u0388\5\0\1\u0389\116\0\1\u038a\24\0"+
    "\1\u038b\34\0\1\u038c\75\0\1\u038d\36\0\1\u038e\66\0"+
    "\1\u038e\66\0\1\u038f\72\0\1\u0390\115\0\1\u0391\36\0"+
    "\1\u0392\65\0\1\u038f\77\0\1\u0393\57\0\1\u0392\124\0"+
    "\1\u0394\54\0\1\u0395\52\0\1\u0396\72\0\1\u0396\60\0"+
    "\1\u0397\67\0\1\u0398\101\0\1\u0399\51\0\1\u039a\66\0"+
    "\1\u039b\75\0\1\u039c\72\0\1\u039d\61\0\1\u039b\70\0"+
    "\1\u039e\71\0\1\u039e\72\0\1\u039f\115\0\1\u03a0\44\0"+
    "\1\u03a1\114\0\1\u03a2\45\0\1\u03a3\56\0\1\u03a4\72\0"+
    "\1\u03a5\63\0\1\u03a6\70\0\1\u03a7\65\0\1\u03a4\77\0"+
    "\1\u03a8\57\0\1\u03a7\106\0\1\u03a9\61\0\1\u03aa\116\0"+
    "\1\u03ab\41\0\1\u03ab\62\0\1\u03ac\72\0\1\u03ac\54\0"+
    "\1\u03ad\121\0\1\u03ae\40\0\1\u039c\77\0\1\u03af\101\0"+
    "\1\u03b0\100\0\1\u03b1\61\0\1\u03b0\77\0\1\u03b1\51\0"+
    "\1\u0397\67\0\1\u03b2\61\0\1\u03b3\105\0\1\u03b4\42\0"+
    "\1\u03b5\66\0\1\u03b6\107\0\1\u03b7\41\0\1\u03b8\71\0"+
    "\1\u03b9\107\0\1\u03ba\50\0\1\u03bb\76\0\1\u03bc\62\0"+
    "\1\u03b5\113\0\1\u03bd\35\0\1\u03be\124\0\1\u03b9\57\0"+
    "\1\u03b6\66\0\1\u03bf\101\0\1\u03c0\47\0\1\u03c1\61\0"+
    "\1\u03c2\72\0\1\u03c3\62\0\1\u03c2\77\0\1\u03c4\101\0"+
    "\1\u03c5\73\0\1\u03c6\74\0\1\u03c7\67\0\1\u03c8\36\0"+
    "\1\u03c9\67\0\1\u03ca\72\0\1\u03cb\62\0\1\u03ca\77\0"+
    "\1\u03cc\112\0\1\u03cd\36\0\1\u03ce\113\0\1\u03cf\41\0"+
    "\1\u03ce\120\0\1\u03cf\73\0\1\u03d0\30\0\1\u03d1\121\0"+
    "\1\u03d2\37\0\1\u03c9\120\0\1\u03d3\73\0\1\u03d4\67\0"+
    "\1\u03d5\27\0\1\u03d6\107\0\1\u03d7\56\0\1\u03d8\100\0"+
    "\1\u03d9\54\0\1\u03da\114\0\1\u03db\56\0\1\u03dc\54\0"+
    "\1\u03dd\102\0\1\u03de\51\0\1\u03da\71\0\1\u03df\65\0"+
    "\1\u03df\66\0\1\u03e0\75\0\1\u03e1\110\0\1\u03e2\46\0"+
    "\1\u03e3\64\0\1\u03e4\65\0\1\u03e4\115\0\1\u03e5\72\0"+
    "\1\u03e5\42\0\1\u03e6\66\0\1\u03e6\74\0\1\u03e7\110\0"+
    "\1\u03e8\46\0\1\u03e9\112\0\1\u03ea\62\0\1\u03eb\46\0"+
    "\1\u03ec\67\0\1\u03ed\117\0\1\u03ee\63\0\1\u03eb\46\0"+
    "\1\u03ec\67\0\1\u03ef\131\0\1\u039b\17\0\1\u03f0\72\0"+
    "\1\u03f1\64\0\1\u03f2\65\0\1\u03f0\77\0\1\u03f3\57\0"+
    "\1\u03f2\115\0\1\u03f4\43\0\1\u03f5\116\0\1\u03f4\36\0"+
    "\1\u03f5\71\0\1\u03f6\65\0\1\u03f6\57\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[49000];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\1\47\0\2\11\5\0\1\11\13\0\1\1"+
    "\1\0\1\1\1\0\1\11\4\0\1\11\1\0\1\1"+
    "\6\0\1\11\5\0\1\1\5\0\1\1\1\0\2\1"+
    "\5\0\1\11\4\0\1\1\3\0\1\11\2\0\1\1"+
    "\43\0\1\1\2\0\1\1\20\0\1\11\37\0\1\11"+
    "\5\0\4\11\5\0\1\1\2\0\1\11\2\0\1\11"+
    "\3\0\2\11\13\0\1\1\1\0\1\1\3\0\2\11"+
    "\2\0\1\11\7\0\1\1\3\0\1\1\2\0\1\11"+
    "\4\0\2\1\10\0\1\11\4\0\1\11\3\0\2\11"+
    "\11\0\1\11\32\0\1\1\11\0\1\11\5\0\1\11"+
    "\1\0\1\11\5\0\1\11\26\0\1\11\25\0\1\11"+
    "\3\0\2\11\12\0\1\11\10\0\1\11\2\0\1\11"+
    "\11\0\2\11\15\0\1\11\6\0\1\11\15\0\3\11"+
    "\4\0\1\11\3\0\1\1\3\0\1\1\1\11\1\0"+
    "\1\11\12\0\1\1\2\0\1\11\1\0\1\1\3\0"+
    "\1\11\14\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\1\1\0\1\11\3\0\1\1\1\11\11\0\1\1"+
    "\5\0\1\11\7\0\1\1\4\0\1\11\1\0\2\11"+
    "\7\0\1\1\2\0\1\1\3\0\1\1\1\0\2\11"+
    "\12\0\1\1\4\0\1\11\7\0\1\11\2\0\1\11"+
    "\1\0\1\1\2\0\1\11\7\0\1\1\10\0\1\11"+
    "\3\0\1\11\13\0\1\11\1\0\1\11\1\0\1\11"+
    "\13\0\1\11\1\0\2\11\5\0\1\11\4\0\2\11"+
    "\1\0\1\11\1\0\1\11\1\1\1\11\7\0\1\11"+
    "\6\0\1\11\2\0\1\11\2\0\1\11\14\0\1\11"+
    "\4\0\1\11\2\0\1\1\1\0\1\11\3\0\1\11"+
    "\6\0\1\1\1\0\1\11\1\0\1\1\1\0\2\11"+
    "\1\0\1\11\5\0\1\11\1\0\1\11\7\0\1\11"+
    "\3\0\1\11\4\0\1\11\6\0\1\1\1\0\1\1"+
    "\1\0\2\11\1\0\1\11\1\0\1\11\7\0\1\11"+
    "\1\0\1\11\42\0\1\11\3\0\1\1\3\0\1\1"+
    "\13\0\1\1\1\11\1\0\1\11\2\0\1\11\6\0"+
    "\1\1\3\0\1\1\12\0\1\1\17\0\1\1\7\0"+
    "\1\1\2\11\1\0\1\1\1\11\1\0\1\1\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\1\1\1\0"+
    "\1\1\1\0\1\11\2\0\1\11\3\0\2\11\3\0"+
    "\2\11\3\0\2\11\2\0\1\11\10\0\1\11\3\0"+
    "\1\1\1\0\1\1\2\11\3\0\2\11\3\0\1\1"+
    "\1\0\1\1\4\0\1\11\4\0\1\11\2\0\1\1"+
    "\1\0\3\11\1\0\1\1\2\0\2\11\3\0\1\11"+
    "\1\0\1\11\1\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1014];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn,value);
        }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
        }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 148) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 37: 
          { return new Symbol(sym.y, yychar, yyline, yytext());
          }
        case 165: break;
        case 69: 
          { return new Symbol(sym.otro, yychar, yyline, yytext());
          }
        case 166: break;
        case 83: 
          { return new Symbol(sym.noveno, yychar, yyline, yytext());
          }
        case 167: break;
        case 115: 
          { return new Symbol(sym.dieciseis, yychar, yyline, yytext());
          }
        case 168: break;
        case 154: 
          { return new Symbol(sym.decimonoveno, yychar, yyline, yytext());
          }
        case 169: break;
        case 79: 
          { return new Symbol(sym.entre, yychar, yyline, yytext());
          }
        case 170: break;
        case 92: 
          { return new Symbol(sym.rudon, yychar, yyline, yytext());
          }
        case 171: break;
        case 36: 
          { return new Symbol(sym.ninguna, yychar, yyline, yytext());
          }
        case 172: break;
        case 80: 
          { return new Symbol(sym.acercade, yychar, yyline, yytext());
          }
        case 173: break;
        case 8: 
          { return new Symbol(sym.oh, yychar, yyline, yytext());
          }
        case 174: break;
        case 63: 
          { return new Symbol(sym.diosmio, yychar, yyline, yytext());
          }
        case 175: break;
        case 19: 
          { return new Symbol(sym.beque, yychar, yyline, yytext());
          }
        case 176: break;
        case 159: 
          { return new Symbol(sym.aventurero, yychar, yyline, yytext());
          }
        case 177: break;
        case 15: 
          { return new Symbol(sym.como, yychar, yyline, yytext());
          }
        case 178: break;
        case 128: 
          { return new Symbol(sym.diecinueve, yychar, yyline, yytext());
          }
        case 179: break;
        case 86: 
          { return new Symbol(sym.cincuenta, yychar, yyline, yytext());
          }
        case 180: break;
        case 44: 
          { return new Symbol(sym.terminado, yychar, yyline, yytext());
          }
        case 181: break;
        case 12: 
          { return new Symbol(sym.asique, yychar, yyline, yytext());
          }
        case 182: break;
        case 38: 
          { return new Symbol(sym.meh, yychar, yyline, yytext());
          }
        case 183: break;
        case 21: 
          { return new Symbol(sym.Hurra, yychar, yyline, yytext());
          }
        case 184: break;
        case 123: 
          { return new Symbol(sym.quince, yychar, yyline, yytext());
          }
        case 185: break;
        case 27: 
          { return new Symbol(sym.seis, yychar, yyline, yytext());
          }
        case 186: break;
        case 163: 
          { return new Symbol(sym.noventaycuatro, yychar, yyline, yytext());
          }
        case 187: break;
        case 50: 
          { return new Symbol(sym.entonces, yychar, yyline, yytext());
          }
        case 188: break;
        case 11: 
          { return new Symbol(sym.jerga, yychar, yyline, yytext());
          }
        case 189: break;
        case 81: 
          { return new Symbol(sym.despues, yychar, yyline, yytext());
          }
        case 190: break;
        case 41: 
          { return new Symbol(sym.pero, yychar, yyline, yytext());
          }
        case 191: break;
        case 46: 
          { return new Symbol(sym.cada, yychar, yyline, yytext());
          }
        case 192: break;
        case 78: 
          { return new Symbol(sym.Tres, yychar, yyline, yytext());
          }
        case 193: break;
        case 143: 
          { return new Symbol(sym.menosque, yychar, yyline, yytext());
          }
        case 194: break;
        case 10: 
          { return new Symbol(sym.el, yychar, yyline, yytext());
          }
        case 195: break;
        case 90: 
          { return new Symbol(sym.otros, yychar, yyline, yytext());
          }
        case 196: break;
        case 96: 
          { return new Symbol(sym.once, yychar, yyline, yytext());
          }
        case 197: break;
        case 97: 
          { return new Symbol(sym.suficiente, yychar, yyline, yytext());
          }
        case 198: break;
        case 77: 
          { return new Symbol(sym.tercera, yychar, yyline, yytext());
          }
        case 199: break;
        case 161: 
          { return new Symbol(sym.onemillonesimo, yychar, yyline, yytext());
          }
        case 200: break;
        case 113: 
          { return new Symbol(sym.sino, yychar, yyline, yytext());
          }
        case 201: break;
        case 84: 
          { return new Symbol(sym.bingo, yychar, yyline, yytext());
          }
        case 202: break;
        case 85: 
          { return new Symbol(sym.primero, yychar, yyline, yytext());
          }
        case 203: break;
        case 32: 
          { return new Symbol(sym.dos, yychar, yyline, yytext());
          }
        case 204: break;
        case 117: 
          { return new Symbol(sym.varios, yychar, yyline, yytext());
          }
        case 205: break;
        case 130: 
          { return new Symbol(sym.quincuagesimo, yychar, yyline, yytext());
          }
        case 206: break;
        case 114: 
          { return new Symbol(sym.sinembargo, yychar, yyline, yytext());
          }
        case 207: break;
        case 149: 
          { return new Symbol(sym.unmillon, yychar, yyline, yytext());
          }
        case 208: break;
        case 4: 
          { return new Symbol(sym.ello, yychar, yyline, yytext());
          }
        case 209: break;
        case 52: 
          { return new Symbol(sym.argh, yychar, yyline, yytext());
          }
        case 210: break;
        case 93: 
          { return new Symbol(sym.cualquiera, yychar, yyline, yytext());
          }
        case 211: break;
        case 129: 
          { return new Symbol(sym.generoso, yychar, yyline, yytext());
          }
        case 212: break;
        case 39: 
          { return new Symbol(sym.na, yychar, yyline, yytext());
          }
        case 213: break;
        case 7: 
          { return new Symbol(sym.sobre, yychar, yyline, yytext());
          }
        case 214: break;
        case 6: 
          { return new Symbol(sym.o, yychar, yyline, yytext());
          }
        case 215: break;
        case 31: 
          { return new Symbol(sym.diez, yychar, yyline, yytext());
          }
        case 216: break;
        case 25: 
          { return new Symbol(sym.oye, yychar, yyline, yytext());
          }
        case 217: break;
        case 62: 
          { return new Symbol(sym.ambascosas, yychar, yyline, yytext());
          }
        case 218: break;
        case 64: 
          { return new Symbol(sym.cero, yychar, yyline, yytext());
          }
        case 219: break;
        case 70: 
          { return new Symbol(sym.hasta, yychar, yyline, yytext());
          }
        case 220: break;
        case 133: 
          { return new Symbol(sym.impaciente, yychar, yyline, yytext());
          }
        case 221: break;
        case 109: 
          { return new Symbol(sym.alladode, yychar, yyline, yytext());
          }
        case 222: break;
        case 112: 
          { return new Symbol(sym.encaso, yychar, yyline, yytext());
          }
        case 223: break;
        case 144: 
          { return new Symbol(sym.nonagesimo, yychar, yyline, yytext());
          }
        case 224: break;
        case 55: 
          { return new Symbol(sym.muchos, yychar, yyline, yytext());
          }
        case 225: break;
        case 138: 
          { return new Symbol(sym.trigesimo, yychar, yyline, yytext());
          }
        case 226: break;
        case 155: 
          { return new Symbol(sym.decimocuarto, yychar, yyline, yytext());
          }
        case 227: break;
        case 59: 
          { return new Symbol(sym.maldito, yychar, yyline, yytext());
          }
        case 228: break;
        case 140: 
          { return new Symbol(sym.lejosde, yychar, yyline, yytext());
          }
        case 229: break;
        case 118: 
          { return new Symbol(sym.setenta, yychar, yyline, yytext());
          }
        case 230: break;
        case 145: 
          { return new Symbol(sym.noventayuno, yychar, yyline, yytext());
          }
        case 231: break;
        case 152: 
          { return new Symbol(sym.decimotercero, yychar, yyline, yytext());
          }
        case 232: break;
        case 17: 
          { return new Symbol(sym.por, yychar, yyline, yytext());
          }
        case 233: break;
        case 82: 
          { return new Symbol(sym.orgulloso, yychar, yyline, yytext());
          }
        case 234: break;
        case 151: 
          { return new Symbol(sym.septuagesimo, yychar, yyline, yytext());
          }
        case 235: break;
        case 106: 
          { return new Symbol(sym.noventa, yychar, yyline, yytext());
          }
        case 236: break;
        case 87: 
          { return new Symbol(sym.quinto, yychar, yyline, yytext());
          }
        case 237: break;
        case 120: 
          { return new Symbol(sym.duodecimo, yychar, yyline, yytext());
          }
        case 238: break;
        case 47: 
          { return new Symbol(sym.algunos, yychar, yyline, yytext());
          }
        case 239: break;
        case 147: 
          { return new Symbol(sym.decimoquinto, yychar, yyline, yytext());
          }
        case 240: break;
        case 9: 
          { return new Symbol(sym.hola, yychar, yyline, yytext());
          }
        case 241: break;
        case 58: 
          { return new Symbol(sym.abajo, yychar, yyline, yytext());
          }
        case 242: break;
        case 20: 
          { return new Symbol(sym.aun, yychar, yyline, yytext());
          }
        case 243: break;
        case 98: 
          { return new Symbol(sym.segundo, yychar, yyline, yytext());
          }
        case 244: break;
        case 137: 
          { return new Symbol(sym.diecisiete, yychar, yyline, yytext());
          }
        case 245: break;
        case 94: 
          { return new Symbol(sym.ochenta, yychar, yyline, yytext());
          }
        case 246: break;
        case 99: 
          { return new Symbol(sym.hacia, yychar, yyline, yytext());
          }
        case 247: break;
        case 121: 
          { return new Symbol(sym.camiseta, yychar, yyline, yytext());
          }
        case 248: break;
        case 157: 
          { return new Symbol(sym.decimoseptimo, yychar, yyline, yytext());
          }
        case 249: break;
        case 75: 
          { return new Symbol(sym.Siete, yychar, yyline, yytext());
          }
        case 250: break;
        case 104: 
          { return new Symbol(sym.pequeo, yychar, yyline, yytext());
          }
        case 251: break;
        case 18: 
          { return new Symbol(sym.tu, yychar, yyline, yytext());
          }
        case 252: break;
        case 139: 
          { return new Symbol(sym.vigesimo, yychar, yyline, yytext());
          }
        case 253: break;
        case 136: 
          { return new Symbol(sym.decimosexto, yychar, yyline, yytext());
          }
        case 254: break;
        case 150: 
          { return new Symbol(sym.decimoctavo, yychar, yyline, yytext());
          }
        case 255: break;
        case 103: 
          { return new Symbol(sym.ausente, yychar, yyline, yytext());
          }
        case 256: break;
        case 125: 
          { return new Symbol(sym.undecimo, yychar, yyline, yytext());
          }
        case 257: break;
        case 76: 
          { return new Symbol(sym.decimo, yychar, yyline, yytext());
          }
        case 258: break;
        case 110: 
          { return new Symbol(sym.antesde, yychar, yyline, yytext());
          }
        case 259: break;
        case 111: 
          { return new Symbol(sym.Cuarenta, yychar, yyline, yytext());
          }
        case 260: break;
        case 13: 
          { return new Symbol(sym.para, yychar, yyline, yytext());
          }
        case 261: break;
        case 29: 
          { return new Symbol(sym.shh, yychar, yyline, yytext());
          }
        case 262: break;
        case 101: 
          { return new Symbol(sym.doce, yychar, yyline, yytext());
          }
        case 263: break;
        case 49: 
          { return new Symbol(sym.ellos, yychar, yyline, yytext());
          }
        case 264: break;
        case 2: 
          { return new Symbol(sym.yo, yychar, yyline, yytext());
          }
        case 265: break;
        case 57: 
          { return new Symbol(sym.menos, yychar, yyline, yytext());
          }
        case 266: break;
        case 33: 
          { return new Symbol(sym.guau, yychar, yyline, yytext());
          }
        case 267: break;
        case 102: 
          { return new Symbol(sym.alrededor, yychar, yyline, yytext());
          }
        case 268: break;
        case 56: 
          { return new Symbol(sym.pasado, yychar, yyline, yytext());
          }
        case 269: break;
        case 42: 
          { return new Symbol(sym.ba, yychar, yyline, yytext());
          }
        case 270: break;
        case 164: 
          { return new Symbol(sym.unamilesima, yychar, yyline, yytext());
          }
        case 271: break;
        case 162: 
          { return new Symbol(sym.nonagesimosegundo, yychar, yyline, yytext());
          }
        case 272: break;
        case 68: 
          { return new Symbol(sym.cielos, yychar, yyline, yytext());
          }
        case 273: break;
        case 108: 
          { return new Symbol(sym.detras, yychar, yyline, yytext());
          }
        case 274: break;
        case 88: 
          { return new Symbol(sym.yippee, yychar, yyline, yytext());
          }
        case 275: break;
        case 126: 
          { return new Symbol(sym.sexagesimo, yychar, yyline, yytext());
          }
        case 276: break;
        case 148: 
          { return new Symbol(sym.cien, yychar, yyline, yytext());
          }
        case 277: break;
        case 135: 
          { return new Symbol(sym.ojala, yychar, yyline, yytext());
          }
        case 278: break;
        case 65: 
          { return new Symbol(sym.cinco, yychar, yyline, yytext());
          }
        case 279: break;
        case 60: 
          { return new Symbol(sym.nueve, yychar, yyline, yytext());
          }
        case 280: break;
        case 158: 
          { return new Symbol(sym.diezmil, yychar, yyline, yytext());
          }
        case 281: break;
        case 127: 
          { return new Symbol(sym.trece, yychar, yyline, yytext());
          }
        case 282: break;
        case 30: 
          { return new Symbol(sym.ella, yychar, yyline, yytext());
          }
        case 283: break;
        case 89: 
          { return new Symbol(sym.fuerade, yychar, yyline, yytext());
          }
        case 284: break;
        case 74: 
          { return new Symbol(sym.sexto, yychar, yyline, yytext());
          }
        case 285: break;
        case 1: 
          { /*Ignore*/
          }
        case 286: break;
        case 54: 
          { return new Symbol(sym.mucho, yychar, yyline, yytext());
          }
        case 287: break;
        case 23: 
          { return new Symbol(sym.apagado, yychar, yyline, yytext());
          }
        case 288: break;
        case 22: 
          { return new Symbol(sym.uno, yychar, yyline, yytext());
          }
        case 289: break;
        case 14: 
          { return new Symbol(sym.nosotros, yychar, yyline, yytext());
          }
        case 290: break;
        case 153: 
          { return new Symbol(sym.doscientos, yychar, yyline, yytext());
          }
        case 291: break;
        case 119: 
          { return new Symbol(sym.septimo, yychar, yyline, yytext());
          }
        case 292: break;
        case 28: 
          { return new Symbol(sym.timido, yychar, yyline, yytext());
          }
        case 293: break;
        case 35: 
          { return new Symbol(sym.todos, yychar, yyline, yytext());
          }
        case 294: break;
        case 26: 
          { return new Symbol(sym.mmm, yychar, yyline, yytext());
          }
        case 295: break;
        case 100: 
          { return new Symbol(sym.treinta, yychar, yyline, yytext());
          }
        case 296: break;
        case 132: 
          { return new Symbol(sym.cuadragesimo, yychar, yyline, yytext());
          }
        case 297: break;
        case 105: 
          { return new Symbol(sym.durante, yychar, yyline, yytext());
          }
        case 298: break;
        case 24: 
          { return new Symbol(sym.puaj, yychar, yyline, yytext());
          }
        case 299: break;
        case 91: 
          { return new Symbol(sym.elde, yychar, yyline, yytext());
          }
        case 300: break;
        case 72: 
          { return new Symbol(sym.yaque, yychar, yyline, yytext());
          }
        case 301: break;
        case 131: 
          { return new Symbol(sym.catorce, yychar, yyline, yytext());
          }
        case 302: break;
        case 124: 
          { return new Symbol(sym.Dieciocho, yychar, yyline, yytext());
          }
        case 303: break;
        case 67: 
          { return new Symbol(sym.desde, yychar, yyline, yytext());
          }
        case 304: break;
        case 34: 
          { return new Symbol(sym.eres, yychar, yyline, yytext());
          }
        case 305: break;
        case 71: 
          { return new Symbol(sym.ocho, yychar, yyline, yytext());
          }
        case 306: break;
        case 43: 
          { return new Symbol(sym.pocos, yychar, yyline, yytext());
          }
        case 307: break;
        case 95: 
          { return new Symbol(sym.octavo, yychar, yyline, yytext());
          }
        case 308: break;
        case 61: 
          { return new Symbol(sym.no, yychar, yyline, yytext());
          }
        case 309: break;
        case 116: 
          { return new Symbol(sym.tantos, yychar, yyline, yytext());
          }
        case 310: break;
        case 141: 
          { return new Symbol(sym.aunque, yychar, yyline, yytext());
          }
        case 311: break;
        case 146: 
          { return new Symbol(sym.noventaydos, yychar, yyline, yytext());
          }
        case 312: break;
        case 53: 
          { return new Symbol(sym.mas, yychar, yyline, yytext());
          }
        case 313: break;
        case 160: 
          { return new Symbol(sym.nonagesimotercero, yychar, yyline, yytext());
          }
        case 314: break;
        case 142: 
          { return new Symbol(sym.practico, yychar, yyline, yytext());
          }
        case 315: break;
        case 40: 
          { return new Symbol(sym.abucheo, yychar, yyline, yytext());
          }
        case 316: break;
        case 16: 
          { return new Symbol(sym.soy, yychar, yyline, yytext());
          }
        case 317: break;
        case 122: 
          { return new Symbol(sym.ente, yychar, yyline, yytext());
          }
        case 318: break;
        case 156: 
          { return new Symbol(sym.mil, yychar, yyline, yytext());
          }
        case 319: break;
        case 45: 
          { return new Symbol(sym.solamente, yychar, yyline, yytext());
          }
        case 320: break;
        case 48: 
          { return new Symbol(sym.tal, yychar, yyline, yytext());
          }
        case 321: break;
        case 66: 
          { return new Symbol(sym.cuatro, yychar, yyline, yytext());
          }
        case 322: break;
        case 134: 
          { return new Symbol(sym.delocontrario, yychar, yyline, yytext());
          }
        case 323: break;
        case 5: 
          { return new Symbol(sym.si, yychar, yyline, yytext());
          }
        case 324: break;
        case 73: 
          { return new Symbol(sym.sesenta, yychar, yyline, yytext());
          }
        case 325: break;
        case 3: 
          { return new Symbol(sym.es, yychar, yyline, yytext());
          }
        case 326: break;
        case 51: 
          { return new Symbol(sym.ejem, yychar, yyline, yytext());
          }
        case 327: break;
        case 107: 
          { return new Symbol(sym.nocomo, yychar, yyline, yytext());
          }
        case 328: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
