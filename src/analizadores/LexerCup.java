/* The following code was generated by JFlex 1.4.3 on 17/05/23 10:12 PM */

package analizadores;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17/05/23 10:12 PM from the specification file
 * <tt>C:/Users/audyc/Documents/NetBeansProjects/ProyectoTraductor/src/analizadores/LexerCup.flex</tt>
 */
class LexerCup {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\0\2\0\1\0\22\0\1\60\1\61\5\0\1\23\4\0"+
    "\1\0\1\63\2\0\12\0\7\0\1\20\1\46\1\33\1\40\1\26"+
    "\1\55\1\51\1\7\1\1\1\65\1\0\1\34\1\47\1\44\1\36"+
    "\1\32\1\0\1\25\1\12\1\17\1\37\1\43\1\15\1\57\1\3"+
    "\1\53\4\0\1\0\1\0\1\22\1\45\1\30\1\35\1\10\1\54"+
    "\1\50\1\11\1\2\1\64\1\0\1\31\1\21\1\42\1\4\1\27"+
    "\1\0\1\24\1\13\1\14\1\5\1\41\1\16\1\56\1\6\1\52"+
    "\45\0\1\62\uff5f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\46\0\1\2\1\3\5\0\1\4\13\0"+
    "\1\5\3\0\1\6\5\0\1\7\3\0\1\10\4\0"+
    "\1\11\5\0\1\11\1\0\1\11\1\12\5\0\1\13"+
    "\7\0\1\14\2\0\1\15\35\0\1\5\23\0\1\16"+
    "\27\0\1\15\5\0\1\17\1\20\1\21\1\22\5\0"+
    "\1\23\2\0\1\24\1\0\1\25\3\0\1\26\6\0"+
    "\1\27\1\0\1\27\2\0\1\30\1\31\1\0\1\32"+
    "\4\0\1\33\3\0\1\34\2\0\1\35\13\0\1\36"+
    "\7\0\1\37\7\0\1\40\1\41\34\0\1\42\5\0"+
    "\1\43\1\44\45\0\1\45\1\46\1\47\17\0\1\50"+
    "\5\0\1\51\1\52\7\0\1\53\6\0\1\54\15\0"+
    "\1\55\6\0\1\56\1\0\1\57\6\0\1\60\1\0"+
    "\1\61\1\60\17\0\1\62\2\0\1\63\1\64\1\0"+
    "\1\65\1\66\1\0\1\65\1\67\11\0\1\70\5\0"+
    "\1\71\2\0\1\72\4\0\2\73\3\0\1\74\7\0"+
    "\1\75\11\0\1\76\1\71\1\0\1\77\15\0\1\100"+
    "\23\0\1\101\1\0\1\102\5\0\1\103\1\0\1\104"+
    "\11\0\1\105\5\0\1\106\4\0\1\107\5\0\1\110"+
    "\3\0\1\111\1\0\1\112\1\113\1\0\1\114\10\0"+
    "\1\115\3\0\1\116\1\0\1\117\1\0\1\120\1\0"+
    "\1\121\4\0\1\122\17\0\1\123\2\0\1\124\5\0"+
    "\1\125\2\0\1\126\13\0\1\127\1\130\1\131\1\132"+
    "\1\133\1\134\1\135\1\136\2\0\1\137\4\0\1\140"+
    "\1\141";

  private static int [] zzUnpackAction() {
    int [] result = new int[643];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a"+
    "\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da"+
    "\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654\0\u068a"+
    "\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a"+
    "\0\u0870\0\u08a6\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4"+
    "\0\u08a6\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e"+
    "\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde"+
    "\0\u08a6\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58"+
    "\0\u0e8e\0\u0ec4\0\u08a6\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2"+
    "\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182"+
    "\0\u08a6\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u08a6\0\u12c6"+
    "\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a\0\u08a6\0\u1440"+
    "\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0"+
    "\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0"+
    "\0\u17d6\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950"+
    "\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00"+
    "\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0"+
    "\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60"+
    "\0\u1e96\0\u1ecc\0\u1f02\0\u08a6\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda"+
    "\0\u2010\0\u2046\0\u207c\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a"+
    "\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298\0\u22ce\0\u2304\0\u233a"+
    "\0\u2370\0\u23a6\0\u23dc\0\u08a6\0\u2412\0\u2448\0\u247e\0\u24b4"+
    "\0\u24ea\0\u08a6\0\u08a6\0\u08a6\0\u08a6\0\u2520\0\u2556\0\u258c"+
    "\0\u25c2\0\u25f8\0\u08a6\0\u262e\0\u2664\0\u08a6\0\u269a\0\u08a6"+
    "\0\u26d0\0\u2706\0\u273c\0\u08a6\0\u2772\0\u27a8\0\u27de\0\u2814"+
    "\0\u284a\0\u2880\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u298e\0\u08a6"+
    "\0\u08a6\0\u29c4\0\u08a6\0\u29fa\0\u2a30\0\u2a66\0\u2a9c\0\u08a6"+
    "\0\u2ad2\0\u2b08\0\u2b3e\0\u08a6\0\u2b74\0\u2baa\0\u08a6\0\u2be0"+
    "\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8\0\u2cee\0\u2d24\0\u2d5a\0\u2d90"+
    "\0\u2dc6\0\u2dfc\0\u08a6\0\u2e32\0\u2e68\0\u2e9e\0\u2ed4\0\u2f0a"+
    "\0\u2f40\0\u2f76\0\u08a6\0\u2fac\0\u2fe2\0\u3018\0\u304e\0\u3084"+
    "\0\u30ba\0\u30f0\0\u08a6\0\u08a6\0\u3126\0\u315c\0\u3192\0\u31c8"+
    "\0\u31fe\0\u3234\0\u326a\0\u32a0\0\u32d6\0\u330c\0\u3342\0\u3378"+
    "\0\u33ae\0\u33e4\0\u341a\0\u3450\0\u3486\0\u34bc\0\u34f2\0\u3528"+
    "\0\u355e\0\u3594\0\u35ca\0\u3600\0\u3636\0\u366c\0\u36a2\0\u36d8"+
    "\0\u08a6\0\u370e\0\u3744\0\u377a\0\u37b0\0\u37e6\0\u08a6\0\u08a6"+
    "\0\u381c\0\u3852\0\u3888\0\u38be\0\u38f4\0\u392a\0\u3960\0\u3996"+
    "\0\u39cc\0\u3a02\0\u3a38\0\u3a6e\0\u3aa4\0\u3ada\0\u3b10\0\u3b46"+
    "\0\u3b7c\0\u3bb2\0\u3be8\0\u3c1e\0\u3c54\0\u3c8a\0\u3cc0\0\u3cf6"+
    "\0\u3d2c\0\u3d62\0\u3d98\0\u3dce\0\u3e04\0\u3e3a\0\u3e70\0\u3ea6"+
    "\0\u3edc\0\u3f12\0\u3f48\0\u3f7e\0\u3fb4\0\u08a6\0\u08a6\0\u08a6"+
    "\0\u3fea\0\u4020\0\u4056\0\u408c\0\u40c2\0\u40f8\0\u412e\0\u4164"+
    "\0\u419a\0\u41d0\0\u4206\0\u423c\0\u4272\0\u42a8\0\u42de\0\u08a6"+
    "\0\u4314\0\u434a\0\u4380\0\u43b6\0\u43ec\0\u08a6\0\u08a6\0\u4422"+
    "\0\u4458\0\u448e\0\u44c4\0\u44fa\0\u4530\0\u4566\0\u08a6\0\u459c"+
    "\0\u45d2\0\u4608\0\u463e\0\u4674\0\u46aa\0\u08a6\0\u46e0\0\u4716"+
    "\0\u474c\0\u4782\0\u47b8\0\u47ee\0\u4824\0\u485a\0\u4890\0\u48c6"+
    "\0\u48fc\0\u4932\0\u4968\0\u08a6\0\u499e\0\u49d4\0\u4a0a\0\u4a40"+
    "\0\u4a76\0\u4aac\0\u08a6\0\u4ae2\0\u08a6\0\u4b18\0\u4b4e\0\u4b84"+
    "\0\u4bba\0\u4bf0\0\u4c26\0\u4c5c\0\u4c92\0\u08a6\0\u4cc8\0\u4cfe"+
    "\0\u4d34\0\u4d6a\0\u4da0\0\u4dd6\0\u4e0c\0\u4e42\0\u4e78\0\u4eae"+
    "\0\u4ee4\0\u4f1a\0\u4f50\0\u4f86\0\u4fbc\0\u4ff2\0\u08a6\0\u5028"+
    "\0\u505e\0\u08a6\0\u08a6\0\u5094\0\u50ca\0\u08a6\0\u5100\0\u5136"+
    "\0\u08a6\0\u516c\0\u51a2\0\u51d8\0\u520e\0\u5244\0\u527a\0\u52b0"+
    "\0\u52e6\0\u531c\0\u08a6\0\u5352\0\u5388\0\u53be\0\u53f4\0\u542a"+
    "\0\u5460\0\u5496\0\u54cc\0\u08a6\0\u5502\0\u5538\0\u556e\0\u55a4"+
    "\0\u55da\0\u5610\0\u5646\0\u567c\0\u56b2\0\u08a6\0\u56e8\0\u571e"+
    "\0\u5754\0\u578a\0\u57c0\0\u57f6\0\u582c\0\u08a6\0\u5862\0\u5898"+
    "\0\u58ce\0\u5904\0\u593a\0\u5970\0\u59a6\0\u59dc\0\u5a12\0\u08a6"+
    "\0\u5a48\0\u5a7e\0\u08a6\0\u5ab4\0\u5aea\0\u5b20\0\u5b56\0\u5b8c"+
    "\0\u5bc2\0\u5bf8\0\u5c2e\0\u5c64\0\u5c9a\0\u5cd0\0\u5d06\0\u5d3c"+
    "\0\u08a6\0\u5d72\0\u5da8\0\u5dde\0\u5e14\0\u5e4a\0\u5e80\0\u5eb6"+
    "\0\u5eec\0\u5f22\0\u5f58\0\u5f8e\0\u5fc4\0\u5ffa\0\u6030\0\u6066"+
    "\0\u609c\0\u60d2\0\u6108\0\u613e\0\u08a6\0\u6174\0\u08a6\0\u61aa"+
    "\0\u61e0\0\u6216\0\u624c\0\u6282\0\u08a6\0\u62b8\0\u08a6\0\u62ee"+
    "\0\u6324\0\u635a\0\u6390\0\u63c6\0\u63fc\0\u6432\0\u6468\0\u649e"+
    "\0\u08a6\0\u64d4\0\u650a\0\u6540\0\u6576\0\u65ac\0\u08a6\0\u65e2"+
    "\0\u6618\0\u664e\0\u6684\0\u08a6\0\u66ba\0\u66f0\0\u6726\0\u675c"+
    "\0\u6792\0\u08a6\0\u67c8\0\u67fe\0\u6834\0\u08a6\0\u686a\0\u08a6"+
    "\0\u08a6\0\u68a0\0\u08a6\0\u68d6\0\u690c\0\u6942\0\u6978\0\u69ae"+
    "\0\u69e4\0\u6a1a\0\u6a50\0\u08a6\0\u6a86\0\u6abc\0\u6af2\0\u08a6"+
    "\0\u6b28\0\u08a6\0\u6b5e\0\u08a6\0\u6b94\0\u08a6\0\u6bca\0\u6c00"+
    "\0\u6c36\0\u6c6c\0\u08a6\0\u6ca2\0\u6cd8\0\u6d0e\0\u6d44\0\u6d7a"+
    "\0\u6db0\0\u6de6\0\u6e1c\0\u6e52\0\u6e88\0\u6ebe\0\u6ef4\0\u6f2a"+
    "\0\u6f60\0\u6f96\0\u08a6\0\u6fcc\0\u7002\0\u08a6\0\u7038\0\u706e"+
    "\0\u70a4\0\u70da\0\u7110\0\u08a6\0\u7146\0\u717c\0\u08a6\0\u71b2"+
    "\0\u71e8\0\u721e\0\u7254\0\u728a\0\u72c0\0\u72f6\0\u732c\0\u7362"+
    "\0\u7398\0\u73ce\0\u08a6\0\u08a6\0\u08a6\0\u08a6\0\u08a6\0\u08a6"+
    "\0\u08a6\0\u08a6\0\u7404\0\u743a\0\u08a6\0\u7470\0\u74a6\0\u74dc"+
    "\0\u7512\0\u08a6\0\u08a6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[643];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\3\0\1\24\1\25\1\0\1\26"+
    "\1\27\1\0\1\30\1\31\1\32\1\33\1\34\1\0"+
    "\1\35\1\0\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\6\0\1\50\1\51\12\0"+
    "\2\52\1\53\4\0\1\54\1\0\1\55\16\0\1\56"+
    "\1\0\1\57\2\0\1\60\4\0\2\61\23\0\1\52"+
    "\1\53\4\0\1\54\1\0\1\55\16\0\1\56\11\0"+
    "\1\61\12\0\1\62\1\63\1\0\1\64\1\65\2\0"+
    "\1\66\7\0\1\67\1\0\1\70\3\0\1\71\10\0"+
    "\1\72\33\0\1\73\6\0\1\74\7\0\1\75\14\0"+
    "\1\76\1\77\11\0\1\100\22\0\1\101\30\0\1\102"+
    "\5\0\1\103\17\0\1\104\1\0\1\64\1\65\2\0"+
    "\1\66\11\0\1\105\47\0\1\106\3\0\1\107\15\0"+
    "\1\110\7\0\1\111\31\0\1\112\21\0\1\113\4\0"+
    "\1\114\40\0\1\115\3\0\1\107\56\0\1\116\1\117"+
    "\1\0\1\120\1\121\1\0\1\122\1\123\1\124\14\0"+
    "\1\125\7\0\1\126\1\127\30\0\1\117\1\0\1\130"+
    "\1\121\2\0\1\123\1\124\60\0\1\131\3\0\1\132"+
    "\1\133\4\0\1\134\44\0\1\135\6\0\1\136\3\0"+
    "\1\137\25\0\1\140\33\0\1\136\3\0\1\137\61\0"+
    "\1\131\2\0\1\141\1\132\1\133\3\0\1\142\1\134"+
    "\7\0\1\143\7\0\1\131\24\0\1\144\11\0\1\145"+
    "\1\0\1\146\2\147\1\0\1\150\1\151\2\0\1\152"+
    "\2\0\1\153\1\154\3\0\1\155\2\0\1\156\1\157"+
    "\2\0\1\160\1\0\1\161\1\0\1\162\1\163\1\164"+
    "\1\165\4\0\1\166\1\167\20\0\1\170\10\0\1\171"+
    "\55\0\1\146\1\0\1\147\2\0\1\151\2\0\1\152"+
    "\2\0\1\172\4\0\1\155\3\0\1\157\4\0\1\161"+
    "\2\0\1\163\6\0\1\166\12\0\1\173\1\112\21\0"+
    "\2\113\3\0\1\114\2\0\1\174\53\0\1\175\1\0"+
    "\1\176\51\0\1\177\75\0\1\200\1\0\1\175\1\0"+
    "\1\176\1\201\50\0\1\177\15\0\1\202\43\0\1\203"+
    "\1\204\14\0\1\205\50\0\1\206\6\0\1\74\2\0"+
    "\1\207\4\0\1\75\1\210\11\0\1\211\1\0\1\76"+
    "\1\77\1\212\1\213\7\0\1\100\1\214\17\0\1\101"+
    "\1\0\1\101\30\0\1\102\1\0\1\215\3\0\1\103"+
    "\1\216\20\0\1\203\1\204\12\0\1\217\1\0\1\205"+
    "\13\0\1\220\1\221\30\0\1\222\1\0\1\223\15\0"+
    "\1\224\44\0\1\225\1\222\1\0\1\226\13\0\1\227"+
    "\1\0\1\224\13\0\1\230\31\0\1\231\1\0\1\232"+
    "\1\233\1\234\1\0\1\235\56\0\1\236\1\237\1\234"+
    "\1\232\1\233\1\234\1\0\1\235\15\0\1\240\7\0"+
    "\1\241\1\242\36\0\1\170\10\0\1\171\4\0\1\243"+
    "\20\0\1\244\22\0\1\245\3\0\1\246\61\0\1\245"+
    "\3\0\1\246\15\0\1\247\7\0\1\250\37\0\1\251"+
    "\65\0\1\251\15\0\1\252\41\0\1\253\1\0\1\254"+
    "\17\0\1\255\42\0\1\256\1\253\1\0\1\254\17\0"+
    "\1\255\1\257\10\0\1\260\37\0\1\261\65\0\1\261"+
    "\15\0\1\262\154\0\1\263\57\0\1\264\124\0\1\265"+
    "\65\0\1\266\37\0\1\267\65\0\1\270\62\0\1\271"+
    "\43\0\1\272\101\0\1\273\60\0\1\274\12\0\1\61"+
    "\41\0\1\275\70\0\1\276\76\0\1\274\12\0\1\61"+
    "\102\0\1\273\32\0\1\277\62\0\1\300\134\0\1\301"+
    "\15\0\1\302\65\0\1\303\3\0\1\304\14\0\1\305"+
    "\110\0\1\306\25\0\1\307\62\0\1\310\103\0\1\311"+
    "\44\0\1\275\63\0\1\312\11\0\1\313\55\0\1\314"+
    "\62\0\1\314\77\0\1\315\20\0\1\316\77\0\1\317"+
    "\25\0\1\320\61\0\1\321\11\0\1\313\113\0\1\322"+
    "\12\0\1\323\50\0\1\324\13\0\1\325\67\0\1\326"+
    "\35\0\1\327\40\0\1\330\3\0\1\331\117\0\1\332"+
    "\32\0\1\330\1\0\1\333\1\331\117\0\1\334\102\0"+
    "\1\335\40\0\1\336\112\0\1\337\47\0\1\340\25\0"+
    "\1\341\5\0\1\342\13\0\1\343\45\0\1\344\3\0"+
    "\1\345\70\0\1\346\70\0\1\347\64\0\1\347\51\0"+
    "\1\350\23\0\1\351\1\352\65\0\1\353\7\0\1\344"+
    "\73\0\1\340\33\0\1\354\1\346\100\0\1\355\47\0"+
    "\1\356\75\0\1\357\67\0\1\360\47\0\1\361\65\0"+
    "\1\362\3\0\1\363\37\0\1\364\43\0\1\363\7\0"+
    "\1\365\12\0\1\366\30\0\1\367\70\0\1\370\107\0"+
    "\1\371\67\0\1\372\57\0\1\373\70\0\1\373\31\0"+
    "\1\374\6\0\1\375\64\0\1\376\23\0\1\377\65\0"+
    "\1\u0100\43\0\1\u0101\70\0\1\u0102\57\0\1\u0103\75\0"+
    "\1\u0104\50\0\1\362\3\0\1\363\37\0\1\u0105\66\0"+
    "\1\u0106\42\0\1\u0107\52\0\1\u0108\56\0\1\u0109\15\0"+
    "\1\u010a\56\0\1\u010b\64\0\1\u010c\73\0\1\u010d\15\0"+
    "\1\u010e\41\0\1\u010f\71\0\1\u0110\73\0\1\u0111\65\0"+
    "\1\u0112\55\0\1\u0113\60\0\1\u0114\136\0\1\u0115\24\0"+
    "\1\u0116\74\0\1\u0117\56\0\1\u0118\6\0\1\303\5\0"+
    "\1\u0119\106\0\1\306\27\0\1\u011a\55\0\1\310\103\0"+
    "\1\u011b\55\0\1\u011c\75\0\1\u011d\102\0\1\u011e\37\0"+
    "\1\u011f\12\0\1\u0120\47\0\1\u0121\120\0\1\u0122\35\0"+
    "\1\u0123\12\0\1\u0120\45\0\1\u0121\75\0\1\u0124\12\0"+
    "\1\u0125\75\0\1\u0126\27\0\1\u0127\75\0\1\u0128\62\0"+
    "\1\u0129\1\0\1\u012a\1\u012b\14\0\1\u012c\22\0\1\u012d"+
    "\55\0\1\u012e\63\0\1\u012f\32\0\1\u0130\2\0\1\u0131"+
    "\4\0\1\u0132\14\0\1\u0133\20\0\1\u0134\46\0\1\u0127"+
    "\46\0\1\u0128\55\0\1\u0103\125\0\1\u0104\31\0\1\u0135"+
    "\114\0\1\u0136\67\0\1\u0137\33\0\1\u0138\77\0\1\u0139"+
    "\66\0\1\u013a\101\0\1\u013b\12\0\1\u013c\16\0\1\u013d"+
    "\64\0\1\u013e\124\0\1\u013f\11\0\1\u0140\46\0\1\u0141"+
    "\66\0\1\u0142\36\0\1\u0143\103\0\1\u0144\61\0\1\u0145"+
    "\73\0\1\u0146\70\0\1\u0147\52\0\1\u0148\77\0\1\u0149"+
    "\62\0\1\u014a\117\0\1\275\64\0\1\u014b\15\0\1\u014c"+
    "\65\0\1\u014d\101\0\1\u014e\45\0\1\u014f\67\0\1\u0150"+
    "\61\0\1\u0151\112\0\1\u0152\62\0\1\u0153\51\0\1\u0154"+
    "\103\0\1\u0155\64\0\1\u0156\51\0\1\u0157\115\0\1\u0158"+
    "\50\0\1\u0159\74\0\1\u015a\51\0\1\u015b\76\0\1\u015c"+
    "\51\0\1\u015d\73\0\1\u015e\24\0\1\u015f\27\0\1\u0160"+
    "\64\0\1\u0161\103\0\1\u0162\57\0\1\u0163\26\0\1\u0164"+
    "\25\0\1\u0160\77\0\1\u015f\1\u015e\67\0\1\u0165\47\0"+
    "\1\u0166\33\0\1\u0167\33\0\1\u0168\106\0\1\u0169\45\0"+
    "\1\u016a\101\0\1\u016b\66\0\1\u016c\103\0\1\u0167\55\0"+
    "\1\u016d\40\0\1\u016e\125\0\1\u016f\37\0\1\u016f\47\0"+
    "\1\u0170\70\0\1\u0171\121\0\1\u0172\30\0\1\u0173\71\0"+
    "\1\u0174\113\0\1\u0175\35\0\1\u0176\67\0\1\u0177\63\0"+
    "\1\u0178\66\0\1\u0179\103\0\1\u017a\100\0\1\u017b\34\0"+
    "\1\u017c\103\0\1\u017d\102\0\1\u017e\66\0\1\u017f\31\0"+
    "\1\u0180\103\0\1\u0181\50\0\1\u0176\63\0\1\u0182\121\0"+
    "\1\u0183\36\0\1\u0184\56\0\1\u0185\110\0\1\u0186\50\0"+
    "\1\u0187\71\0\1\u0184\101\0\1\u0188\71\0\1\u0189\40\0"+
    "\1\u018a\115\0\1\u018b\25\0\1\u018c\125\0\1\u018d\103\0"+
    "\1\u018e\33\0\1\u018f\65\0\1\u0190\117\0\1\u0191\32\0"+
    "\1\u014e\76\0\1\u014f\32\0\1\u0150\63\0\1\u0192\130\0"+
    "\1\u018d\65\0\1\u018b\22\0\1\u0193\74\0\1\u0194\135\0"+
    "\1\u0195\15\0\1\u0196\103\0\1\u0197\117\0\1\u0198\65\0"+
    "\1\u0199\33\0\1\u0196\107\0\1\u019a\17\0\1\u019b\65\0"+
    "\1\u019c\101\0\1\u019d\53\0\1\u019e\65\0\1\u019f\132\0"+
    "\1\u01a0\64\0\1\u01a1\16\0\1\u01a2\65\0\1\u01a3\101\0"+
    "\1\u01a4\106\0\1\u01a5\65\0\1\u01a6\40\0\1\u01a7\64\0"+
    "\1\u01a8\103\0\1\u01a9\46\0\1\u01a7\62\0\1\u01aa\117\0"+
    "\1\u01aa\37\0\1\u01ab\71\0\1\u01ac\75\0\1\u01ad\62\0"+
    "\1\u01ae\72\0\1\u01ab\56\0\1\u01af\115\0\1\u01ae\43\0"+
    "\1\u01b0\112\0\1\u01b1\66\0\1\u01b1\26\0\1\u01b2\73\0"+
    "\1\u01b3\63\0\1\u01b4\64\0\1\u01b5\74\0\1\u01b6\47\0"+
    "\1\u01b7\61\0\1\u01b8\105\0\1\u01b9\72\0\1\u01ba\65\0"+
    "\1\u01bb\44\0\1\u01bc\77\0\1\u01bd\104\0\1\u01be\67\0"+
    "\1\u01bf\42\0\1\u01c0\61\0\1\u01c1\61\0\1\u01c2\77\0"+
    "\1\u01c3\71\0\1\u01c4\65\0\1\u01c5\47\0\1\u01c4\65\0"+
    "\1\u01c6\70\0\1\u01c7\74\0\1\u01c8\105\0\1\u01c9\67\0"+
    "\1\u01ca\33\0\1\u01cb\73\0\1\u01cc\61\0\1\u01cd\61\0"+
    "\1\u01ce\116\0\1\u01cf\26\0\1\u01d0\102\0\1\u01d1\74\0"+
    "\1\u01ce\102\0\1\u01d2\23\0\1\u01d3\144\0\1\u01d4\65\0"+
    "\1\u01d5\55\0\1\u01d6\57\0\1\u01d7\104\0\1\u01d8\50\0"+
    "\1\u01d9\25\0\1\u01da\117\0\1\u01db\71\0\1\u01dc\67\0"+
    "\1\u01dd\31\0\1\u014f\117\0\1\u01de\67\0\1\u01df\47\0"+
    "\1\u014f\110\0\1\u01d6\40\0\1\u01e0\66\0\1\u01e0\57\0"+
    "\1\u01e1\74\0\1\u01e2\74\0\1\u01e3\44\0\1\u01e4\131\0"+
    "\1\u01e5\24\0\1\u01e6\106\0\1\u01e3\105\0\1\u01e7\47\0"+
    "\1\u01e8\61\0\1\u01b8\54\0\1\u01e9\74\0\1\u01ea\67\0"+
    "\1\u01eb\63\0\1\u01bb\75\0\1\u01ec\35\0\1\u01ed\73\0"+
    "\1\u01ee\62\0\1\u01ef\66\0\1\u01ee\65\0\1\u01f0\51\0"+
    "\1\u01f1\123\0\1\u01f2\60\0\1\u01f3\40\0\1\u01f4\73\0"+
    "\1\u018b\73\0\1\u01f5\77\0\1\u01f1\33\0\1\u01f6\125\0"+
    "\1\u01f7\61\0\1\u01f8\53\0\1\u01f9\54\0\1\u018b\75\0"+
    "\1\u01fa\64\0\1\u01fb\66\0\1\u01fc\50\0\1\u01fd\71\0"+
    "\1\u01fe\77\0\1\u01ff\56\0\1\u0200\50\0\1\u0201\76\0"+
    "\1\u0202\64\0\1\u0203\54\0\1\u0204\112\0\1\u0205\47\0"+
    "\1\u0206\131\0\1\u0207\27\0\1\u0208\62\0\1\u0209\62\0"+
    "\1\u0205\63\0\1\u020a\67\0\1\u020b\103\0\1\u020c\42\0"+
    "\1\u020d\72\0\1\u020e\117\0\1\u020f\31\0\1\u020d\105\0"+
    "\1\u0210\47\0\1\u0211\135\0\1\u0212\47\0\1\u0213\37\0"+
    "\1\u0214\70\0\1\u0215\126\0\1\u0216\51\0\1\u0217\31\0"+
    "\1\u0218\65\0\1\u0219\101\0\1\u021a\67\0\1\u021b\65\0"+
    "\1\u0219\64\0\1\u021c\115\0\1\u021d\64\0\1\u021e\46\0"+
    "\1\u021f\112\0\1\u0176\43\0\1\u021f\32\0\1\u0220\117\0"+
    "\1\u0221\42\0\1\u0222\70\0\1\u0223\62\0\1\u0224\70\0"+
    "\1\u0224\74\0\1\u0225\103\0\1\u020f\23\0\1\u0226\143\0"+
    "\1\u0227\6\0\1\u0228\144\0\1\u0229\55\0\1\u022a\32\0"+
    "\1\u022b\62\0\1\u022c\130\0\1\u0207\61\0\1\u022a\24\0"+
    "\1\u022d\70\0\1\u022e\100\0\1\u022f\51\0\1\u022e\110\0"+
    "\1\u0230\40\0\1\u0231\65\0\1\u0232\65\0\1\u0233\136\0"+
    "\1\u01f1\44\0\1\u0230\53\0\1\u0231\65\0\1\u0234\65\0"+
    "\1\u0233\43\0\1\u0235\117\0\1\u0236\37\0\1\u0237\65\0"+
    "\1\u0238\103\0\1\u0239\65\0\1\u023a\47\0\1\u023b\65\0"+
    "\1\u023c\103\0\1\u023c\65\0\1\u023d\120\0\1\u023e\6\0"+
    "\1\u023f\73\0\1\u0240\136\0\1\u0241\30\0\1\u0242\66\0"+
    "\1\u0242\50\0\1\u0243\121\0\1\u0244\63\0\1\u0244\37\0"+
    "\1\u0245\57\0\1\u0246\67\0\1\u0247\103\0\1\u0248\56\0"+
    "\1\u0249\51\0\1\u0246\72\0\1\u024a\71\0\1\u024b\77\0"+
    "\1\u024c\56\0\1\u024b\73\0\1\u024d\64\0\1\u024e\111\0"+
    "\1\u024f\66\0\1\u0250\21\0\1\u0251\117\0\1\u0252\54\0"+
    "\1\u0253\67\0\1\u0254\51\0\1\u0255\104\0\1\u0256\51\0"+
    "\1\u0257\47\0\1\u0258\112\0\1\u0240\47\0\1\u0259\103\0"+
    "\1\u025a\101\0\1\u025b\67\0\1\u025b\26\0\1\u025c\117\0"+
    "\1\u025d\70\0\1\u025e\33\0\1\u025f\121\0\1\u025e\47\0"+
    "\1\u0260\101\0\1\u0261\67\0\1\u0262\103\0\1\u0205\16\0"+
    "\1\u0263\134\0\1\u020d\45\0\1\u0264\27\0\1\131\71\0"+
    "\1\u0265\103\0\1\u0266\75\0\1\131\71\0\1\u0267\67\0"+
    "\1\u0267\57\0\1\u0268\33\0\1\u0269\72\0\1\u026a\63\0"+
    "\1\u026b\102\0\1\u026c\66\0\1\u026d\104\0\1\u0264\43\0"+
    "\1\u026e\54\0\1\u026f\74\0\1\u0270\54\0\1\u0271\70\0"+
    "\1\u0272\115\0\1\u0273\67\0\1\u0273\34\0\1\u0274\64\0"+
    "\1\u0274\115\0\1\u0275\67\0\1\u0275\35\0\1\u0276\70\0"+
    "\1\u0276\56\0\1\u0277\117\0\1\u0278\67\0\1\u0278\70\0"+
    "\1\u0279\37\0\1\u0279\60\0\1\u027a\70\0\1\u027a\52\0"+
    "\1\u027b\117\0\1\u027c\60\0\1\u027d\56\0\1\u027e\77\0"+
    "\1\u027d\51\0\1\u027f\73\0\1\u0277\44\0\1\u0280\117\0"+
    "\1\u0281\70\0\1\u0282\67\0\1\u0282\34\0\1\u0283\64\0"+
    "\1\u0283\53\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[30024];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\46\0\2\11\5\0\1\11\13\0\1\1"+
    "\3\0\1\11\5\0\1\1\3\0\1\11\4\0\1\1"+
    "\5\0\1\1\1\0\1\1\1\11\5\0\1\11\7\0"+
    "\1\11\2\0\1\1\35\0\1\1\23\0\1\11\27\0"+
    "\1\11\5\0\4\11\5\0\1\11\2\0\1\11\1\0"+
    "\1\11\3\0\1\11\6\0\1\1\1\0\1\1\2\0"+
    "\2\11\1\0\1\11\4\0\1\11\3\0\1\11\2\0"+
    "\1\11\13\0\1\11\7\0\1\11\7\0\2\11\34\0"+
    "\1\11\5\0\2\11\45\0\3\11\17\0\1\11\5\0"+
    "\2\11\7\0\1\11\6\0\1\11\15\0\1\11\6\0"+
    "\1\11\1\0\1\11\6\0\1\1\1\0\1\11\1\1"+
    "\17\0\1\11\2\0\2\11\1\0\1\1\1\11\1\0"+
    "\1\1\1\11\11\0\1\11\5\0\1\1\2\0\1\11"+
    "\4\0\2\1\3\0\1\11\7\0\1\11\11\0\1\11"+
    "\1\1\1\0\1\11\15\0\1\11\23\0\1\11\1\0"+
    "\1\11\5\0\1\11\1\0\1\11\11\0\1\11\5\0"+
    "\1\11\4\0\1\11\5\0\1\11\3\0\1\11\1\0"+
    "\2\11\1\0\1\11\10\0\1\11\3\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\4\0\1\11\17\0"+
    "\1\11\2\0\1\11\5\0\1\11\2\0\1\11\13\0"+
    "\10\11\2\0\1\11\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[643];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn,value);
        }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
        }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 146) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 60: 
          { return new Symbol(sym.Tres, yychar, yyline, yytext());
          }
        case 98: break;
        case 94: 
          { return new Symbol(sym.aunque, yychar, yyline, yytext());
          }
        case 99: break;
        case 77: 
          { return new Symbol(sym.encaso, yychar, yyline, yytext());
          }
        case 100: break;
        case 75: 
          { return new Symbol(sym.alladode, yychar, yyline, yytext());
          }
        case 101: break;
        case 24: 
          { return new Symbol(sym.timido, yychar, yyline, yytext());
          }
        case 102: break;
        case 17: 
          { return new Symbol(sym.aun, yychar, yyline, yytext());
          }
        case 103: break;
        case 78: 
          { return new Symbol(sym.sino, yychar, yyline, yytext());
          }
        case 104: break;
        case 14: 
          { return new Symbol(sym.por, yychar, yyline, yytext());
          }
        case 105: break;
        case 22: 
          { return new Symbol(sym.oye, yychar, yyline, yytext());
          }
        case 106: break;
        case 68: 
          { return new Symbol(sym.once, yychar, yyline, yytext());
          }
        case 107: break;
        case 59: 
          { return new Symbol(sym.Siete, yychar, yyline, yytext());
          }
        case 108: break;
        case 28: 
          { return new Symbol(sym.dos, yychar, yyline, yytext());
          }
        case 109: break;
        case 53: 
          { return new Symbol(sym.cuatro, yychar, yyline, yytext());
          }
        case 110: break;
        case 6: 
          { return new Symbol(sym.oh, yychar, yyline, yytext());
          }
        case 111: break;
        case 62: 
          { return new Symbol(sym.despues, yychar, yyline, yytext());
          }
        case 112: break;
        case 95: 
          { return new Symbol(sym.practico, yychar, yyline, yytext());
          }
        case 113: break;
        case 40: 
          { return new Symbol(sym.tal, yychar, yyline, yytext());
          }
        case 114: break;
        case 89: 
          { return new Symbol(sym.catorce, yychar, yyline, yytext());
          }
        case 115: break;
        case 41: 
          { return new Symbol(sym.ellos, yychar, yyline, yytext());
          }
        case 116: break;
        case 81: 
          { return new Symbol(sym.tantos, yychar, yyline, yytext());
          }
        case 117: break;
        case 76: 
          { return new Symbol(sym.antesde, yychar, yyline, yytext());
          }
        case 118: break;
        case 13: 
          { return new Symbol(sym.soy, yychar, yyline, yytext());
          }
        case 119: break;
        case 63: 
          { return new Symbol(sym.orgulloso, yychar, yyline, yytext());
          }
        case 120: break;
        case 80: 
          { return new Symbol(sym.dieciseis, yychar, yyline, yytext());
          }
        case 121: break;
        case 85: 
          { return new Symbol(sym.Dieciocho, yychar, yyline, yytext());
          }
        case 122: break;
        case 84: 
          { return new Symbol(sym.quince, yychar, yyline, yytext());
          }
        case 123: break;
        case 69: 
          { return new Symbol(sym.doce, yychar, yyline, yytext());
          }
        case 124: break;
        case 20: 
          { return new Symbol(sym.apagado, yychar, yyline, yytext());
          }
        case 125: break;
        case 26: 
          { return new Symbol(sym.ella, yychar, yyline, yytext());
          }
        case 126: break;
        case 56: 
          { return new Symbol(sym.hasta, yychar, yyline, yytext());
          }
        case 127: break;
        case 55: 
          { return new Symbol(sym.cielos, yychar, yyline, yytext());
          }
        case 128: break;
        case 31: 
          { return new Symbol(sym.y, yychar, yyline, yytext());
          }
        case 129: break;
        case 97: 
          { return new Symbol(sym.aventurero, yychar, yyline, yytext());
          }
        case 130: break;
        case 46: 
          { return new Symbol(sym.abajo, yychar, yyline, yytext());
          }
        case 131: break;
        case 70: 
          { return new Symbol(sym.alrededor, yychar, yyline, yytext());
          }
        case 132: break;
        case 23: 
          { return new Symbol(sym.seis, yychar, yyline, yytext());
          }
        case 133: break;
        case 11: 
          { return new Symbol(sym.nosotros, yychar, yyline, yytext());
          }
        case 134: break;
        case 43: 
          { return new Symbol(sym.ejem, yychar, yyline, yytext());
          }
        case 135: break;
        case 32: 
          { return new Symbol(sym.meh, yychar, yyline, yytext());
          }
        case 136: break;
        case 64: 
          { return new Symbol(sym.bingo, yychar, yyline, yytext());
          }
        case 137: break;
        case 74: 
          { return new Symbol(sym.detras, yychar, yyline, yytext());
          }
        case 138: break;
        case 72: 
          { return new Symbol(sym.durante, yychar, yyline, yytext());
          }
        case 139: break;
        case 71: 
          { return new Symbol(sym.ausente, yychar, yyline, yytext());
          }
        case 140: break;
        case 44: 
          { return new Symbol(sym.argh, yychar, yyline, yytext());
          }
        case 141: break;
        case 73: 
          { return new Symbol(sym.nocomo, yychar, yyline, yytext());
          }
        case 142: break;
        case 19: 
          { return new Symbol(sym.uno, yychar, yyline, yytext());
          }
        case 143: break;
        case 91: 
          { return new Symbol(sym.delocontrario, yychar, yyline, yytext());
          }
        case 144: break;
        case 4: 
          { return new Symbol(sym.si, yychar, yyline, yytext());
          }
        case 145: break;
        case 50: 
          { return new Symbol(sym.diosmio, yychar, yyline, yytext());
          }
        case 146: break;
        case 2: 
          { return new Symbol(sym.es, yychar, yyline, yytext());
          }
        case 147: break;
        case 92: 
          { return new Symbol(sym.diecisiete, yychar, yyline, yytext());
          }
        case 148: break;
        case 21: 
          { return new Symbol(sym.puaj, yychar, yyline, yytext());
          }
        case 149: break;
        case 39: 
          { return new Symbol(sym.solamente, yychar, yyline, yytext());
          }
        case 150: break;
        case 12: 
          { return new Symbol(sym.como, yychar, yyline, yytext());
          }
        case 151: break;
        case 42: 
          { return new Symbol(sym.entonces, yychar, yyline, yytext());
          }
        case 152: break;
        case 29: 
          { return new Symbol(sym.guau, yychar, yyline, yytext());
          }
        case 153: break;
        case 83: 
          { return new Symbol(sym.ente, yychar, yyline, yytext());
          }
        case 154: break;
        case 37: 
          { return new Symbol(sym.terminado, yychar, yyline, yytext());
          }
        case 155: break;
        case 7: 
          { return new Symbol(sym.el, yychar, yyline, yytext());
          }
        case 156: break;
        case 93: 
          { return new Symbol(sym.lejosde, yychar, yyline, yytext());
          }
        case 157: break;
        case 5: 
          { return new Symbol(sym.o, yychar, yyline, yytext());
          }
        case 158: break;
        case 86: 
          { return new Symbol(sym.trece, yychar, yyline, yytext());
          }
        case 159: break;
        case 10: 
          { return new Symbol(sym.para, yychar, yyline, yytext());
          }
        case 160: break;
        case 1: 
          { return new Symbol(sym.yo, yychar, yyline, yytext());
          }
        case 161: break;
        case 79: 
          { return new Symbol(sym.sinembargo, yychar, yyline, yytext());
          }
        case 162: break;
        case 38: 
          { return new Symbol(sym.sobre, yychar, yyline, yytext());
          }
        case 163: break;
        case 58: 
          { return new Symbol(sym.yaque, yychar, yyline, yytext());
          }
        case 164: break;
        case 54: 
          { return new Symbol(sym.desde, yychar, yyline, yytext());
          }
        case 165: break;
        case 16: 
          { return new Symbol(sym.beque, yychar, yyline, yytext());
          }
        case 166: break;
        case 49: 
          { return new Symbol(sym.no, yychar, yyline, yytext());
          }
        case 167: break;
        case 65: 
          { return new Symbol(sym.yippee, yychar, yyline, yytext());
          }
        case 168: break;
        case 27: 
          { return new Symbol(sym.diez, yychar, yyline, yytext());
          }
        case 169: break;
        case 25: 
          { return new Symbol(sym.shh, yychar, yyline, yytext());
          }
        case 170: break;
        case 36: 
          { return new Symbol(sym.pero, yychar, yyline, yytext());
          }
        case 171: break;
        case 82: 
          { return new Symbol(sym.camiseta, yychar, yyline, yytext());
          }
        case 172: break;
        case 30: 
          { return new Symbol(sym.eres, yychar, yyline, yytext());
          }
        case 173: break;
        case 45: 
          { return new Symbol(sym.pasado, yychar, yyline, yytext());
          }
        case 174: break;
        case 96: 
          { return new Symbol(sym.menosque, yychar, yyline, yytext());
          }
        case 175: break;
        case 47: 
          { return new Symbol(sym.maldito, yychar, yyline, yytext());
          }
        case 176: break;
        case 67: 
          { return new Symbol(sym.rudon, yychar, yyline, yytext());
          }
        case 177: break;
        case 9: 
          { return new Symbol(sym.asique, yychar, yyline, yytext());
          }
        case 178: break;
        case 87: 
          { return new Symbol(sym.diecinueve, yychar, yyline, yytext());
          }
        case 179: break;
        case 51: 
          { return new Symbol(sym.cero, yychar, yyline, yytext());
          }
        case 180: break;
        case 66: 
          { return new Symbol(sym.fuerade, yychar, yyline, yytext());
          }
        case 181: break;
        case 90: 
          { return new Symbol(sym.impaciente, yychar, yyline, yytext());
          }
        case 182: break;
        case 18: 
          { return new Symbol(sym.Hurra, yychar, yyline, yytext());
          }
        case 183: break;
        case 33: 
          { return new Symbol(sym.mmm, yychar, yyline, yytext());
          }
        case 184: break;
        case 15: 
          { return new Symbol(sym.tu, yychar, yyline, yytext());
          }
        case 185: break;
        case 57: 
          { return new Symbol(sym.ocho, yychar, yyline, yytext());
          }
        case 186: break;
        case 48: 
          { return new Symbol(sym.nueve, yychar, yyline, yytext());
          }
        case 187: break;
        case 3: 
          { return new Symbol(sym.ello, yychar, yyline, yytext());
          }
        case 188: break;
        case 88: 
          { return new Symbol(sym.generoso, yychar, yyline, yytext());
          }
        case 189: break;
        case 8: 
          { return new Symbol(sym.jerga, yychar, yyline, yytext());
          }
        case 190: break;
        case 34: 
          { return new Symbol(sym.na, yychar, yyline, yytext());
          }
        case 191: break;
        case 52: 
          { return new Symbol(sym.cinco, yychar, yyline, yytext());
          }
        case 192: break;
        case 61: 
          { return new Symbol(sym.entre, yychar, yyline, yytext());
          }
        case 193: break;
        case 35: 
          { return new Symbol(sym.abucheo, yychar, yyline, yytext());
          }
        case 194: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
