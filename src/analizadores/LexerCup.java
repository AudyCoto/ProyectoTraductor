/* The following code was generated by JFlex 1.4.3 on 3/06/23 01:16 AM */

package analizadores;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/06/23 01:16 AM from the specification file
 * <tt>C:/Users/audyc/Documents/NetBeansProjects/ProyectoTraductor/src/analizadores/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    54, 58,  0,  0,  0,  0,  0, 20, 60, 61,  0,  0,  1,  0, 57,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 59, 
     0, 17, 36, 37, 35, 23, 29, 31,  8,  2, 56, 40, 28, 25, 44, 30, 
    42, 52, 22, 11, 16, 24, 48, 14, 51,  4, 49, 62,  0, 63,  0,  0, 
     0, 19, 33, 38, 32,  9, 27, 34, 10,  3, 55, 39, 26, 18, 43,  5, 
    41, 53, 21, 12, 13,  6, 46, 15, 50,  7, 45,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 47,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\15\0\1\3\1\0\1\3\34\0"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\14\0\1\15\3\0\1\16\3\0\2\17\2\0"+
    "\1\20\56\0\1\21\20\0\1\22\13\0\2\23\3\0"+
    "\1\24\1\25\26\0\1\24\32\0\1\15\117\0\1\26"+
    "\1\0\1\22\13\0\1\27\1\0\1\30\2\0\1\31"+
    "\1\0\1\32\2\0\1\27\1\33\1\34\2\0\1\35"+
    "\1\36\4\0\1\37\1\0\1\40\4\0\1\37\21\0"+
    "\1\41\2\0\1\41\3\0\1\42\7\0\1\43\6\0"+
    "\1\44\27\0\1\45\2\0\1\46\2\0\1\47\13\0"+
    "\1\50\2\0\1\51\3\0\1\51\14\0\1\46\10\0"+
    "\1\45\6\0\1\52\10\0\1\53\11\0\1\54\1\55"+
    "\1\56\15\0\1\57\2\0\1\60\50\0\1\61\1\62"+
    "\22\0\1\61\26\0\1\63\4\0\1\64\4\0\1\65"+
    "\1\0\1\66\1\0\1\67\25\0\1\70\12\0\1\71"+
    "\1\72\3\0\1\72\14\0\1\70\5\0\1\73\10\0"+
    "\1\74\1\75\14\0\1\74\40\0\1\76\4\0\1\77"+
    "\10\0\1\100\1\101\1\0\1\102\34\0\1\103\1\104"+
    "\1\105\3\0\1\106\16\0\1\107\11\0\2\110\14\0"+
    "\1\111\3\0\1\112\1\0\1\113\1\114\3\0\1\115"+
    "\1\0\1\116\1\0\1\117\4\0\1\120\1\0\1\121"+
    "\1\0\1\122\1\123\1\124\57\0\1\125\3\0\1\126"+
    "\1\0\1\127\1\0\1\130\26\0\1\131\3\0\1\132"+
    "\1\133\3\0\1\134\3\0\1\135\1\0\1\136\1\0"+
    "\1\137\5\0\1\133\10\0\1\136\30\0\1\140\2\0"+
    "\1\141\1\142\4\0\1\143\7\0\1\144\12\0\1\141"+
    "\2\0\1\145\1\0\1\146\15\0\1\147\23\0\1\150"+
    "\27\0\1\151\1\152\4\0\1\153\32\0\2\154\1\155"+
    "\4\0\1\156\1\0\1\157\3\0\1\160\1\0\1\161"+
    "\5\0\1\162\6\0\1\163\1\164\2\0\1\165\2\0"+
    "\1\166\2\0\1\167\1\170\1\171\3\0\1\172\10\0"+
    "\1\173\1\174\1\175\3\0\1\172\6\0\1\176\1\177"+
    "\1\200\3\0\1\201\1\202\1\203\1\204\1\205\1\206"+
    "\3\0\1\207\1\210\1\211\1\0\1\212\1\213\1\214"+
    "\5\0\1\204\22\0\1\215\2\0\1\216\1\217\6\0"+
    "\1\220\1\0\1\221\6\0\1\162\15\0\1\222\3\0"+
    "\1\223\1\224\2\0\1\225\36\0\1\226\11\0\1\227"+
    "\2\0\1\230\20\0\1\231\1\0\1\232\16\0\1\233"+
    "\1\0\1\234\6\0\1\235\1\0\1\236\1\0\1\237"+
    "\5\0\1\240\13\0\1\241\1\242\1\0\1\243\3\0"+
    "\1\244\1\0\1\244\23\0\1\245\4\0\1\246\1\247"+
    "\5\0\1\250\1\251\2\0\1\252\4\0\1\253\3\0"+
    "\1\254\3\0\1\255\1\256\6\0\1\257\2\0\1\260"+
    "\1\261\2\0\1\262\1\0\1\263\1\0\1\264\2\0"+
    "\1\265\13\0\1\266\3\0\1\267\6\0\1\270\1\271"+
    "\1\272\2\0\1\273\4\0\1\252\5\0\1\274\1\275"+
    "\1\276\1\277\1\0\1\300\1\0\1\301\1\302\1\0"+
    "\1\301\6\0\1\303\1\0\1\304\1\305\6\0\1\306"+
    "\1\307\3\0\1\310\2\0\1\311\23\0\1\312\10\0"+
    "\1\313\1\314\5\0\1\315\1\316\1\0\1\317\2\0"+
    "\1\320\41\0\1\321\1\322\1\323\1\322\1\324\6\0"+
    "\1\325\1\326\1\327\1\330\1\331\4\0\1\332\1\0"+
    "\1\333\2\0\1\334\7\0\1\335\4\0\1\336\1\337"+
    "\13\0\1\340\5\0\1\341\1\342\31\0\1\343\1\344"+
    "\1\0\1\345\12\0\1\346\1\347\2\0\1\350\4\0"+
    "\1\351\1\352\1\353\2\0\1\354\1\355\12\0\1\356"+
    "\2\0\1\76\2\0\1\357\1\360\1\0\1\361\1\362"+
    "\1\0\1\363\10\0\1\364\1\365\1\366\12\0\1\367"+
    "\2\0\1\370\1\371\22\0\1\372\1\0\1\373\1\0"+
    "\1\374\1\0\1\375\5\0\1\376\1\377\14\0\1\u0100"+
    "\1\u0101\1\u0102\1\u0103\1\0\1\u0104\1\u0105\4\0\1\u0106"+
    "\2\0\1\u0107\1\0\1\u0108\2\0\1\u0109\1\u010a\1\u010b"+
    "\1\u010c\1\u010d\1\u010e\1\0\1\u010f\1\u0110\1\u0111\10\0"+
    "\1\u0112\4\0\1\u0113\1\u0114\1\u0115\4\0\1\u0116\2\0"+
    "\1\u0117\1\0\1\u0118\1\u0119\1\u011a\1\u011b\1\u011c\1\u011d"+
    "\1\0\1\u011e\6\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[1847];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0"+
    "\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0"+
    "\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0780\0\u07c0"+
    "\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0980\0\u09c0"+
    "\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0"+
    "\0\u0c00\0\u0c00\0\u0c00\0\u0c00\0\u0c00\0\u0c00\0\u0c00\0\u0c00"+
    "\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0e00"+
    "\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\u1000"+
    "\0\u1040\0\u0c00\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0"+
    "\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300\0\u1340\0\u1380\0\u13c0"+
    "\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0"+
    "\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0"+
    "\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900\0\u1940\0\u1980\0\u19c0"+
    "\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u1b00\0\u1b40\0\u1b80\0\u1bc0"+
    "\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0"+
    "\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0"+
    "\0\u2000\0\u2040\0\u2080\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0"+
    "\0\u2200\0\u2240\0\u2280\0\u22c0\0\u2300\0\u2340\0\u2380\0\u23c0"+
    "\0\u2400\0\u2440\0\u2480\0\u24c0\0\u2500\0\u2540\0\u2580\0\u25c0"+
    "\0\u2600\0\u2640\0\u2680\0\u0c00\0\u26c0\0\u2700\0\u2740\0\u2780"+
    "\0\u27c0\0\u2800\0\u2840\0\u2880\0\u28c0\0\u2900\0\u2940\0\u2980"+
    "\0\u29c0\0\u2a00\0\u2a40\0\u2a80\0\u2ac0\0\u2b00\0\u2b40\0\u2b80"+
    "\0\u2bc0\0\u2c00\0\u2c40\0\u2c80\0\u2cc0\0\u2d00\0\u2d40\0\u2d80"+
    "\0\u2dc0\0\u2e00\0\u2e40\0\u2e80\0\u2ec0\0\u2f00\0\u2f40\0\u2f80"+
    "\0\u2fc0\0\u3000\0\u3040\0\u3080\0\u30c0\0\u3100\0\u3140\0\u3180"+
    "\0\u31c0\0\u3200\0\u3240\0\u3280\0\u32c0\0\u3300\0\u3340\0\u3380"+
    "\0\u33c0\0\u3400\0\u3440\0\u3480\0\u34c0\0\u3500\0\u3540\0\u3580"+
    "\0\u35c0\0\u3600\0\u3640\0\u3680\0\u36c0\0\u3700\0\u3740\0\u3780"+
    "\0\u37c0\0\u3800\0\u3840\0\u3880\0\u38c0\0\u3900\0\u3940\0\u3980"+
    "\0\u39c0\0\u3a00\0\u3a40\0\u3a80\0\u3ac0\0\u3b00\0\u3b40\0\u3b80"+
    "\0\u3bc0\0\u3c00\0\u3c40\0\u3c80\0\u3cc0\0\u3d00\0\u3d40\0\u3d80"+
    "\0\u3dc0\0\u3e00\0\u3e40\0\u3e80\0\u3ec0\0\u3f00\0\u3f40\0\u3f80"+
    "\0\u3fc0\0\u4000\0\u4040\0\u4080\0\u40c0\0\u4100\0\u4140\0\u4180"+
    "\0\u41c0\0\u4200\0\u4240\0\u4280\0\u42c0\0\u4300\0\u4340\0\u4380"+
    "\0\u43c0\0\u4400\0\u4440\0\u4480\0\u44c0\0\u4500\0\u4540\0\u4580"+
    "\0\u45c0\0\u4600\0\u4640\0\u4680\0\u46c0\0\u0c00\0\u4700\0\u0c00"+
    "\0\u4740\0\u4780\0\u47c0\0\u4800\0\u4840\0\u4880\0\u48c0\0\u4900"+
    "\0\u4940\0\u4980\0\u49c0\0\u4a00\0\u4a40\0\u0c00\0\u4a80\0\u4ac0"+
    "\0\u0c00\0\u4b00\0\u0c00\0\u4b40\0\u4b80\0\u4bc0\0\u0c00\0\u0c00"+
    "\0\u4c00\0\u4c40\0\u0c00\0\u0c00\0\u4c80\0\u4cc0\0\u4d00\0\u4d40"+
    "\0\u4d80\0\u4dc0\0\u0c00\0\u4e00\0\u4e40\0\u4e80\0\u4ec0\0\u4f00"+
    "\0\u4f40\0\u4f80\0\u4fc0\0\u5000\0\u5040\0\u5080\0\u50c0\0\u5100"+
    "\0\u5140\0\u5180\0\u51c0\0\u5200\0\u5240\0\u5280\0\u52c0\0\u5300"+
    "\0\u5340\0\u5380\0\u53c0\0\u5400\0\u5440\0\u5480\0\u54c0\0\u5500"+
    "\0\u0c00\0\u5540\0\u5580\0\u55c0\0\u5600\0\u5640\0\u5680\0\u56c0"+
    "\0\u0c00\0\u5700\0\u5740\0\u5780\0\u57c0\0\u5800\0\u5840\0\u0c00"+
    "\0\u5880\0\u58c0\0\u5900\0\u5940\0\u5980\0\u59c0\0\u5a00\0\u5a40"+
    "\0\u5a80\0\u5ac0\0\u5b00\0\u5b40\0\u5b80\0\u5bc0\0\u5c00\0\u5c40"+
    "\0\u5c80\0\u5cc0\0\u5d00\0\u5d40\0\u5d80\0\u5dc0\0\u5e00\0\u5e40"+
    "\0\u5e80\0\u5ec0\0\u5f00\0\u5f40\0\u5f80\0\u0c00\0\u5fc0\0\u6000"+
    "\0\u6040\0\u6080\0\u60c0\0\u6100\0\u6140\0\u6180\0\u61c0\0\u6200"+
    "\0\u6240\0\u0c00\0\u6280\0\u62c0\0\u6300\0\u6340\0\u6380\0\u63c0"+
    "\0\u6400\0\u6440\0\u6480\0\u64c0\0\u6500\0\u6540\0\u6580\0\u65c0"+
    "\0\u6600\0\u6640\0\u6680\0\u66c0\0\u6700\0\u6740\0\u6780\0\u67c0"+
    "\0\u6800\0\u6840\0\u6880\0\u68c0\0\u6900\0\u6940\0\u6980\0\u69c0"+
    "\0\u6a00\0\u6a40\0\u6a80\0\u6ac0\0\u6b00\0\u0c00\0\u6b40\0\u6b80"+
    "\0\u6bc0\0\u6c00\0\u6c40\0\u6c80\0\u6cc0\0\u6d00\0\u0c00\0\u6d40"+
    "\0\u6d80\0\u6dc0\0\u6e00\0\u6e40\0\u6e80\0\u6ec0\0\u6f00\0\u6f40"+
    "\0\u0c00\0\u0c00\0\u0c00\0\u6f80\0\u6fc0\0\u7000\0\u7040\0\u7080"+
    "\0\u70c0\0\u7100\0\u7140\0\u7180\0\u71c0\0\u7200\0\u7240\0\u7280"+
    "\0\u0c00\0\u72c0\0\u7300\0\u0c00\0\u7340\0\u7380\0\u73c0\0\u7400"+
    "\0\u7440\0\u7480\0\u74c0\0\u7500\0\u7540\0\u7580\0\u75c0\0\u7600"+
    "\0\u7640\0\u7680\0\u76c0\0\u7700\0\u7740\0\u7780\0\u77c0\0\u7800"+
    "\0\u7840\0\u7880\0\u78c0\0\u7900\0\u7940\0\u7980\0\u79c0\0\u7a00"+
    "\0\u7a40\0\u7a80\0\u7ac0\0\u7b00\0\u7b40\0\u7b80\0\u7bc0\0\u7c00"+
    "\0\u7c40\0\u7c80\0\u7cc0\0\u7d00\0\u7d40\0\u0c00\0\u7d80\0\u7dc0"+
    "\0\u7e00\0\u7e40\0\u7e80\0\u7ec0\0\u7f00\0\u7f40\0\u7f80\0\u7fc0"+
    "\0\u8000\0\u8040\0\u8080\0\u80c0\0\u8100\0\u8140\0\u8180\0\u81c0"+
    "\0\u8200\0\u8240\0\u8280\0\u82c0\0\u8300\0\u8340\0\u8380\0\u83c0"+
    "\0\u8400\0\u8440\0\u8480\0\u84c0\0\u8500\0\u8540\0\u8580\0\u85c0"+
    "\0\u8600\0\u8640\0\u8680\0\u86c0\0\u8700\0\u8740\0\u8780\0\u0c00"+
    "\0\u87c0\0\u8800\0\u8840\0\u8880\0\u0c00\0\u88c0\0\u8900\0\u8940"+
    "\0\u8980\0\u0c00\0\u89c0\0\u0c00\0\u8a00\0\u0c00\0\u8a40\0\u8a80"+
    "\0\u8ac0\0\u8b00\0\u8b40\0\u8b80\0\u8bc0\0\u8c00\0\u8c40\0\u8c80"+
    "\0\u8cc0\0\u8d00\0\u8d40\0\u8d80\0\u8dc0\0\u8e00\0\u8e40\0\u8e80"+
    "\0\u8ec0\0\u8f00\0\u8f40\0\u8f80\0\u8fc0\0\u9000\0\u9040\0\u9080"+
    "\0\u90c0\0\u9100\0\u9140\0\u9180\0\u91c0\0\u9200\0\u0c00\0\u9240"+
    "\0\u9280\0\u92c0\0\u9300\0\u9340\0\u9380\0\u93c0\0\u9400\0\u9440"+
    "\0\u9480\0\u94c0\0\u9500\0\u9540\0\u9580\0\u95c0\0\u9600\0\u9640"+
    "\0\u9680\0\u96c0\0\u9700\0\u9740\0\u9780\0\u97c0\0\u0c00\0\u9800"+
    "\0\u9840\0\u9880\0\u98c0\0\u9900\0\u9940\0\u9980\0\u99c0\0\u9a00"+
    "\0\u0c00\0\u9a40\0\u9a80\0\u9ac0\0\u9b00\0\u9b40\0\u9b80\0\u9bc0"+
    "\0\u9c00\0\u9c40\0\u9c80\0\u9cc0\0\u9d00\0\u9d40\0\u9d80\0\u9dc0"+
    "\0\u9e00\0\u9e40\0\u9e80\0\u9ec0\0\u9f00\0\u9f40\0\u9f80\0\u9fc0"+
    "\0\ua000\0\ua040\0\ua080\0\ua0c0\0\ua100\0\ua140\0\ua180\0\ua1c0"+
    "\0\ua200\0\ua240\0\ua280\0\ua2c0\0\ua300\0\ua340\0\ua380\0\ua3c0"+
    "\0\ua400\0\ua440\0\ua480\0\ua4c0\0\ua500\0\ua540\0\ua580\0\ua5c0"+
    "\0\ua600\0\ua640\0\ua680\0\u0c00\0\ua6c0\0\ua700\0\ua740\0\ua780"+
    "\0\ua7c0\0\ua800\0\ua840\0\ua880\0\u0c00\0\u0c00\0\ua8c0\0\u0c00"+
    "\0\ua900\0\ua940\0\ua980\0\ua9c0\0\uaa00\0\uaa40\0\uaa80\0\uaac0"+
    "\0\uab00\0\uab40\0\uab80\0\uabc0\0\uac00\0\uac40\0\uac80\0\uacc0"+
    "\0\uad00\0\uad40\0\uad80\0\uadc0\0\uae00\0\uae40\0\uae80\0\uaec0"+
    "\0\uaf00\0\uaf40\0\uaf80\0\uafc0\0\u0c00\0\u0c00\0\u0c00\0\ub000"+
    "\0\ub040\0\ub080\0\u0c00\0\ub0c0\0\ub100\0\ub140\0\ub180\0\ub1c0"+
    "\0\ub200\0\ub240\0\ub280\0\ub2c0\0\ub300\0\ub340\0\ub380\0\ub3c0"+
    "\0\ub400\0\u0c00\0\ub440\0\ub480\0\ub4c0\0\ub500\0\ub540\0\ub580"+
    "\0\ub5c0\0\ub600\0\ub640\0\ub680\0\ub6c0\0\ub700\0\ub740\0\ub780"+
    "\0\ub7c0\0\ub800\0\ub840\0\ub880\0\ub8c0\0\ub900\0\ub940\0\ub980"+
    "\0\ub9c0\0\u0c00\0\uba00\0\uba40\0\uba80\0\u0c00\0\ubac0\0\u0c00"+
    "\0\u0c00\0\ubb00\0\ubb40\0\ubb80\0\u0c00\0\ubbc0\0\u0c00\0\ubc00"+
    "\0\u0c00\0\ubc40\0\ubc80\0\ubcc0\0\ubd00\0\u0c00\0\ubd40\0\u0c00"+
    "\0\ubd80\0\u0c00\0\u0c00\0\u0c00\0\ubdc0\0\ube00\0\ube40\0\ube80"+
    "\0\ubec0\0\ubf00\0\ubf40\0\ubf80\0\ubfc0\0\uc000\0\uc040\0\uc080"+
    "\0\uc0c0\0\uc100\0\uc140\0\uc180\0\uc1c0\0\uc200\0\uc240\0\uc280"+
    "\0\uc2c0\0\uc300\0\uc340\0\uc380\0\uc3c0\0\uc400\0\uc440\0\uc480"+
    "\0\uc4c0\0\uc500\0\uc540\0\uc580\0\uc5c0\0\uc600\0\uc640\0\uc680"+
    "\0\uc6c0\0\uc700\0\uc740\0\uc780\0\uc7c0\0\uc800\0\uc840\0\uc880"+
    "\0\uc8c0\0\uc900\0\uc940\0\u0c00\0\uc980\0\uc9c0\0\uca00\0\u0c00"+
    "\0\uca40\0\u0c00\0\uca80\0\u0c00\0\ucac0\0\ucb00\0\ucb40\0\ucb80"+
    "\0\ucbc0\0\ucc00\0\ucc40\0\ucc80\0\uccc0\0\ucd00\0\ucd40\0\ucd80"+
    "\0\ucdc0\0\uce00\0\uce40\0\uce80\0\ucec0\0\ucf00\0\ucf40\0\ucf80"+
    "\0\ucfc0\0\ud000\0\u0c00\0\ud040\0\ud080\0\ud0c0\0\u0c00\0\ud100"+
    "\0\ud140\0\ud180\0\ud1c0\0\u0c00\0\ud200\0\ud240\0\ud280\0\u0c00"+
    "\0\ud2c0\0\ud300\0\ud340\0\u0c00\0\ud380\0\ud3c0\0\ud400\0\ud440"+
    "\0\ud480\0\ud4c0\0\ud500\0\ud540\0\ud580\0\ud5c0\0\ud600\0\ud640"+
    "\0\ud680\0\ud6c0\0\ud700\0\ud740\0\ud780\0\ud7c0\0\ud800\0\ud840"+
    "\0\ud880\0\ud8c0\0\ud900\0\ud940\0\ud980\0\ud9c0\0\uda00\0\uda40"+
    "\0\uda80\0\udac0\0\udb00\0\udb40\0\udb80\0\udbc0\0\udc00\0\udc40"+
    "\0\udc80\0\udcc0\0\udd00\0\u0c00\0\udd40\0\udd80\0\uddc0\0\u0c00"+
    "\0\ude00\0\ude40\0\ude80\0\udec0\0\u0c00\0\udf00\0\udf40\0\udf80"+
    "\0\udfc0\0\ue000\0\ue040\0\ue080\0\u0c00\0\ue0c0\0\ue100\0\ue140"+
    "\0\ue180\0\ue1c0\0\ue200\0\ue240\0\ue280\0\ue2c0\0\ue300\0\ue340"+
    "\0\ue380\0\ue3c0\0\u0c00\0\ue400\0\u0c00\0\ue440\0\ue480\0\ue4c0"+
    "\0\ue500\0\ue540\0\ue580\0\ue5c0\0\ue600\0\ue640\0\ue680\0\ue6c0"+
    "\0\ue700\0\ue740\0\u0c00\0\ue780\0\ue7c0\0\ue800\0\ue840\0\ue880"+
    "\0\ue8c0\0\ue900\0\ue940\0\ue980\0\ue9c0\0\uea00\0\uea40\0\uea80"+
    "\0\ueac0\0\ueb00\0\ueb40\0\ueb80\0\uebc0\0\uec00\0\u0c00\0\uec40"+
    "\0\uec80\0\uecc0\0\ued00\0\ued40\0\ued80\0\uedc0\0\uee00\0\uee40"+
    "\0\uee80\0\ueec0\0\uef00\0\uef40\0\uef80\0\uefc0\0\uf000\0\uf040"+
    "\0\uf080\0\uf0c0\0\uf100\0\uf140\0\uf180\0\uf1c0\0\u0c00\0\u0c00"+
    "\0\uf200\0\uf240\0\uf280\0\uf2c0\0\u0c00\0\uf300\0\uf340\0\uf380"+
    "\0\uf3c0\0\uf400\0\uf440\0\uf480\0\uf4c0\0\uf500\0\uf540\0\uf580"+
    "\0\uf5c0\0\uf600\0\uf640\0\uf680\0\uf6c0\0\uf700\0\uf740\0\uf780"+
    "\0\uf7c0\0\uf800\0\uf840\0\uf880\0\uf8c0\0\uf900\0\uf940\0\uf980"+
    "\0\uf9c0\0\u0c00\0\ufa00\0\ufa40\0\ufa80\0\ufac0\0\u0c00\0\ufb00"+
    "\0\u0c00\0\ufb40\0\ufb80\0\ufbc0\0\u0c00\0\ufc00\0\u0c00\0\ufc40"+
    "\0\ufc80\0\ufcc0\0\ufd00\0\ufd40\0\ufd80\0\ufdc0\0\ufe00\0\ufe40"+
    "\0\ufe80\0\ufec0\0\uff00\0\u0c00\0\u0c00\0\uff40\0\uff80\0\u0c00"+
    "\0\uffc0\1\0\0\u0c00\1\100\1\200\0\u0c00\0\u0c00\0\u0c00"+
    "\1\300\1\u0100\1\u0140\1\u0180\1\u01c0\1\u0200\1\u0240\1\u0280"+
    "\1\u02c0\1\u0300\1\u0340\1\u0380\0\u0c00\0\u0c00\0\u0c00\1\u03c0"+
    "\1\u0400\1\u0440\1\u0480\1\u04c0\1\u0500\1\u0540\1\u0580\1\u05c0"+
    "\1\u0600\0\u0c00\0\u0c00\0\u0c00\1\u0640\1\u0680\1\u06c0\0\u0c00"+
    "\0\u0c00\0\u0c00\1\u0700\0\u0c00\0\u0c00\1\u0740\1\u0780\1\u07c0"+
    "\0\u0c00\0\u0c00\0\u0c00\1\u0800\0\u0c00\0\u0c00\0\u0c00\1\u0840"+
    "\1\u0880\1\u08c0\1\u0900\1\u0940\1\u0980\1\u09c0\1\u0a00\1\u0a40"+
    "\1\u0a80\1\u0ac0\1\u0b00\1\u0b40\1\u0b80\1\u0bc0\1\u0c00\1\u0c40"+
    "\1\u0c80\1\u0cc0\1\u0d00\1\u0d40\1\u0d80\1\u0dc0\1\u0e00\0\u0c00"+
    "\1\u0e40\1\u0e80\0\u0c00\0\u0c00\1\u0ec0\1\u0f00\1\u0f40\1\u0f80"+
    "\1\u0fc0\1\u1000\0\u0c00\1\u1040\0\u0c00\1\u1080\1\u10c0\1\u1100"+
    "\1\u1140\1\u1180\1\u11c0\1\u1200\1\u1240\1\u1280\1\u12c0\1\u1300"+
    "\1\u1340\1\u1380\1\u13c0\1\u1400\1\u1440\1\u1480\1\u14c0\1\u1500"+
    "\1\u1540\0\u0c00\1\u1580\1\u15c0\1\u1600\0\u0c00\0\u0c00\1\u1640"+
    "\1\u1680\0\u0c00\1\u16c0\1\u1700\1\u1740\1\u1780\1\u17c0\1\u1800"+
    "\1\u1840\1\u1880\1\u18c0\1\u1900\1\u1940\1\u1980\1\u19c0\1\u1a00"+
    "\1\u1a40\1\u1a80\1\u1ac0\1\u1b00\1\u1b40\1\u1b80\1\u1bc0\1\u1c00"+
    "\1\u1c40\1\u1c80\1\u1cc0\1\u1d00\1\u1d40\1\u1d80\1\u1dc0\1\u1e00"+
    "\0\u0c00\1\u1e40\1\u1e80\1\u1ec0\1\u1f00\1\u1f40\1\u1f80\1\u1fc0"+
    "\1\u2000\1\u2040\0\u0c00\1\u2080\1\u20c0\0\u0c00\1\u2100\1\u2140"+
    "\1\u2180\1\u21c0\1\u2200\1\u2240\1\u2280\1\u22c0\1\u2300\1\u2340"+
    "\1\u2380\1\u23c0\1\u2400\1\u2440\1\u2480\1\u24c0\0\u0c00\1\u2500"+
    "\0\u0c00\1\u2540\1\u2580\1\u25c0\1\u2600\1\u2640\1\u2680\1\u26c0"+
    "\1\u2700\1\u2740\1\u2780\1\u27c0\1\u2800\1\u2840\1\u2880\0\u0c00"+
    "\1\u28c0\0\u0c00\1\u2900\1\u2940\1\u2980\1\u29c0\1\u2a00\1\u2a40"+
    "\0\u0c00\1\u2a80\0\u0c00\1\u2ac0\0\u0c00\1\u2b00\1\u2b40\1\u2b80"+
    "\1\u2bc0\1\u2c00\0\u0c00\1\u2c40\1\u2c80\1\u2cc0\1\u2d00\1\u2d40"+
    "\1\u2d80\1\u2dc0\1\u2e00\1\u2e40\1\u2e80\1\u2ec0\0\u0c00\0\u0c00"+
    "\1\u2f00\0\u0c00\1\u2f40\1\u2f80\1\u2fc0\1\u3000\1\u3040\1\u3080"+
    "\1\u30c0\1\u3100\1\u3140\1\u3180\1\u31c0\1\u3200\1\u3240\1\u3280"+
    "\1\u32c0\1\u3300\1\u3340\1\u3380\1\u33c0\1\u3400\1\u3440\1\u3480"+
    "\1\u34c0\1\u3500\1\u3540\0\u0c00\1\u3580\1\u35c0\1\u3600\1\u3640"+
    "\0\u0c00\0\u0c00\1\u3680\1\u36c0\1\u3700\1\u3740\1\u3780\0\u0c00"+
    "\0\u0c00\1\u37c0\1\u3800\1\u3840\1\u3880\1\u38c0\1\u3900\1\u3940"+
    "\0\u0c00\1\u3980\1\u39c0\1\u3a00\0\u0c00\1\u3a40\1\u3a80\1\u3ac0"+
    "\0\u0c00\0\u0c00\1\u3b00\1\u3b40\1\u3b80\1\u3bc0\1\u3c00\1\u3c40"+
    "\0\u0c00\1\u3c80\1\u3cc0\0\u0c00\0\u0c00\1\u3d00\1\u3d40\0\u0c00"+
    "\1\u3d80\0\u0c00\1\u3dc0\0\u0c00\1\u3e00\1\u3e40\0\u0c00\1\u3e80"+
    "\1\u3ec0\1\u3f00\1\u3f40\1\u3f80\1\u3fc0\1\u4000\1\u4040\1\u4080"+
    "\1\u40c0\1\u4100\0\u0c00\1\u4140\1\u4180\1\u41c0\0\u0c00\1\u4200"+
    "\1\u4240\1\u4280\1\u42c0\1\u4300\1\u4340\0\u0c00\0\u0c00\0\u0c00"+
    "\1\u4380\1\u43c0\0\u0c00\1\u4400\1\u4440\1\u4480\1\u44c0\1\u4500"+
    "\1\u4540\1\u4580\1\u45c0\1\u4600\1\u4640\0\u0c00\0\u0c00\0\u0c00"+
    "\0\u0c00\1\u4680\0\u0c00\1\u46c0\1\u4700\0\u0c00\1\u4740\1\u4780"+
    "\1\u47c0\1\u4800\1\u4840\1\u4880\1\u48c0\1\u4900\0\u0c00\1\u4940"+
    "\0\u0c00\0\u0c00\1\u4980\1\u49c0\1\u4a00\1\u4a40\1\u4a80\1\u4ac0"+
    "\0\u0c00\0\u0c00\1\u4b00\1\u4b40\1\u4b80\0\u0c00\1\u4bc0\1\u4c00"+
    "\0\u0c00\1\u4c40\1\u4c80\1\u4cc0\1\u4d00\1\u4d40\1\u4d80\1\u4dc0"+
    "\1\u4e00\1\u4e40\1\u4e80\1\u4ec0\1\u4f00\1\u4f40\1\u4f80\1\u4fc0"+
    "\1\u5000\1\u5040\1\u5080\1\u50c0\0\u0c00\1\u5100\1\u5140\1\u5180"+
    "\1\u51c0\1\u5200\1\u5240\1\u5280\1\u52c0\0\u0c00\0\u0c00\1\u5300"+
    "\1\u5340\1\u5380\1\u53c0\1\u5400\0\u0c00\0\u0c00\1\u5440\0\u0c00"+
    "\1\u5480\1\u54c0\0\u0c00\1\u5500\1\u5540\1\u5580\1\u55c0\1\u5600"+
    "\1\u5640\1\u5680\1\u56c0\1\u5700\1\u5740\1\u5780\1\u57c0\1\u5800"+
    "\1\u5840\1\u5880\1\u58c0\1\u5900\1\u5940\1\u5980\1\u59c0\1\u5a00"+
    "\1\u5a40\1\u5a80\1\u5ac0\1\u5b00\1\u5b40\1\u5b80\1\u5bc0\1\u5c00"+
    "\1\u5c40\1\u5c80\1\u5cc0\1\u5d00\0\u0c00\1\u5d40\0\u0c00\1\u5d80"+
    "\0\u0c00\1\u5dc0\1\u5e00\1\u5e40\1\u5e80\1\u5ec0\1\u5f00\0\u0c00"+
    "\0\u0c00\0\u0c00\0\u0c00\0\u0c00\1\u5f40\1\u5f80\1\u5fc0\1\u6000"+
    "\0\u0c00\1\u6040\0\u0c00\1\u6080\1\u60c0\0\u0c00\1\u6100\1\u6140"+
    "\1\u6180\1\u61c0\1\u6200\1\u6240\1\u6280\0\u0c00\1\u62c0\1\u6300"+
    "\1\u6340\1\u6380\0\u0c00\0\u0c00\1\u63c0\1\u6400\1\u6440\1\u6480"+
    "\1\u64c0\1\u6500\1\u6540\1\u6580\1\u65c0\1\u6600\1\u6640\0\u0c00"+
    "\1\u6680\1\u66c0\1\u6700\1\u6740\1\u6780\0\u0c00\0\u0c00\1\u67c0"+
    "\1\u6800\1\u6840\1\u6880\1\u68c0\1\u6900\1\u6940\1\u6980\1\u69c0"+
    "\1\u6a00\1\u6a40\1\u6a80\1\u6ac0\1\u6b00\1\u6b40\1\u6b80\1\u6bc0"+
    "\1\u6c00\1\u6c40\1\u6c80\1\u6cc0\1\u6d00\1\u6d40\1\u6d80\1\u6dc0"+
    "\0\u0c00\0\u0c00\1\u6e00\0\u0c00\1\u6e40\1\u6e80\1\u6ec0\1\u6f00"+
    "\1\u6f40\1\u6f80\1\u6fc0\1\u7000\1\u7040\1\u7080\0\u0c00\0\u0c00"+
    "\1\u70c0\1\u7100\0\u0c00\1\u7140\1\u7180\1\u71c0\1\u7200\0\u0c00"+
    "\0\u0c00\0\u0c00\1\u7240\1\u7280\0\u0c00\0\u0c00\1\u72c0\1\u7300"+
    "\1\u7340\1\u7380\1\u73c0\1\u7400\1\u7440\1\u7480\1\u74c0\1\u7500"+
    "\0\u0c00\1\u7540\1\u7580\0\u0c00\1\u75c0\1\u7600\0\u0c00\0\u0c00"+
    "\1\u7640\0\u0c00\0\u0c00\1\u7680\0\u0c00\1\u76c0\1\u7700\1\u7740"+
    "\1\u7780\1\u77c0\1\u7800\1\u7840\1\u7880\0\u0c00\0\u0c00\0\u0c00"+
    "\1\u78c0\1\u7900\1\u7940\1\u7980\1\u79c0\1\u7a00\1\u7a40\1\u7a80"+
    "\1\u7ac0\1\u7b00\0\u0c00\1\u7b40\1\u7b80\0\u0c00\0\u0c00\1\u7bc0"+
    "\1\u7c00\1\u7c40\1\u7c80\1\u7cc0\1\u7d00\1\u7d40\1\u7d80\1\u7dc0"+
    "\1\u7e00\1\u7e40\1\u7e80\1\u7ec0\1\u7f00\1\u7f40\1\u7f80\1\u7fc0"+
    "\1\u8000\0\u0c00\1\u8040\0\u0c00\1\u8080\0\u0c00\1\u80c0\0\u0c00"+
    "\1\u8100\1\u8140\1\u8180\1\u81c0\1\u8200\0\u0c00\0\u0c00\1\u8240"+
    "\1\u8280\1\u82c0\1\u8300\1\u8340\1\u8380\1\u83c0\1\u8400\1\u8440"+
    "\1\u8480\1\u84c0\1\u8500\0\u0c00\0\u0c00\0\u0c00\0\u0c00\1\u8540"+
    "\0\u0c00\0\u0c00\1\u8580\1\u85c0\1\u8600\1\u8640\0\u0c00\1\u8680"+
    "\1\u86c0\0\u0c00\1\u8700\0\u0c00\1\u8740\1\u8780\0\u0c00\0\u0c00"+
    "\0\u0c00\0\u0c00\0\u0c00\0\u0c00\1\u87c0\0\u0c00\0\u0c00\0\u0c00"+
    "\1\u8800\1\u8840\1\u8880\1\u88c0\1\u8900\1\u8940\1\u8980\1\u89c0"+
    "\0\u0c00\1\u8a00\1\u8a40\1\u8a80\1\u8ac0\0\u0c00\0\u0c00\0\u0c00"+
    "\1\u8b00\1\u8b40\1\u8b80\1\u8bc0\0\u0c00\1\u8c00\1\u8c40\0\u0c00"+
    "\1\u8c80\0\u0c00\0\u0c00\0\u0c00\0\u0c00\0\u0c00\0\u0c00\1\u8cc0"+
    "\0\u0c00\1\u8d00\1\u8d40\1\u8d80\1\u8dc0\1\u8e00\1\u8e40";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1847];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\0\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\0\1\55\1\0"+
    "\1\56\3\0\1\57\1\60\1\2\2\0\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\0\1\2\64\0"+
    "\1\2\24\0\2\70\1\71\2\0\1\72\1\0\1\73"+
    "\1\0\1\74\4\0\1\75\13\0\1\76\1\77\4\0"+
    "\1\100\1\101\37\0\1\70\1\71\4\0\1\73\1\0"+
    "\1\74\21\0\1\77\4\0\1\100\31\0\1\102\30\0"+
    "\1\103\47\0\1\104\6\0\1\105\7\0\1\106\4\0"+
    "\1\107\16\0\1\110\1\0\1\111\40\0\1\112\25\0"+
    "\1\113\10\0\1\114\31\0\1\115\74\0\1\116\1\117"+
    "\1\0\1\120\1\121\2\0\1\122\7\0\1\123\1\0"+
    "\1\124\3\0\1\125\1\126\5\0\1\127\44\0\1\130"+
    "\17\0\1\131\6\0\1\132\20\0\1\133\2\0\1\134"+
    "\3\0\1\135\20\0\1\117\1\0\1\120\1\121\2\0"+
    "\1\122\11\0\1\124\56\0\1\136\1\137\1\0\1\140"+
    "\1\141\1\0\1\142\1\143\1\144\2\0\1\145\2\0"+
    "\1\146\1\147\1\150\1\151\3\0\1\152\1\153\1\154"+
    "\1\155\1\0\1\156\1\0\1\157\6\0\1\160\1\161"+
    "\2\0\1\162\1\163\1\164\1\165\26\0\1\137\1\0"+
    "\1\140\1\141\2\0\1\143\1\144\2\0\1\145\4\0"+
    "\1\150\1\151\6\0\1\155\13\0\1\161\2\0\1\162"+
    "\1\0\1\164\27\0\1\166\1\0\1\167\3\0\1\170"+
    "\1\171\4\0\1\172\3\0\1\173\1\0\1\174\54\0"+
    "\1\175\1\176\1\0\1\177\2\0\1\200\1\201\1\202"+
    "\6\0\1\203\1\0\1\204\3\0\1\205\6\0\1\206"+
    "\44\0\1\176\1\0\1\177\3\0\1\201\1\202\10\0"+
    "\1\204\56\0\1\207\1\166\1\0\1\167\2\0\1\210"+
    "\1\170\1\171\3\0\1\211\1\172\1\0\1\212\1\0"+
    "\1\173\1\0\1\174\1\213\1\214\6\0\1\215\43\0"+
    "\1\216\1\217\11\0\1\220\2\0\1\221\1\0\1\222"+
    "\2\0\1\223\1\224\2\0\1\225\1\226\1\0\1\227"+
    "\3\0\1\230\2\0\1\231\1\0\1\232\1\233\2\0"+
    "\1\234\1\235\1\236\1\237\26\0\1\240\1\0\1\241"+
    "\1\242\1\243\1\0\1\244\11\0\1\245\57\0\1\217"+
    "\11\0\1\220\4\0\1\222\2\0\1\223\4\0\1\246"+
    "\5\0\1\230\5\0\1\233\2\0\1\234\1\0\1\236"+
    "\31\0\1\247\1\250\2\0\1\251\11\0\1\252\33\0"+
    "\1\253\22\0\1\254\1\255\1\0\1\247\1\250\2\0"+
    "\1\251\7\0\1\256\1\0\1\252\3\0\1\257\1\260"+
    "\5\0\1\261\43\0\1\262\1\130\15\0\1\263\1\0"+
    "\1\131\6\0\1\132\1\0\1\264\16\0\1\133\1\265"+
    "\1\0\1\134\1\0\1\266\1\0\1\135\1\267\27\0"+
    "\2\112\22\0\1\270\2\0\1\113\10\0\1\114\1\271"+
    "\25\0\1\272\1\240\1\273\1\274\1\242\1\243\1\0"+
    "\1\244\7\0\1\275\1\0\1\245\3\0\1\244\1\276"+
    "\5\0\1\277\44\0\1\300\1\0\1\301\1\302\14\0"+
    "\1\303\57\0\1\304\1\0\1\305\1\306\2\0\1\307"+
    "\11\0\1\310\1\0\1\311\4\0\1\312\47\0\1\313"+
    "\1\300\1\0\1\301\13\0\1\314\1\0\1\303\12\0"+
    "\1\315\43\0\1\316\1\304\1\0\1\305\1\306\2\0"+
    "\1\307\7\0\1\317\1\0\1\310\1\0\1\311\1\320"+
    "\1\321\1\322\1\0\1\312\1\0\1\323\1\0\1\324"+
    "\47\0\1\104\6\0\1\105\2\0\1\325\4\0\1\106"+
    "\1\326\1\0\1\327\1\0\1\107\1\0\1\330\14\0"+
    "\1\110\1\331\1\111\1\332\25\0\1\333\1\334\1\0"+
    "\1\335\1\336\2\0\1\337\7\0\1\340\1\0\1\341"+
    "\3\0\1\342\1\343\5\0\1\344\44\0\1\345\1\0"+
    "\1\346\1\347\2\0\1\350\71\0\1\351\1\0\1\352"+
    "\1\353\2\0\1\354\11\0\1\355\1\0\1\356\55\0"+
    "\1\334\1\0\1\335\1\336\2\0\1\337\11\0\1\341"+
    "\56\0\1\357\1\360\1\0\1\361\1\347\2\0\1\350"+
    "\15\0\1\362\1\363\5\0\1\364\43\0\1\365\1\351"+
    "\1\0\1\352\1\353\2\0\1\354\7\0\1\366\1\0"+
    "\1\355\1\0\1\356\1\367\1\370\1\371\5\0\1\372"+
    "\46\0\1\373\1\374\1\0\1\375\1\376\1\377\6\0"+
    "\1\u0100\1\0\1\u0101\1\0\1\u0102\1\u0103\1\u0104\1\u0105"+
    "\1\0\1\u0106\1\0\1\u0107\1\0\1\u0108\46\0\1\u0109"+
    "\1\374\2\0\1\376\1\377\10\0\1\u0101\1\0\1\u0102"+
    "\4\0\1\u0106\50\0\1\u010a\5\0\1\u010b\70\0\1\u010c"+
    "\1\u010a\5\0\1\u010b\15\0\1\u010d\53\0\1\u010e\1\0"+
    "\1\u010f\1\u0110\2\0\1\u0111\1\u0112\10\0\1\u0113\56\0"+
    "\1\u0114\1\u010e\1\0\1\u010f\2\0\1\u0115\1\u0116\1\u0112"+
    "\6\0\1\u0117\1\0\1\u0113\3\0\1\u0118\6\0\1\u0119"+
    "\44\0\1\u011a\2\0\1\u011b\2\0\1\u011c\11\0\1\u011d"+
    "\56\0\1\u011e\1\u011a\2\0\1\u011b\2\0\1\u011c\7\0"+
    "\1\u011f\1\0\1\u011d\3\0\1\u0120\1\u0121\72\0\1\u0122"+
    "\75\0\1\u0123\1\0\1\u0122\62\0\1\u0124\21\0\1\u0125"+
    "\55\0\1\u0124\205\0\1\u0126\76\0\1\u0126\135\0\1\u0127"+
    "\50\0\1\u0128\127\0\1\u0129\54\0\1\u012a\61\0\1\u012b"+
    "\102\0\1\u012c\1\u012d\22\0\1\u012e\5\0\1\u012f\44\0"+
    "\1\u0130\4\0\1\u0131\22\0\1\u0132\1\0\1\u0133\40\0"+
    "\1\u0134\121\0\1\u0135\74\0\1\u0136\64\0\1\u0137\110\0"+
    "\1\u0138\114\0\1\u0139\54\0\1\u013a\73\0\1\u013b\120\0"+
    "\1\u013c\100\0\1\u013d\52\0\1\u013e\104\0\1\u013f\15\0"+
    "\1\u0140\62\0\1\u013f\5\0\1\u0140\63\0\1\u0141\5\0"+
    "\1\u0142\1\u0143\1\0\1\u0144\5\0\1\u0145\25\0\1\u0146"+
    "\46\0\1\u0147\30\0\1\u0148\51\0\1\u0149\4\0\1\u014a"+
    "\65\0\1\u014b\5\0\1\u014c\23\0\1\u014d\42\0\1\u014b"+
    "\7\0\1\u014e\23\0\1\u014f\54\0\1\u0150\5\0\1\u0151"+
    "\74\0\1\u0152\22\0\1\u0153\36\0\1\u0154\2\0\1\u0144"+
    "\1\0\1\u0143\5\0\1\u0155\1\0\1\u0156\23\0\1\u0157"+
    "\65\0\1\u0158\51\0\1\u0159\74\0\1\u015a\77\0\1\u015b"+
    "\30\0\1\u015c\24\0\1\u015d\21\0\1\u015e\134\0\1\u015f"+
    "\65\0\1\u0160\17\0\1\u0161\6\0\1\u0162\46\0\1\u0163"+
    "\20\0\1\u0164\6\0\1\u0165\37\0\1\u0166\10\0\1\u0167"+
    "\112\0\1\u0168\4\0\1\u0169\26\0\1\u016a\33\0\1\u016b"+
    "\73\0\1\u016c\13\0\1\u016d\7\0\1\u016e\24\0\1\u016f"+
    "\1\0\1\u0170\3\0\1\u0171\74\0\1\u0172\16\0\1\u0173"+
    "\100\0\1\u0174\1\0\1\u0175\100\0\1\u0176\2\0\1\u0177"+
    "\6\0\1\u0178\57\0\1\u0179\76\0\1\u017a\7\0\1\u017b"+
    "\5\0\1\u0178\73\0\1\u017c\10\0\1\u017d\12\0\1\u017e"+
    "\64\0\1\u017f\6\0\1\u0169\44\0\1\u0180\63\0\1\u0181"+
    "\130\0\1\u0182\72\0\1\u0183\3\0\1\u0184\44\0\1\u0185"+
    "\100\0\1\u0186\77\0\1\u0187\76\0\1\u0188\120\0\1\u0189"+
    "\75\0\1\u018a\103\0\1\u018b\14\0\1\u018c\57\0\1\u018d"+
    "\100\0\1\u018e\6\0\1\u018f\20\0\1\u0190\27\0\1\u0191"+
    "\1\0\1\u0192\3\0\1\u0193\11\0\1\u0194\1\0\1\u0195"+
    "\57\0\1\u0196\3\0\1\u0197\120\0\1\u0198\6\0\1\u0199"+
    "\47\0\1\u019a\11\0\1\u019b\67\0\1\u019c\4\0\1\u019d"+
    "\73\0\1\u019e\1\u019f\135\0\1\u01a0\26\0\1\u01a1\1\0"+
    "\1\u01a2\14\0\1\u01a3\5\0\1\u01a4\6\0\1\u01a5\64\0"+
    "\1\u01a6\6\0\1\u01a7\50\0\1\u01a8\1\0\1\u01a9\1\0"+
    "\1\u01a2\1\0\1\u01aa\11\0\1\u01ab\110\0\1\u01ac\75\0"+
    "\1\u01ad\66\0\1\u01ae\12\0\1\u01af\117\0\1\u01b0\51\0"+
    "\1\u01b1\10\0\1\u01b2\42\0\1\u01b3\16\0\1\u01b4\4\0"+
    "\1\u01b5\1\u01b6\6\0\1\u01b7\70\0\1\u01b8\6\0\1\u0196"+
    "\75\0\1\u01b9\7\0\1\u01ba\54\0\1\u01bb\5\0\1\u01bc"+
    "\71\0\1\u01bd\12\0\1\u01be\17\0\1\u01bf\54\0\1\u01c0"+
    "\74\0\1\u01c1\76\0\1\u01c2\64\0\1\u01c3\75\0\1\u01c4"+
    "\112\0\1\u01c5\65\0\1\u01c6\3\0\1\u01c7\7\0\1\u01c8"+
    "\72\0\1\u01c9\5\0\1\u01ca\1\u01c6\71\0\1\u01cb\75\0"+
    "\1\u01cc\12\0\1\u01cd\63\0\1\u01ce\15\0\1\u01cf\51\0"+
    "\1\u01d0\47\0\1\u01d1\51\0\1\u01d2\27\0\1\u01d3\37\0"+
    "\1\u01d4\74\0\1\u01d5\133\0\1\u01d6\100\0\1\u01d7\32\0"+
    "\1\u01d8\1\0\1\u01d9\5\0\1\u01da\22\0\1\u01db\21\0"+
    "\1\u01dc\21\0\1\u01d9\13\0\1\u01da\15\0\1\u01dd\4\0"+
    "\1\u01db\17\0\1\u01de\67\0\1\u01df\64\0\1\u01e0\12\0"+
    "\1\u01e1\40\0\1\u01e2\31\0\1\u01e3\45\0\1\u01e4\136\0"+
    "\1\u01e5\43\0\1\u01cc\12\0\1\u01cf\53\0\1\u01e6\131\0"+
    "\1\u01e7\53\0\1\u01e8\23\0\1\u01e9\10\0\1\u01ea\67\0"+
    "\1\u01eb\43\0\1\u01ec\152\0\1\u01ed\75\0\1\u01ee\65\0"+
    "\1\u01ef\46\0\1\u01f0\27\0\1\u01e9\6\0\1\u01f1\70\0"+
    "\1\u01f2\64\0\1\u01f3\106\0\1\u01f4\53\0\1\u01f5\113\0"+
    "\1\u01f6\77\0\1\u01f7\7\0\1\u01f8\30\0\1\u01f9\36\0"+
    "\1\u01fa\115\0\1\u01fb\66\0\1\u01fc\100\0\1\u01fd\116\0"+
    "\1\u01fe\36\0\1\u01ff\71\0\1\u0200\32\0\1\u01e0\12\0"+
    "\1\u01e1\100\0\1\u0201\36\0\1\u0202\31\0\1\u0203\70\0"+
    "\1\u0204\4\0\1\u0205\10\0\1\u0206\30\0\1\u0207\100\0"+
    "\1\u0208\1\u0209\46\0\1\u020a\74\0\1\u020b\43\0\1\u020c"+
    "\2\0\1\u020d\66\0\1\u020e\2\0\1\u020f\10\0\1\u0210"+
    "\5\0\1\u0211\22\0\1\u0212\26\0\1\u0213\1\u0214\144\0"+
    "\1\u0215\43\0\1\u0216\74\0\1\u0217\36\0\1\u0218\27\0"+
    "\1\u0219\101\0\1\u021a\130\0\1\u021b\57\0\1\u021c\12\0"+
    "\1\u021d\52\0\1\u021e\23\0\1\u021f\27\0\1\u0220\32\0"+
    "\1\u0221\12\0\1\u0222\1\u0223\5\0\1\u0224\22\0\1\u0225"+
    "\32\0\1\u0226\40\0\1\u0227\25\0\1\u0228\113\0\1\u0216"+
    "\135\0\1\u0229\61\0\1\u022a\71\0\1\u022b\5\0\1\u022c"+
    "\51\0\1\u022d\110\0\1\u022e\104\0\1\u0136\114\0\1\u0139"+
    "\54\0\1\u022f\106\0\1\u013b\76\0\1\u0230\76\0\1\u0231"+
    "\57\0\1\u0232\17\0\1\u0233\55\0\1\u0234\147\0\1\u0235"+
    "\52\0\1\u0236\76\0\1\u0237\126\0\1\u0238\25\0\1\u0239"+
    "\123\0\1\u023a\7\0\1\u023b\55\0\1\u023c\10\0\1\u023d"+
    "\5\0\1\u023e\60\0\1\u023f\25\0\1\u0240\3\0\1\u0241"+
    "\63\0\1\u0242\77\0\1\u0243\16\0\1\u0244\70\0\1\u0245"+
    "\42\0\1\u0246\7\0\1\u0247\7\0\1\u0248\67\0\1\u0249"+
    "\73\0\1\u024a\11\0\1\u024b\14\0\1\u024c\71\0\1\u024d"+
    "\5\0\1\u024e\12\0\1\u024f\27\0\1\u0250\17\0\1\u0251"+
    "\67\0\1\u0252\12\0\1\u0253\65\0\1\u023c\10\0\1\u023d"+
    "\5\0\1\u0254\51\0\1\u0255\34\0\1\u0240\3\0\1\u0241"+
    "\65\0\1\u0256\15\0\1\u0257\61\0\1\u0258\101\0\1\u0259"+
    "\1\u0240\5\0\1\u025a\71\0\1\u0245\74\0\1\u025b\6\0"+
    "\1\u024e\10\0\1\u025c\25\0\1\u025d\16\0\1\u025e\77\0"+
    "\1\u025f\5\0\1\u024a\13\0\1\u024c\54\0\1\u0260\77\0"+
    "\1\u0261\5\0\1\u0262\7\0\1\u0263\60\0\1\u0264\2\0"+
    "\1\u0265\7\0\1\u0266\20\0\1\u0267\41\0\1\u0268\7\0"+
    "\1\u0269\54\0\1\u026a\16\0\1\u026b\103\0\1\u026c\55\0"+
    "\1\u026d\17\0\1\u026e\74\0\1\u026f\5\0\1\u0270\1\0"+
    "\1\u0271\3\0\1\u0272\51\0\1\u0273\6\0\1\u026f\7\0"+
    "\1\u0274\4\0\1\u0275\56\0\1\u0276\115\0\1\u0277\76\0"+
    "\1\u0278\71\0\1\u0279\5\0\1\u027a\56\0\1\u027b\1\u027c"+
    "\2\0\1\u027d\115\0\1\u027e\1\u027f\5\0\1\u0280\57\0"+
    "\1\u0281\12\0\1\u0282\2\0\1\u0283\17\0\1\u0284\42\0"+
    "\1\u0264\2\0\1\u0285\7\0\1\u0266\20\0\1\u0267\77\0"+
    "\1\u0286\33\0\1\u0287\144\0\1\u0288\27\0\1\u0287\125\0"+
    "\1\u0289\13\0\1\u028a\6\0\1\u028b\37\0\1\u028c\14\0"+
    "\1\u028d\56\0\1\u028e\102\0\1\u028f\36\0\1\u0290\1\0"+
    "\1\u0291\27\0\1\u0292\106\0\1\u0293\1\u0294\7\0\1\u0295"+
    "\106\0\1\u0296\10\0\1\u0297\13\0\1\u0298\54\0\1\u0299"+
    "\55\0\1\u028f\36\0\1\u0290\37\0\1\u029a\4\0\1\u029b"+
    "\5\0\1\u029c\64\0\1\u029d\40\0\1\u029e\43\0\1\u029f"+
    "\13\0\1\u02a0\111\0\1\u02a1\4\0\1\u02a2\51\0\1\u02a3"+
    "\55\0\1\u02a4\52\0\1\u02a5\43\0\1\u02a6\122\0\1\u02a7"+
    "\6\0\1\u02a8\54\0\1\u02a9\50\0\1\u02aa\55\0\1\u02ab"+
    "\45\0\1\u02ac\76\0\1\u02ad\100\0\1\u02ae\54\0\1\u02af"+
    "\76\0\1\u02b0\120\0\1\u02b1\75\0\1\u02b2\123\0\1\u02b3"+
    "\100\0\1\u02b4\42\0\1\u02b5\77\0\1\u02b6\71\0\1\u02b7"+
    "\5\0\1\u02b8\113\0\1\u02b9\101\0\1\u02ba\77\0\1\u02bb"+
    "\52\0\1\u02bc\24\0\1\u02bd\76\0\1\u02be\76\0\1\u02bf"+
    "\100\0\1\u02c0\62\0\1\u02c1\141\0\1\u02c2\27\0\1\u02c3"+
    "\103\0\1\u02c4\113\0\1\u02c5\101\0\1\u02c6\66\0\1\u02c7"+
    "\100\0\1\u02c8\76\0\1\u02c9\74\0\1\u02ca\127\0\1\u02cb"+
    "\76\0\1\u02cc\44\0\1\u02cd\3\0\1\u02ce\120\0\1\u02cf"+
    "\110\0\1\u02d0\106\0\1\u02d1\65\0\1\u02d0\110\0\1\u02d2"+
    "\55\0\1\u02ce\6\0\1\u02cd\75\0\1\u02d3\107\0\1\u02d4"+
    "\76\0\1\u02d5\54\0\1\u02d6\72\0\1\u02d7\77\0\1\u02d8"+
    "\113\0\1\u02d9\62\0\1\u02da\70\0\1\u02db\136\0\1\u02dc"+
    "\6\0\1\u02dd\4\0\1\u02de\46\0\1\u02df\55\0\1\u02e0"+
    "\101\0\1\u02e1\117\0\1\u02e2\55\0\1\u02e3\5\0\1\u02e4"+
    "\122\0\1\u02e5\102\0\1\u02e6\5\0\1\u02e7\52\0\1\u02e8"+
    "\111\0\1\u02e9\107\0\1\u02ea\3\0\1\u02eb\46\0\1\u02ec"+
    "\73\0\1\u02ed\103\0\1\u02ee\74\0\1\u02ef\113\0\1\u02f0"+
    "\25\0\1\u02f1\51\0\1\u02f2\1\u02f3\103\0\1\u02f4\51\0"+
    "\1\u02f5\103\0\1\u02f6\113\0\1\u02f7\25\0\1\u02f8\35\0"+
    "\1\u02f3\13\0\1\u02f9\112\0\1\u02fa\10\0\1\u02fb\33\0"+
    "\1\u02fc\15\0\1\u02fd\75\0\1\u02fe\14\0\1\u02ff\104\0"+
    "\1\u0300\6\0\1\u0301\54\0\1\u0302\71\0\1\u0303\103\0"+
    "\1\u0304\4\0\1\u0305\56\0\1\u0302\111\0\1\u0306\111\0"+
    "\1\u0307\100\0\1\u0308\70\0\1\u0309\60\0\1\u02ef\115\0"+
    "\1\u030a\5\0\1\u030b\62\0\1\u030c\76\0\1\u030d\110\0"+
    "\1\u02ed\70\0\1\u02ee\106\0\1\u030e\61\0\1\u030f\126\0"+
    "\1\u0310\102\0\1\u0311\103\0\1\u0312\100\0\1\u0313\40\0"+
    "\1\u0314\77\0\1\u0315\111\0\1\u0316\122\0\1\u0317\42\0"+
    "\1\u0318\103\0\1\u0319\76\0\1\u031a\10\0\1\u031b\66\0"+
    "\1\u031c\66\0\1\u031d\3\0\1\u031e\4\0\1\u031f\5\0"+
    "\1\u0320\72\0\1\u0321\73\0\1\u0322\120\0\1\u0323\20\0"+
    "\1\u0324\56\0\1\u0325\77\0\1\u0326\56\0\1\u0327\71\0"+
    "\1\u0328\123\0\1\u0329\70\0\1\u032a\70\0\1\u0329\103\0"+
    "\1\u032b\122\0\1\u032c\104\0\1\u032d\52\0\1\u032e\105\0"+
    "\1\u032f\25\0\1\u0330\36\0\1\u0331\15\0\1\u0332\115\0"+
    "\1\u0333\62\0\1\u0334\13\0\1\u0335\77\0\1\u0336\45\0"+
    "\1\u0337\5\0\1\u0332\102\0\1\u0338\25\0\1\u0330\41\0"+
    "\1\u032e\116\0\1\u0339\75\0\1\u033a\115\0\1\u0333\63\0"+
    "\1\u0334\10\0\1\u033b\75\0\1\u033c\63\0\1\u033d\77\0"+
    "\1\u033e\63\0\1\u031a\12\0\1\u033f\71\0\1\u0321\106\0"+
    "\1\u0340\52\0\1\u0341\10\0\1\u0342\15\0\1\u0320\61\0"+
    "\1\u0343\120\0\1\u0344\17\0\1\u0345\57\0\1\u0325\77\0"+
    "\1\u0346\45\0\1\u0347\124\0\1\u0327\115\0\1\u0348\61\0"+
    "\1\u0349\70\0\1\u034a\100\0\1\u034b\130\0\1\u034c\76\0"+
    "\1\u034d\60\0\1\u034e\101\0\1\u034f\120\0\1\u0350\25\0"+
    "\1\u0351\101\0\1\u0352\74\0\1\u0353\133\0\1\u0354\122\0"+
    "\1\u0355\41\0\1\u0356\142\0\1\u01cf\32\0\1\u0357\110\0"+
    "\1\u0358\56\0\1\u0359\122\0\1\u035a\72\0\1\u035b\106\0"+
    "\1\u035c\46\0\1\u035d\124\0\1\u035e\101\0\1\u035f\60\0"+
    "\1\u0360\65\0\1\u0361\114\0\1\u0362\61\0\1\u0363\106\0"+
    "\1\u0364\77\0\1\u0365\135\0\1\u0366\33\0\1\u0367\106\0"+
    "\1\u0368\76\0\1\u0369\75\0\1\u036a\132\0\1\u036b\46\0"+
    "\1\u036c\137\0\1\u036d\34\0\1\u036e\132\0\1\u036f\65\0"+
    "\1\u0370\61\0\1\u0371\132\0\1\u0372\105\0\1\u0373\55\0"+
    "\1\u0374\76\0\1\u036c\107\0\1\u0375\50\0\1\u0376\71\0"+
    "\1\u0377\134\0\1\u0378\12\0\1\u0379\5\0\1\u037a\45\0"+
    "\1\u037b\53\0\1\u037c\133\0\1\u037d\67\0\1\u037e\53\0"+
    "\1\u037f\24\0\1\u0380\54\0\1\u02c4\114\0\1\u0381\105\0"+
    "\1\u0364\77\0\1\u0382\123\0\1\u0383\30\0\1\u036a\75\0"+
    "\1\u0384\105\0\1\u0368\143\0\1\u0383\52\0\1\u0385\120\0"+
    "\1\u0386\102\0\1\u0387\64\0\1\u0388\62\0\1\u0389\65\0"+
    "\1\u038a\111\0\1\u0383\63\0\1\u038b\141\0\1\u038c\53\0"+
    "\1\u038d\64\0\1\u0291\101\0\1\u038e\100\0\1\u038f\73\0"+
    "\1\u0390\120\0\1\u0391\72\0\1\u0392\125\0\1\u0393\41\0"+
    "\1\u0394\77\0\1\u0395\73\0\1\u0396\105\0\1\u0397\134\0"+
    "\1\u0387\27\0\1\u0398\145\0\1\u038c\46\0\1\u0399\121\0"+
    "\1\u039a\63\0\1\u039b\60\0\1\u0291\102\0\1\u039c\112\0"+
    "\1\u039d\71\0\1\u039e\106\0\1\u0390\70\0\1\u0394\77\0"+
    "\1\u039f\106\0\1\u03a0\124\0\1\u03a1\41\0\1\u03a2\107\0"+
    "\1\u03a3\105\0\1\u03a4\72\0\1\u03a5\124\0\1\u03a6\25\0"+
    "\1\u03a7\116\0\1\u03a8\101\0\1\u03a9\114\0\1\u03aa\101\0"+
    "\1\u03ab\52\0\1\u03ac\73\0\1\u03ad\3\0\1\u03ae\125\0"+
    "\1\u03af\74\0\1\u03b0\57\0\1\u03b1\6\0\1\u03b2\70\0"+
    "\1\u03b3\116\0\1\u03b4\103\0\1\u03b5\46\0\1\u03b6\27\0"+
    "\1\u03b7\52\0\1\u03b8\115\0\1\u03b9\60\0\1\u03ba\100\0"+
    "\1\u03bb\114\0\1\u03bc\50\0\1\u03bd\105\0\1\u03be\135\0"+
    "\1\u03bf\42\0\1\u03c0\70\0\1\u03c1\111\0\1\u03c2\70\0"+
    "\1\u03c3\37\0\1\u03c4\63\0\1\u03c5\70\0\1\u03c6\106\0"+
    "\1\u03c7\123\0\1\u03c8\31\0\1\u03c9\26\0\1\u03ca\60\0"+
    "\1\u03cb\112\0\1\u03cc\71\0\1\u03cd\54\0\1\u03ce\124\0"+
    "\1\u03cf\104\0\1\u03bc\71\0\1\u03cd\71\0\1\u03d0\113\0"+
    "\1\u03c5\64\0\1\u03d1\112\0\1\u03d2\123\0\1\u03d3\47\0"+
    "\1\u03d4\14\0\1\u03d5\52\0\1\u03d6\67\0\1\u03c0\71\0"+
    "\1\u03d7\145\0\1\u03d8\52\0\1\u03d9\125\0\1\u03da\66\0"+
    "\1\u03db\72\0\1\u03dc\55\0\1\u03dd\71\0\1\u03de\130\0"+
    "\1\u03df\10\0\1\u03e0\34\0\1\u03e1\23\0\1\u03e2\66\0"+
    "\1\u03e3\114\0\1\u03e4\13\0\1\u03e5\34\0\1\u03e6\21\0"+
    "\1\u03e7\54\0\1\u03e8\24\0\1\u03e9\70\0\1\u03ea\110\0"+
    "\1\u03eb\63\0\1\u03ec\65\0\1\u03ed\5\0\1\u03ee\110\0"+
    "\1\u03eb\100\0\1\u03ef\75\0\1\u03f0\76\0\1\u03f1\106\0"+
    "\1\u03dd\52\0\1\u03f2\143\0\1\u03f3\53\0\1\u03f4\100\0"+
    "\1\u03f5\32\0\1\u03f6\42\0\1\u03f7\36\0\1\u03f8\50\0"+
    "\1\u03f9\113\0\1\u03fa\53\0\1\u03fb\130\0\1\u03fc\70\0"+
    "\1\u03db\71\0\1\u03fd\45\0\1\u03fe\45\0\1\u03da\66\0"+
    "\1\u03ff\102\0\1\u03ff\41\0\1\u0400\107\0\1\u0401\137\0"+
    "\1\u0402\45\0\1\u0403\57\0\1\u0404\121\0\1\u0405\66\0"+
    "\1\u0406\131\0\1\u0407\104\0\1\u0408\40\0\1\u0409\66\0"+
    "\1\u040a\105\0\1\u040b\124\0\1\u040c\61\0\1\u040d\140\0"+
    "\1\u040e\72\0\1\u040f\36\0\1\u0410\66\0\1\u0411\124\0"+
    "\1\u0412\63\0\1\u0413\131\0\1\u0414\53\0\1\u0415\60\0"+
    "\1\u0416\106\0\1\u0417\77\0\1\u0418\3\0\1\u0419\76\0"+
    "\1\u041a\125\0\1\u041b\46\0\1\u041c\77\0\1\u041d\115\0"+
    "\1\u0417\70\0\1\u041e\6\0\1\u0418\77\0\1\u041d\107\0"+
    "\1\u041f\67\0\1\u0420\63\0\1\u0421\67\0\1\u0422\76\0"+
    "\1\u0423\106\0\1\u0424\34\0\1\u0425\60\0\1\u0426\15\0"+
    "\1\u0427\47\0\1\u0428\102\0\1\u0429\105\0\1\u042a\76\0"+
    "\1\u042b\120\0\1\u042c\56\0\1\u042d\4\0\1\u042e\100\0"+
    "\1\u042f\115\0\1\u0430\37\0\1\u0431\133\0\1\u0432\60\0"+
    "\1\u0433\5\0\1\u0434\100\0\1\u0435\114\0\1\u0436\54\0"+
    "\1\u0437\64\0\1\u0438\76\0\1\u0439\111\0\1\u043a\114\0"+
    "\1\u043b\57\0\1\u043c\60\0\1\u043d\100\0\1\u043e\7\0"+
    "\1\u0438\74\0\1\u043f\71\0\1\u0440\105\0\1\u0441\102\0"+
    "\1\u0442\115\0\1\u0443\72\0\1\u0444\57\0\1\u0445\74\0"+
    "\1\u0446\1\0\1\u0447\76\0\1\u0448\3\0\1\u0447\126\0"+
    "\1\u0445\75\0\1\u0449\71\0\1\u044a\53\0\1\u044b\124\0"+
    "\1\u0441\77\0\1\u043f\63\0\1\u044c\101\0\1\u044d\114\0"+
    "\1\u044e\70\0\1\u044f\66\0\1\u0450\76\0\1\u0451\130\0"+
    "\1\u0452\110\0\1\u0453\33\0\1\u0454\77\0\1\u0455\105\0"+
    "\1\u0456\114\0\1\u0457\51\0\1\u0458\122\0\1\u0459\77\0"+
    "\1\u045a\60\0\1\u045b\76\0\1\u0458\101\0\1\u045c\77\0"+
    "\1\u045d\100\0\1\u045b\105\0\1\u045e\63\0\1\u045f\113\0"+
    "\1\u0460\62\0\1\u0461\147\0\1\u0462\51\0\1\u0463\25\0"+
    "\1\u0464\41\0\1\u045e\71\0\1\u045f\105\0\1\u0460\73\0"+
    "\1\u0465\71\0\1\u0466\147\0\1\u0467\77\0\1\u0468\100\0"+
    "\1\u0469\77\0\1\u046a\52\0\1\u046b\52\0\1\u046c\140\0"+
    "\1\u046d\51\0\1\u046e\114\0\1\u046f\105\0\1\u046d\41\0"+
    "\1\u0470\151\0\1\u0471\51\0\1\u0472\25\0\1\u0473\43\0"+
    "\1\u046e\113\0\1\u046f\75\0\1\u0474\101\0\1\u0475\117\0"+
    "\1\u0476\76\0\1\u0477\35\0\1\u0478\115\0\1\u0479\61\0"+
    "\1\u047a\115\0\1\u047a\110\0\1\u047b\64\0\1\u047c\67\0"+
    "\1\u047d\74\0\1\u047e\143\0\1\u047f\33\0\1\u0480\125\0"+
    "\1\u0481\50\0\1\u0482\113\0\1\u0483\63\0\1\u0484\77\0"+
    "\1\u0485\121\0\1\u0486\22\0\1\u0487\36\0\1\u0488\73\0"+
    "\1\u0489\141\0\1\u048a\30\0\1\u048b\102\0\1\u048b\101\0"+
    "\1\u048c\76\0\1\u048d\116\0\1\u048e\77\0\1\u048f\55\0"+
    "\1\u0490\104\0\1\u048d\76\0\1\u048f\77\0\1\u048e\115\0"+
    "\1\u0491\61\0\1\u0492\124\0\1\u0493\70\0\1\u0494\113\0"+
    "\1\u047b\62\0\1\u047c\114\0\1\u0481\63\0\1\u0485\76\0"+
    "\1\u0495\100\0\1\u0484\77\0\1\u0482\105\0\1\u0496\22\0"+
    "\1\u0497\37\0\1\u0498\106\0\1\u0489\124\0\1\u048a\33\0"+
    "\1\u0499\147\0\1\u049a\27\0\1\u0480\107\0\1\u049b\113\0"+
    "\1\u049c\75\0\1\u049d\56\0\1\u049e\115\0\1\u049f\53\0"+
    "\1\u04a0\110\0\1\u04a1\125\0\1\u04a2\50\0\1\u04a3\123\0"+
    "\1\u04a4\42\0\1\u04a5\104\0\1\u04a6\74\0\1\u04a7\110\0"+
    "\1\u04a8\135\0\1\u04a9\44\0\1\u04a8\133\0\1\u04aa\51\0"+
    "\1\u04ab\76\0\1\u04ab\63\0\1\u04ac\115\0\1\u04ac\62\0"+
    "\1\u04ad\72\0\1\u04ae\102\0\1\u04af\125\0\1\u04b0\55\0"+
    "\1\u04b1\74\0\1\u04b2\134\0\1\u04b3\63\0\1\u04b4\57\0"+
    "\1\u04b5\72\0\1\u04b6\124\0\1\u04b7\50\0\1\u04b8\122\0"+
    "\1\u01ec\76\0\1\u01ec\54\0\1\u04b9\133\0\1\u04ba\75\0"+
    "\1\u04bb\53\0\1\u04b5\107\0\1\u04bc\113\0\1\u04bd\64\0"+
    "\1\u04be\66\0\1\u04bf\116\0\1\u04c0\107\0\1\u04c1\114\0"+
    "\1\u04c2\27\0\1\u0454\77\0\1\u0455\113\0\1\u04c3\113\0"+
    "\1\u04c4\45\0\1\u04c5\131\0\1\u04c6\110\0\1\u04b3\45\0"+
    "\1\u04c7\113\0\1\u04c8\102\0\1\u04c9\77\0\1\u04ca\77\0"+
    "\1\u04cb\56\0\1\u04cc\134\0\1\u04cd\46\0\1\u04ce\74\0"+
    "\1\u04cf\70\0\1\u04d0\111\0\1\u04d1\71\0\1\u04d2\113\0"+
    "\1\u04d3\127\0\1\u04d4\35\0\1\u04d5\115\0\1\u04d6\104\0"+
    "\1\u04ca\77\0\1\u04d7\77\0\1\u04d8\63\0\1\u04ce\124\0"+
    "\1\u04d9\42\0\1\u04cf\110\0\1\u04da\132\0\1\u04db\27\0"+
    "\1\u04d2\122\0\1\u04dc\70\0\1\u04dd\61\0\1\u04de\123\0"+
    "\1\u043a\110\0\1\u04df\71\0\1\u04e0\103\0\1\u04e1\75\0"+
    "\1\u04e2\105\0\1\u04e3\47\0\1\u04e4\111\0\1\u04e5\101\0"+
    "\1\u04e6\104\0\1\u04e7\74\0\1\u04e8\61\0\1\u04e9\122\0"+
    "\1\u04ea\71\0\1\u04eb\72\0\1\u04ec\105\0\1\u04ed\114\0"+
    "\1\u04ee\40\0\1\u04ef\100\0\1\u04f0\100\0\1\u04f1\101\0"+
    "\1\u04f2\102\0\1\u04f3\70\0\1\u04f4\140\0\1\u04f5\104\0"+
    "\1\u04f6\40\0\1\u04f7\136\0\1\u04f8\35\0\1\u04f9\103\0"+
    "\1\u04fa\74\0\1\u04fb\140\0\1\u04fc\56\0\1\u04fd\56\0"+
    "\1\u04fe\124\0\1\u04ff\71\0\1\u0500\53\0\1\u04f1\104\0"+
    "\1\u0501\133\0\1\u0502\106\0\1\u0503\61\0\1\u0504\115\0"+
    "\1\u0505\57\0\1\u0506\72\0\1\u04fe\70\0\1\u0507\67\0"+
    "\1\u04fb\116\0\1\u0508\124\0\1\u0509\36\0\1\u050a\111\0"+
    "\1\u050b\60\0\1\u050c\74\0\1\u050d\101\0\1\u050e\135\0"+
    "\1\u050f\104\0\1\u0510\55\0\1\u0511\102\0\1\u0512\71\0"+
    "\1\u0513\114\0\1\u050f\106\0\1\u0514\55\0\1\u0511\74\0"+
    "\1\u0515\131\0\1\u0516\60\0\1\u0517\44\0\1\u0518\100\0"+
    "\1\u0519\147\0\1\u051a\57\0\1\u051b\61\0\1\u051c\102\0"+
    "\1\u051d\100\0\1\u051e\114\0\1\u051f\110\0\1\u0520\44\0"+
    "\1\u0521\136\0\1\u0522\35\0\1\u0523\142\0\1\u0522\52\0"+
    "\1\u0524\63\0\1\u0525\134\0\1\u0520\55\0\1\u0526\101\0"+
    "\1\u0527\51\0\1\u0528\100\0\1\u0529\45\0\1\u052a\43\0"+
    "\1\u052b\70\0\1\u052c\114\0\1\u052d\71\0\1\u052e\77\0"+
    "\1\u052f\77\0\1\u0530\65\0\1\u0531\77\0\1\u0532\105\0"+
    "\1\u0533\71\0\1\u0534\105\0\1\u0535\141\0\1\u0536\44\0"+
    "\1\u052b\107\0\1\u0537\70\0\1\u052d\105\0\1\u0533\52\0"+
    "\1\u0538\124\0\1\u0539\124\0\1\u053a\25\0\1\u053b\77\0"+
    "\1\u053c\115\0\1\u053d\77\0\1\u053e\71\0\1\u053f\76\0"+
    "\1\u0540\100\0\1\u0541\112\0\1\u0542\62\0\1\u053f\77\0"+
    "\1\u0543\115\0\1\u0542\100\0\1\u0540\55\0\1\u0544\130\0"+
    "\1\u0545\56\0\1\u0546\131\0\1\u0547\50\0\1\u0548\127\0"+
    "\1\u0549\32\0\1\u054a\76\0\1\u054b\124\0\1\u054c\61\0"+
    "\1\u054d\74\0\1\u054e\102\0\1\u054f\120\0\1\u0550\100\0"+
    "\1\u0551\55\0\1\u0552\126\0\1\u0553\67\0\1\u0554\76\0"+
    "\1\u0555\104\0\1\u0556\100\0\1\u0557\71\0\1\u0558\113\0"+
    "\1\u0559\45\0\1\u055a\115\0\1\u055b\61\0\1\u055c\71\0"+
    "\1\u055d\111\0\1\u055e\120\0\1\u055f\73\0\1\u0560\62\0"+
    "\1\u0561\73\0\1\u0562\77\0\1\u0563\122\0\1\u0564\75\0"+
    "\1\u0565\74\0\1\u0562\77\0\1\u0566\104\0\1\u0567\63\0"+
    "\1\u0561\71\0\1\u0568\74\0\1\u0569\143\0\1\u056a\47\0"+
    "\1\u056b\127\0\1\u056c\35\0\1\u056d\77\0\1\u056e\71\0"+
    "\1\u056f\126\0\1\u0570\73\0\1\u0571\77\0\1\u0572\76\0"+
    "\1\u0571\77\0\1\u0573\66\0\1\u0574\123\0\1\u0575\62\0"+
    "\1\u0576\71\0\1\u0577\135\0\1\u0578\64\0\1\u0579\101\0"+
    "\1\u057a\77\0\1\u057b\74\0\1\u057c\77\0\1\u057a\114\0"+
    "\1\u057d\66\0\1\u0579\47\0\1\u057e\127\0\1\u0575\55\0"+
    "\1\u057f\76\0\1\u0580\66\0\1\u0581\74\0\1\u0581\113\0"+
    "\1\u0582\74\0\1\u0583\107\0\1\u0584\100\0\1\u0584\56\0"+
    "\1\u0585\103\0\1\u0586\71\0\1\u0587\110\0\1\u0588\100\0"+
    "\1\u0589\73\0\1\u058a\71\0\1\u058b\3\0\1\u058c\115\0"+
    "\1\u058d\74\0\1\u058e\75\0\1\u058f\74\0\1\u058f\113\0"+
    "\1\u0590\74\0\1\u0591\64\0\1\u0588\104\0\1\u0592\106\0"+
    "\1\u058a\52\0\1\u0593\1\0\1\u058c\122\0\1\u0594\52\0"+
    "\1\u0595\133\0\1\u0585\62\0\1\u0596\101\0\1\u0597\71\0"+
    "\1\u0598\102\0\1\u0599\132\0\1\u059a\41\0\1\u059b\105\0"+
    "\1\u059c\74\0\1\u059b\100\0\1\u059d\132\0\1\u059e\37\0"+
    "\1\u059f\76\0\1\u059f\101\0\1\u05a0\102\0\1\u05a1\70\0"+
    "\1\u05a2\74\0\1\u05a3\120\0\1\u05a4\100\0\1\u05a5\64\0"+
    "\1\u05a6\71\0\1\u05a7\123\0\1\u05a8\117\0\1\u05a9\40\0"+
    "\1\u05aa\100\0\1\u05ab\102\0\1\u05ab\133\0\1\u05ac\36\0"+
    "\1\u05ad\74\0\1\u0568\73\0\1\u0569\147\0\1\u05ae\44\0"+
    "\1\u05af\132\0\1\u05b0\52\0\1\u05b1\77\0\1\u05b2\52\0"+
    "\1\u05b3\131\0\1\u05b4\63\0\1\u05b5\114\0\1\u05a8\62\0"+
    "\1\u05a6\63\0\1\u05a7\102\0\1\u05b6\77\0\1\u05b7\115\0"+
    "\1\u05b8\63\0\1\u05b9\102\0\1\u05ba\75\0\1\u05bb\101\0"+
    "\1\u05bc\123\0\1\u05bd\64\0\1\u05be\100\0\1\u05b8\55\0"+
    "\1\u05b6\77\0\1\u05b7\122\0\1\u05b9\63\0\1\u05bf\127\0"+
    "\1\u05c0\62\0\1\u05be\61\0\1\u05bb\102\0\1\u05c1\113\0"+
    "\1\u055c\52\0\1\u05c2\132\0\1\u05c3\75\0\1\u05c4\53\0"+
    "\1\u05c5\75\0\1\u05c6\117\0\1\u05c7\57\0\1\u05c8\103\0"+
    "\1\u05c9\142\0\1\u05ca\76\0\1\u05ca\53\0\1\u05c9\106\0"+
    "\1\u05cb\67\0\1\u05c7\107\0\1\u05cc\45\0\1\u05cd\146\0"+
    "\1\u05ce\40\0\1\u05cf\110\0\1\u05d0\123\0\1\u05d1\53\0"+
    "\1\u05d2\55\0\1\u05d3\134\0\1\u05d4\51\0\1\u05d5\127\0"+
    "\1\u05d6\62\0\1\u05d7\55\0\1\u05d8\117\0\1\u05d9\57\0"+
    "\1\u05da\150\0\1\u05db\36\0\1\u05dc\111\0\1\u05dd\54\0"+
    "\1\u05de\140\0\1\u05df\62\0\1\u05d2\72\0\1\u05d9\60\0"+
    "\1\u05e0\77\0\1\u05e1\123\0\1\u05e2\110\0\1\u05d6\50\0"+
    "\1\u05e3\127\0\1\u05e4\54\0\1\u05e5\122\0\1\u05e6\45\0"+
    "\1\u05e7\120\0\1\u05e8\52\0\1\u05e9\100\0\1\u05ea\105\0"+
    "\1\u05eb\71\0\1\u05ec\133\0\1\u05ed\70\0\1\u05ee\105\0"+
    "\1\u05ef\46\0\1\u05f0\134\0\1\u05ed\43\0\1\u05f1\74\0"+
    "\1\u05f2\76\0\1\u05f3\77\0\1\u05f4\125\0\1\u05f5\56\0"+
    "\1\u05f6\115\0\1\u05f7\100\0\1\u05f7\55\0\1\u05f6\136\0"+
    "\1\u05f8\54\0\1\u05f9\122\0\1\u05fa\42\0\1\u05fb\116\0"+
    "\1\u05fc\57\0\1\u05fd\103\0\1\u05fe\111\0\1\u03cd\76\0"+
    "\1\u05ff\107\0\1\u0600\52\0\1\u0601\145\0\1\u0602\41\0"+
    "\1\u0603\110\0\1\u0604\107\0\1\u0605\115\0\1\u0606\43\0"+
    "\1\u0603\110\0\1\u0607\102\0\1\u0600\101\0\1\u05fd\70\0"+
    "\1\u05fe\111\0\1\u0608\102\0\1\u0609\41\0\1\u060a\121\0"+
    "\1\u060b\101\0\1\u060c\77\0\1\u060d\101\0\1\u060e\77\0"+
    "\1\u060f\54\0\1\u0610\115\0\1\u0611\71\0\1\u0612\101\0"+
    "\1\u0613\101\0\1\u0614\66\0\1\u0615\66\0\1\u0616\105\0"+
    "\1\u0617\141\0\1\u0618\27\0\1\u0619\122\0\1\u061a\64\0"+
    "\1\u061b\66\0\1\u061c\124\0\1\u061d\124\0\1\u061e\25\0"+
    "\1\u061f\127\0\1\u0620\101\0\1\u0621\57\0\1\u0622\75\0"+
    "\1\u0623\115\0\1\u0624\60\0\1\u0625\126\0\1\u0626\43\0"+
    "\1\u0627\102\0\1\u0627\133\0\1\u0628\63\0\1\u0625\65\0"+
    "\1\u0629\135\0\1\u062a\41\0\1\u062b\77\0\1\u062c\73\0"+
    "\1\u062d\141\0\1\u062e\35\0\1\u062f\115\0\1\u0630\61\0"+
    "\1\u0630\100\0\1\u0631\117\0\1\u0632\57\0\1\u0633\102\0"+
    "\1\u0634\73\0\1\u0635\115\0\1\u0636\70\0\1\u0634\67\0"+
    "\1\u0631\123\0\1\u0632\53\0\1\u0633\71\0\1\u0637\100\0"+
    "\1\u0638\121\0\1\u0639\66\0\1\u063a\75\0\1\u063b\76\0"+
    "\1\u063c\121\0\1\u063d\55\0\1\u063e\115\0\1\u063e\105\0"+
    "\1\u063f\52\0\1\u063b\116\0\1\u0640\76\0\1\u0639\64\0"+
    "\1\u0641\140\0\1\u0642\76\0\1\u0643\27\0\1\u0644\76\0"+
    "\1\u0645\137\0\1\u0646\110\0\1\u0647\100\0\1\u0648\62\0"+
    "\1\u0646\46\0\1\u0649\121\0\1\u064a\74\0\1\u064b\66\0"+
    "\1\u064c\111\0\1\u064b\64\0\1\u064c\100\0\1\u064d\66\0"+
    "\1\u064e\107\0\1\u064f\66\0\1\u0650\115\0\1\u0629\133\0"+
    "\1\u0651\43\0\1\u0652\77\0\1\u0653\106\0\1\u0654\124\0"+
    "\1\u0655\52\0\1\u0656\60\0\1\u0657\101\0\1\u0658\102\0"+
    "\1\u0659\114\0\1\u065a\65\0\1\u065b\113\0\1\u065c\53\0"+
    "\1\u0658\102\0\1\u065d\113\0\1\u065e\61\0\1\u065e\77\0"+
    "\1\u065f\74\0\1\u0660\77\0\1\u0661\121\0\1\u0662\77\0"+
    "\1\u0663\76\0\1\u065f\61\0\1\u0664\103\0\1\u0665\73\0"+
    "\1\u0666\73\0\1\u0667\103\0\1\u0668\77\0\1\u0669\121\0"+
    "\1\u066a\77\0\1\u066b\67\0\1\u066c\103\0\1\u066d\70\0"+
    "\1\u066e\70\0\1\u066f\124\0\1\u0670\70\0\1\u0671\71\0"+
    "\1\u0672\113\0\1\u0673\77\0\1\u0674\71\0\1\u0675\102\0"+
    "\1\u0676\56\0\1\u0677\77\0\1\u0678\102\0\1\u0679\137\0"+
    "\1\u067a\77\0\1\u067b\76\0\1\u067c\77\0\1\u067a\77\0"+
    "\1\u067d\60\0\1\u067e\73\0\1\u067f\55\0\1\u0680\123\0"+
    "\1\u0681\123\0\1\u0682\101\0\1\u0683\73\0\1\u067c\36\0"+
    "\1\u0679\120\0\1\u0684\72\0\1\u0685\77\0\1\u0686\123\0"+
    "\1\u0687\35\0\1\u0688\71\0\1\u0689\147\0\1\u068a\41\0"+
    "\1\u068b\111\0\1\u0688\124\0\1\u068c\43\0\1\u068b\61\0"+
    "\1\u068d\102\0\1\u068e\130\0\1\u068f\55\0\1\u0690\76\0"+
    "\1\u0690\73\0\1\u0691\77\0\1\u0692\74\0\1\u0691\77\0"+
    "\1\u0692\146\0\1\u0693\100\0\1\u0694\54\0\1\u0695\70\0"+
    "\1\u0695\66\0\1\u0696\103\0\1\u0697\124\0\1\u0698\62\0"+
    "\1\u0699\112\0\1\u069a\100\0\1\u069b\65\0\1\u0696\70\0"+
    "\1\u069c\116\0\1\u069d\66\0\1\u069e\114\0\1\u069f\100\0"+
    "\1\u06a0\66\0\1\u06a1\101\0\1\u06a1\57\0\1\u06a2\115\0"+
    "\1\u06a3\72\0\1\u06a4\66\0\1\u06a5\102\0\1\u06a6\74\0"+
    "\1\u06a7\74\0\1\u06a8\70\0\1\u06a9\121\0\1\u06aa\114\0"+
    "\1\u06ab\110\0\1\u06ac\51\0\1\u06ad\100\0\1\u06ad\64\0"+
    "\1\u06ae\100\0\1\u06af\66\0\1\u06b0\111\0\1\u06b1\70\0"+
    "\1\u06b2\121\0\1\u06b3\67\0\1\u06b4\61\0\1\u06b5\124\0"+
    "\1\u06b6\61\0\1\u06b6\134\0\1\u06b7\76\0\1\u06b7\47\0"+
    "\1\u06b8\102\0\1\u06b8\104\0\1\u06b9\100\0\1\u06ba\54\0"+
    "\1\u06bb\152\0\1\u06bc\23\0\1\u06bd\155\0\1\u06be\37\0"+
    "\1\u06a7\67\0\1\u06a8\71\0\1\u06bf\123\0\1\u06aa\110\0"+
    "\1\u06ab\114\0\1\u06c0\60\0\1\u06c1\45\0\1\u06c2\103\0"+
    "\1\u06c3\72\0\1\u06c4\101\0\1\u06c3\113\0\1\u06c5\73\0"+
    "\1\u06c6\77\0\1\u06c7\76\0\1\u06c7\77\0\1\u06c6\100\0"+
    "\1\u06c8\66\0\1\u06c9\147\0\1\u06ca\32\0\1\u06cb\144\0"+
    "\1\u06cc\56\0\1\u06cd\77\0\1\u06ce\53\0\1\u06cf\144\0"+
    "\1\u06d0\37\0\1\u06d1\66\0\1\u06d2\150\0\1\u06d3\54\0"+
    "\1\u06d4\123\0\1\u06d5\77\0\1\u06d6\53\0\1\u06d7\103\0"+
    "\1\u06d8\77\0\1\u06d9\52\0\1\u06da\115\0\1\u058f\125\0"+
    "\1\u06db\63\0\1\u06dc\102\0\1\u06dc\71\0\1\u06dd\56\0"+
    "\1\u06de\100\0\1\u06de\115\0\1\u06df\56\0\1\u06e0\115\0"+
    "\1\u06e0\54\0\1\u06da\121\0\1\u058f\125\0\1\u06e1\37\0"+
    "\1\u06e2\106\0\1\u06e3\75\0\1\u06e4\71\0\1\u06e5\111\0"+
    "\1\u06e6\100\0\1\u06e6\66\0\1\u06e7\102\0\1\u06e7\62\0"+
    "\1\u06e8\105\0\1\u06e9\77\0\1\u06ea\77\0\1\u06eb\120\0"+
    "\1\u06ec\47\0\1\u06ed\124\0\1\u06ee\77\0\1\u06ef\77\0"+
    "\1\u06f0\104\0\1\u06f1\46\0\1\u06f2\102\0\1\u06f3\103\0"+
    "\1\u06f4\75\0\1\u06f4\135\0\1\u06f5\46\0\1\u06f6\102\0"+
    "\1\u06f7\74\0\1\u06f7\67\0\1\u06f8\104\0\1\u06f9\117\0"+
    "\1\u06fa\101\0\1\u06fa\53\0\1\u06f9\125\0\1\u06fb\46\0"+
    "\1\u06fc\130\0\1\u06fd\102\0\1\u06fe\47\0\1\u06ff\132\0"+
    "\1\u0700\62\0\1\u06ff\115\0\1\u06f5\52\0\1\u06f6\107\0"+
    "\1\u0701\115\0\1\u0702\76\0\1\u0702\34\0\1\u0703\112\0"+
    "\1\u0704\135\0\1\u0705\41\0\1\u0706\76\0\1\u0707\100\0"+
    "\1\u0708\115\0\1\u0709\53\0\1\u070a\122\0\1\u070b\62\0"+
    "\1\u070c\102\0\1\u0704\133\0\1\u070d\40\0\1\u070e\75\0"+
    "\1\u0707\104\0\1\u0708\77\0\1\u070c\113\0\1\u070b\47\0"+
    "\1\u070a\130\0\1\u0709\57\0\1\u070f\66\0\1\u0710\102\0"+
    "\1\u0710\110\0\1\u070f\74\0\1\u0711\77\0\1\u0712\102\0"+
    "\1\u0713\77\0\1\u0714\132\0\1\u0715\77\0\1\u0716\77\0"+
    "\1\u0717\77\0\1\u0718\35\0\1\u0719\142\0\1\u071a\77\0"+
    "\1\u071b\77\0\1\u071c\77\0\1\u071d\52\0\1\u0719\116\0"+
    "\1\u071e\63\0\1\u071f\120\0\1\u0720\100\0\1\u0720\31\0"+
    "\1\u0721\121\0\1\u0722\101\0\1\u0723\101\0\1\u0724\77\0"+
    "\1\u071f\110\0\1\u071e\74\0\1\u0725\100\0\1\u0726\73\0"+
    "\1\u0725\43\0\1\u0727\105\0\1\u0728\115\0\1\u0728\52\0"+
    "\1\u0729\137\0\1\u072a\52\0\1\u072b\77\0\1\u072c\77\0"+
    "\1\u072d\121\0\1\u072a\60\0\1\u072b\77\0\1\u072c\77\0"+
    "\1\u072d\73\0\1\u072e\76\0\1\u072e\75\0\1\u072f\115\0"+
    "\1\u072f\52\0\1\u0730\143\0\1\u0731\76\0\1\u0731\67\0"+
    "\1\u0732\77\0\1\u0733\71\0\1\u0734\76\0\1\u0735\100\0"+
    "\1\u0736\124\0\1\u0737\43\0\1\u070e\57\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[102016];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\1\15\0\1\1\1\0\1\1\34\0\10\11"+
    "\1\1\14\0\1\1\3\0\1\11\3\0\2\1\2\0"+
    "\1\1\56\0\1\1\20\0\1\1\13\0\2\1\3\0"+
    "\1\1\1\11\26\0\1\1\32\0\1\1\117\0\1\11"+
    "\1\0\1\11\13\0\1\1\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\2\0\1\1\2\11\2\0\2\11\4\0"+
    "\1\1\1\0\1\11\4\0\1\1\21\0\1\1\2\0"+
    "\1\1\3\0\1\11\7\0\1\11\6\0\1\11\27\0"+
    "\1\1\2\0\1\1\2\0\1\11\13\0\1\11\2\0"+
    "\1\1\3\0\1\1\14\0\1\1\10\0\1\1\6\0"+
    "\1\11\10\0\1\11\11\0\3\11\15\0\1\11\2\0"+
    "\1\11\50\0\1\1\1\11\22\0\1\1\26\0\1\11"+
    "\4\0\1\11\4\0\1\11\1\0\1\11\1\0\1\11"+
    "\25\0\1\1\12\0\1\11\1\1\3\0\1\1\14\0"+
    "\1\1\5\0\1\11\10\0\1\1\1\11\14\0\1\1"+
    "\40\0\1\1\4\0\1\11\10\0\2\11\1\0\1\11"+
    "\34\0\3\11\3\0\1\11\16\0\1\11\11\0\2\1"+
    "\14\0\1\11\3\0\1\11\1\0\2\11\3\0\1\11"+
    "\1\0\1\11\1\0\1\11\4\0\1\11\1\0\1\11"+
    "\1\0\3\11\57\0\1\11\3\0\1\11\1\0\1\11"+
    "\1\0\1\11\26\0\1\11\3\0\1\11\1\1\3\0"+
    "\1\11\3\0\1\11\1\0\1\1\1\0\1\11\5\0"+
    "\1\1\10\0\1\1\30\0\1\11\2\0\1\1\1\11"+
    "\4\0\1\11\7\0\1\11\12\0\1\1\2\0\1\11"+
    "\1\0\1\11\15\0\1\11\23\0\1\11\27\0\2\11"+
    "\4\0\1\11\32\0\2\1\1\11\4\0\1\11\1\0"+
    "\1\11\3\0\1\11\1\0\1\11\5\0\1\1\6\0"+
    "\2\11\2\0\1\11\2\0\1\11\2\0\3\11\3\0"+
    "\1\1\10\0\3\11\3\0\1\1\6\0\3\11\3\0"+
    "\3\11\1\1\2\11\3\0\3\11\1\0\3\11\5\0"+
    "\1\1\22\0\1\11\2\0\2\11\6\0\1\11\1\0"+
    "\1\11\6\0\1\1\15\0\1\11\3\0\2\11\2\0"+
    "\1\11\36\0\1\11\11\0\1\11\2\0\1\11\20\0"+
    "\1\11\1\0\1\11\16\0\1\11\1\0\1\11\6\0"+
    "\1\11\1\0\1\11\1\0\1\11\5\0\1\11\13\0"+
    "\2\11\1\0\1\11\3\0\1\1\1\0\1\1\23\0"+
    "\1\11\4\0\2\11\5\0\2\11\2\0\1\1\4\0"+
    "\1\11\3\0\1\11\3\0\2\11\6\0\1\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\1\11\2\0"+
    "\1\11\13\0\1\11\3\0\1\11\6\0\3\11\2\0"+
    "\1\11\4\0\1\1\5\0\4\11\1\0\1\11\1\0"+
    "\1\1\1\11\1\0\1\1\6\0\1\11\1\0\2\11"+
    "\6\0\2\11\3\0\1\11\2\0\1\11\23\0\1\11"+
    "\10\0\2\11\5\0\2\11\1\0\1\11\2\0\1\11"+
    "\41\0\1\11\1\1\1\11\1\1\1\11\6\0\5\11"+
    "\4\0\1\11\1\0\1\11\2\0\1\11\7\0\1\11"+
    "\4\0\2\11\13\0\1\11\5\0\2\11\31\0\2\11"+
    "\1\0\1\11\12\0\2\11\2\0\1\11\4\0\3\11"+
    "\2\0\2\11\12\0\1\11\2\0\1\11\2\0\2\11"+
    "\1\0\2\11\1\0\1\11\10\0\3\11\12\0\1\11"+
    "\2\0\2\11\22\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\5\0\2\11\14\0\4\11\1\0\2\11"+
    "\4\0\1\11\2\0\1\11\1\0\1\11\2\0\6\11"+
    "\1\0\3\11\10\0\1\11\4\0\3\11\4\0\1\11"+
    "\2\0\1\11\1\0\6\11\1\0\1\11\6\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1847];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn,value);
        }
    private Symbol symbol(int type){
            return new Symbol(type, yyline, yycolumn);
        }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 278: 
          { return new Symbol(sym.DISGUSTING, yychar, yyline, yytext());
          }
        case 287: break;
        case 22: 
          { return new Symbol(sym.ITS, yychar, yyline, yytext());
          }
        case 288: break;
        case 140: 
          { return new Symbol(sym.WHOSE, yychar, yyline, yytext());
          }
        case 289: break;
        case 15: 
          { return new Symbol(sym.HI, yychar, yyline, yytext());
          }
        case 290: break;
        case 260: 
          { return new Symbol(sym.TWENTIETH, yychar, yyline, yytext());
          }
        case 291: break;
        case 132: 
          { return new Symbol(sym.THEIR, yychar, yyline, yytext());
          }
        case 292: break;
        case 146: 
          { return new Symbol(sym.LOYAL, yychar, yyline, yytext());
          }
        case 293: break;
        case 41: 
          { return new Symbol(sym.WHO, yychar, yyline, yytext());
          }
        case 294: break;
        case 169: 
          { return new Symbol(sym.EASILY, yychar, yyline, yytext());
          }
        case 295: break;
        case 117: 
          { return new Symbol(sym.SILLY, yychar, yyline, yytext());
          }
        case 296: break;
        case 89: 
          { return new Symbol(sym.MOON, yychar, yyline, yytext());
          }
        case 297: break;
        case 186: 
          { return new Symbol(sym.MYSELF, yychar, yyline, yytext());
          }
        case 298: break;
        case 141: 
          { return new Symbol(sym.ADULT, yychar, yyline, yytext());
          }
        case 299: break;
        case 284: 
          { return new Symbol(sym.ADVENTUROUS, yychar, yyline, yytext());
          }
        case 300: break;
        case 150: 
          { return new Symbol(sym.DIRTY, yychar, yyline, yytext());
          }
        case 301: break;
        case 74: 
          { return new Symbol(sym.THEY, yychar, yyline, yytext());
          }
        case 302: break;
        case 53: 
          { return new Symbol(sym.BEE, yychar, yyline, yytext());
          }
        case 303: break;
        case 237: 
          { return new Symbol(sym.INSECURE, yychar, yyline, yytext());
          }
        case 304: break;
        case 236: 
          { return new Symbol(sym.ICECREAM, yychar, yyline, yytext());
          }
        case 305: break;
        case 54: 
          { return new Symbol(sym.BED, yychar, yyline, yytext());
          }
        case 306: break;
        case 45: 
          { return new Symbol(sym.ANT, yychar, yyline, yytext());
          }
        case 307: break;
        case 9: 
          { return new Symbol(sym.abrllac, yychar, yyline, yytext());
          }
        case 308: break;
        case 180: 
          { return new Symbol(sym.TWENTY, yychar, yyline, yytext());
          }
        case 309: break;
        case 86: 
          { return new Symbol(sym.MUCH, yychar, yyline, yytext());
          }
        case 310: break;
        case 105: 
          { return new Symbol(sym.NICE, yychar, yyline, yytext());
          }
        case 311: break;
        case 243: 
          { return new Symbol(sym.STRANGER, yychar, yyline, yytext());
          }
        case 312: break;
        case 218: 
          { return new Symbol(sym.TEACHER, yychar, yyline, yytext());
          }
        case 313: break;
        case 19: 
          { return new Symbol(sym.AN, yychar, yyline, yytext());
          }
        case 314: break;
        case 191: 
          { return new Symbol(sym.FIERCE, yychar, yyline, yytext());
          }
        case 315: break;
        case 156: 
          { return new Symbol(sym.CLEAN, yychar, yyline, yytext());
          }
        case 316: break;
        case 73: 
          { return new Symbol(sym.THIS, yychar, yyline, yytext());
          }
        case 317: break;
        case 18: 
          { return new Symbol(sym.AM, yychar, yyline, yytext());
          }
        case 318: break;
        case 88: 
          { return new Symbol(sym.RUDE, yychar, yyline, yytext());
          }
        case 319: break;
        case 199: 
          { return new Symbol(sym.DOCTOR, yychar, yyline, yytext());
          }
        case 320: break;
        case 21: 
          { return new Symbol(sym.ME, yychar, yyline, yytext());
          }
        case 321: break;
        case 82: 
          { return new Symbol(sym.WHOM, yychar, yyline, yytext());
          }
        case 322: break;
        case 200: 
          { return new Symbol(sym.BORING, yychar, yyline, yytext());
          }
        case 323: break;
        case 279: 
          { return new Symbol(sym.PASSIONATE, yychar, yyline, yytext());
          }
        case 324: break;
        case 265: 
          { return new Symbol(sym.DELICIOUS, yychar, yyline, yytext());
          }
        case 325: break;
        case 147: 
          { return new Symbol(sym.FIRST, yychar, yyline, yytext());
          }
        case 326: break;
        case 87: 
          { return new Symbol(sym.MANY, yychar, yyline, yytext());
          }
        case 327: break;
        case 110: 
          { return new Symbol(sym.HOUSE, yychar, yyline, yytext());
          }
        case 328: break;
        case 248: 
          { return new Symbol(sym.GORGEOUS, yychar, yyline, yytext());
          }
        case 329: break;
        case 268: 
          { return new Symbol(sym.BUTTERFLY, yychar, yyline, yytext());
          }
        case 330: break;
        case 100: 
          { return new Symbol(sym.DOOR, yychar, yyline, yytext());
          }
        case 331: break;
        case 114: 
          { return new Symbol(sym.EIGHT, yychar, yyline, yytext());
          }
        case 332: break;
        case 259: 
          { return new Symbol(sym.SCIENTIST, yychar, yyline, yytext());
          }
        case 333: break;
        case 5: 
          { return new Symbol(sym.cerrad, yychar, yyline, yytext());
          }
        case 334: break;
        case 55: 
          { return new Symbol(sym.BAD, yychar, yyline, yytext());
          }
        case 335: break;
        case 227: 
          { return new Symbol(sym.CURIOUS, yychar, yyline, yytext());
          }
        case 336: break;
        case 160: 
          { return new Symbol(sym.PHONE, yychar, yyline, yytext());
          }
        case 337: break;
        case 253: 
          { return new Symbol(sym.CREATIVE, yychar, yyline, yytext());
          }
        case 338: break;
        case 231: 
          { return new Symbol(sym.PICTURE, yychar, yyline, yytext());
          }
        case 339: break;
        case 153: 
          { return new Symbol(sym.CHILD, yychar, yyline, yytext());
          }
        case 340: break;
        case 32: 
          { return new Symbol(sym.HAT, yychar, yyline, yytext());
          }
        case 341: break;
        case 179: 
          { return new Symbol(sym.TWELVE, yychar, yyline, yytext());
          }
        case 342: break;
        case 31: 
          { return new Symbol(sym.HER, yychar, yyline, yytext());
          }
        case 343: break;
        case 203: 
          { return new Symbol(sym.CLUMSY, yychar, yyline, yytext());
          }
        case 344: break;
        case 264: 
          { return new Symbol(sym.DISHONEST, yychar, yyline, yytext());
          }
        case 345: break;
        case 165: 
          { return new Symbol(sym.ORANGE, yychar, yyline, yytext());
          }
        case 346: break;
        case 157: 
          { return new Symbol(sym.comm, yychar, yyline, yytext());
          }
        case 347: break;
        case 275: 
          { return new Symbol(sym.OPTIMISTIC, yychar, yyline, yytext());
          }
        case 348: break;
        case 26: 
          { return new Symbol(sym.ONE, yychar, yyline, yytext());
          }
        case 349: break;
        case 123: 
          { return new Symbol(sym.SALAD, yychar, yyline, yytext());
          }
        case 350: break;
        case 133: 
          { return new Symbol(sym.THESE, yychar, yyline, yytext());
          }
        case 351: break;
        case 28: 
          { return new Symbol(sym.HIM, yychar, yyline, yytext());
          }
        case 352: break;
        case 23: 
          { return new Symbol(sym.YOU, yychar, yyline, yytext());
          }
        case 353: break;
        case 252: 
          { return new Symbol(sym.CAUTIOUS, yychar, yyline, yytext());
          }
        case 354: break;
        case 16: 
          { return new Symbol(sym.HE, yychar, yyline, yytext());
          }
        case 355: break;
        case 78: 
          { return new Symbol(sym.TREE, yychar, yyline, yytext());
          }
        case 356: break;
        case 276: 
          { return new Symbol(sym.UNFAITHFUL, yychar, yyline, yytext());
          }
        case 357: break;
        case 193: 
          { return new Symbol(sym.FRIEND, yychar, yyline, yytext());
          }
        case 358: break;
        case 80: 
          { return new Symbol(sym.WHAT, yychar, yyline, yytext());
          }
        case 359: break;
        case 124: 
          { return new Symbol(sym.SMART, yychar, yyline, yytext());
          }
        case 360: break;
        case 47: 
          { return new Symbol(sym.RED, yychar, yyline, yytext());
          }
        case 361: break;
        case 255: 
          { return new Symbol(sym.IMPATIENT, yychar, yyline, yytext());
          }
        case 362: break;
        case 251: 
          { return new Symbol(sym.CHARMING, yychar, yyline, yytext());
          }
        case 363: break;
        case 198: 
          { return new Symbol(sym.dospum, yychar, yyline, yytext());
          }
        case 364: break;
        case 25: 
          { return new Symbol(sym.OLD, yychar, yyline, yytext());
          }
        case 365: break;
        case 245: 
          { return new Symbol(sym.ATHLETIC, yychar, yyline, yytext());
          }
        case 366: break;
        case 76: 
          { return new Symbol(sym.THAT, yychar, yyline, yytext());
          }
        case 367: break;
        case 51: 
          { return new Symbol(sym.DOG, yychar, yyline, yytext());
          }
        case 368: break;
        case 274: 
          { return new Symbol(sym.INCREDIBLE, yychar, yyline, yytext());
          }
        case 369: break;
        case 120: 
          { return new Symbol(sym.SHINY, yychar, yyline, yytext());
          }
        case 370: break;
        case 122: 
          { return new Symbol(sym.SEVEN, yychar, yyline, yytext());
          }
        case 371: break;
        case 95: 
          { return new Symbol(sym.FAST, yychar, yyline, yytext());
          }
        case 372: break;
        case 271: 
          { return new Symbol(sym.DIFFERENT, yychar, yyline, yytext());
          }
        case 373: break;
        case 229: 
          { return new Symbol(sym.CERTAIN, yychar, yyline, yytext());
          }
        case 374: break;
        case 202: 
          { return new Symbol(sym.CARING, yychar, yyline, yytext());
          }
        case 375: break;
        case 152: 
          { return new Symbol(sym.BRAVE, yychar, yyline, yytext());
          }
        case 376: break;
        case 111: 
          { return new Symbol(sym.HORSE, yychar, yyline, yytext());
          }
        case 377: break;
        case 91: 
          { return new Symbol(sym.LOUD, yychar, yyline, yytext());
          }
        case 378: break;
        case 67: 
          { return new Symbol(sym.SOME, yychar, yyline, yytext());
          }
        case 379: break;
        case 130: 
          { return new Symbol(sym.THIRD, yychar, yyline, yytext());
          }
        case 380: break;
        case 206: 
          { return new Symbol(sym.POLITE, yychar, yyline, yytext());
          }
        case 381: break;
        case 81: 
          { return new Symbol(sym.WHEN, yychar, yyline, yytext());
          }
        case 382: break;
        case 35: 
          { return new Symbol(sym.SHE, yychar, yyline, yytext());
          }
        case 383: break;
        case 220: 
          { return new Symbol(sym.WELCOME, yychar, yyline, yytext());
          }
        case 384: break;
        case 266: 
          { return new Symbol(sym.DEPENDENT, yychar, yyline, yytext());
          }
        case 385: break;
        case 98: 
          { return new Symbol(sym.BOTH, yychar, yyline, yytext());
          }
        case 386: break;
        case 201: 
          { return new Symbol(sym.BANANA, yychar, yyline, yytext());
          }
        case 387: break;
        case 280: 
          { return new Symbol(sym.INTERESTING, yychar, yyline, yytext());
          }
        case 388: break;
        case 4: 
          { return new Symbol(sym.punn, yychar, yyline, yytext());
          }
        case 389: break;
        case 49: 
          { return new Symbol(sym.FUN, yychar, yyline, yytext());
          }
        case 390: break;
        case 97: 
          { return new Symbol(sym.BOOK, yychar, yyline, yytext());
          }
        case 391: break;
        case 75: 
          { return new Symbol(sym.THEM, yychar, yyline, yytext());
          }
        case 392: break;
        case 204: 
          { return new Symbol(sym.CLEVER, yychar, yyline, yytext());
          }
        case 393: break;
        case 37: 
          { return new Symbol(sym.TEN, yychar, yyline, yytext());
          }
        case 394: break;
        case 60: 
          { return new Symbol(sym.PEN, yychar, yyline, yytext());
          }
        case 395: break;
        case 119: 
          { return new Symbol(sym.SHIRT, yychar, yyline, yytext());
          }
        case 396: break;
        case 272: 
          { return new Symbol(sym.CONFIDENT, yychar, yyline, yytext());
          }
        case 397: break;
        case 195: 
          { return new Symbol(sym.GUITAR, yychar, yyline, yytext());
          }
        case 398: break;
        case 20: 
          { return new Symbol(sym.MY, yychar, yyline, yytext());
          }
        case 399: break;
        case 224: 
          { return new Symbol(sym.FOOLISH, yychar, yyline, yytext());
          }
        case 400: break;
        case 172: 
          { return new Symbol(sym.SECOND, yychar, yyline, yytext());
          }
        case 401: break;
        case 14: 
          { return new Symbol(sym.US, yychar, yyline, yytext());
          }
        case 402: break;
        case 43: 
          { return new Symbol(sym.ALL, yychar, yyline, yytext());
          }
        case 403: break;
        case 148: 
          { return new Symbol(sym.FIFTH, yychar, yyline, yytext());
          }
        case 404: break;
        case 225: 
          { return new Symbol(sym.GIRAFFE, yychar, yyline, yytext());
          }
        case 405: break;
        case 247: 
          { return new Symbol(sym.FRIENDLY, yychar, yyline, yytext());
          }
        case 406: break;
        case 115: 
          { return new Symbol(sym.ENJOY, yychar, yyline, yytext());
          }
        case 407: break;
        case 50: 
          { return new Symbol(sym.FEW, yychar, yyline, yytext());
          }
        case 408: break;
        case 84: 
          { return new Symbol(sym.WELL, yychar, yyline, yytext());
          }
        case 409: break;
        case 174: 
          { return new Symbol(sym.STRONG, yychar, yyline, yytext());
          }
        case 410: break;
        case 70: 
          { return new Symbol(sym.SHOE, yychar, yyline, yytext());
          }
        case 411: break;
        case 257: 
          { return new Symbol(sym.ENERGETIC, yychar, yyline, yytext());
          }
        case 412: break;
        case 92: 
          { return new Symbol(sym.LAMP, yychar, yyline, yytext());
          }
        case 413: break;
        case 222: 
          { return new Symbol(sym.ANOTHER, yychar, yyline, yytext());
          }
        case 414: break;
        case 129: 
          { return new Symbol(sym.TENTH, yychar, yyline, yytext());
          }
        case 415: break;
        case 42: 
          { return new Symbol(sym.ARE, yychar, yyline, yytext());
          }
        case 416: break;
        case 166: 
          { return new Symbol(sym.HONEST, yychar, yyline, yytext());
          }
        case 417: break;
        case 56: 
          { return new Symbol(sym.COW, yychar, yyline, yytext());
          }
        case 418: break;
        case 113: 
          { return new Symbol(sym.HAPPY, yychar, yyline, yytext());
          }
        case 419: break;
        case 77: 
          { return new Symbol(sym.TALL, yychar, yyline, yytext());
          }
        case 420: break;
        case 64: 
          { return new Symbol(sym.HERO, yychar, yyline, yytext());
          }
        case 421: break;
        case 239: 
          { return new Symbol(sym.ELEPHANT, yychar, yyline, yytext());
          }
        case 422: break;
        case 139: 
          { return new Symbol(sym.WHERE, yychar, yyline, yytext());
          }
        case 423: break;
        case 90: 
          { return new Symbol(sym.LION, yychar, yyline, yytext());
          }
        case 424: break;
        case 184: 
          { return new Symbol(sym.MODEST, yychar, yyline, yytext());
          }
        case 425: break;
        case 177: 
          { return new Symbol(sym.TOMATO, yychar, yyline, yytext());
          }
        case 426: break;
        case 145: 
          { return new Symbol(sym.ROUGH, yychar, yyline, yytext());
          }
        case 427: break;
        case 118: 
          { return new Symbol(sym.SIXTH, yychar, yyline, yytext());
          }
        case 428: break;
        case 175: 
          { return new Symbol(sym.SLOWLY, yychar, yyline, yytext());
          }
        case 429: break;
        case 62: 
          { return new Symbol(sym.YOUR, yychar, yyline, yytext());
          }
        case 430: break;
        case 13: 
          { return new Symbol(sym.OR, yychar, yyline, yytext());
          }
        case 431: break;
        case 216: 
          { return new Symbol(sym.SEVENTH, yychar, yyline, yytext());
          }
        case 432: break;
        case 190: 
          { return new Symbol(sym.LAWYER, yychar, yyline, yytext());
          }
        case 433: break;
        case 171: 
          { return new Symbol(sym.SINGER, yychar, yyline, yytext());
          }
        case 434: break;
        case 109: 
          { return new Symbol(sym.OTHER, yychar, yyline, yytext());
          }
        case 435: break;
        case 46: 
          { return new Symbol(sym.AND, yychar, yyline, yytext());
          }
        case 436: break;
        case 212: 
          { return new Symbol(sym.ELEGANT, yychar, yyline, yytext());
          }
        case 437: break;
        case 79: 
          { return new Symbol(sym.WISE, yychar, yyline, yytext());
          }
        case 438: break;
        case 285: 
          { return new Symbol(sym.RESPONSIBLE, yychar, yyline, yytext());
          }
        case 439: break;
        case 164: 
          { return new Symbol(sym.QUIET, yychar, yyline, yytext());
          }
        case 440: break;
        case 125: 
          { return new Symbol(sym.SMALL, yychar, yyline, yytext());
          }
        case 441: break;
        case 263: 
          { return new Symbol(sym.FANTASTIC, yychar, yyline, yytext());
          }
        case 442: break;
        case 230: 
          { return new Symbol(sym.puncom, yychar, yyline, yytext());
          }
        case 443: break;
        case 226: 
          { return new Symbol(sym.GOODBYE, yychar, yyline, yytext());
          }
        case 444: break;
        case 36: 
          { return new Symbol(sym.SAD, yychar, yyline, yytext());
          }
        case 445: break;
        case 63: 
          { return new Symbol(sym.UGLY, yychar, yyline, yytext());
          }
        case 446: break;
        case 210: 
          { return new Symbol(sym.HUNDRED, yychar, yyline, yytext());
          }
        case 447: break;
        case 7: 
          { return new Symbol(sym.abrpar, yychar, yyline, yytext());
          }
        case 448: break;
        case 38: 
          { return new Symbol(sym.THE, yychar, yyline, yytext());
          }
        case 449: break;
        case 277: 
          { return new Symbol(sym.TELEVISION, yychar, yyline, yytext());
          }
        case 450: break;
        case 48: 
          { return new Symbol(sym.RIVER, yychar, yyline, yytext());
          }
        case 451: break;
        case 24: 
          { return new Symbol(sym.OUR, yychar, yyline, yytext());
          }
        case 452: break;
        case 196: 
          { return new Symbol(sym.GENTLE, yychar, yyline, yytext());
          }
        case 453: break;
        case 182: 
          { return new Symbol(sym.ARTIST, yychar, yyline, yytext());
          }
        case 454: break;
        case 258: 
          { return new Symbol(sym.EXCELLENT, yychar, yyline, yytext());
          }
        case 455: break;
        case 213: 
          { return new Symbol(sym.SINCERE, yychar, yyline, yytext());
          }
        case 456: break;
        case 137: 
          { return new Symbol(sym.WITTY, yychar, yyline, yytext());
          }
        case 457: break;
        case 233: 
          { return new Symbol(sym.VARIOUS, yychar, yyline, yytext());
          }
        case 458: break;
        case 101: 
          { return new Symbol(sym.COLD, yychar, yyline, yytext());
          }
        case 459: break;
        case 2: 
          { return new Symbol(sym.I, yychar, yyline, yytext());
          }
        case 460: break;
        case 249: 
          { return new Symbol(sym.GENEROUS, yychar, yyline, yytext());
          }
        case 461: break;
        case 221: 
          { return new Symbol(sym.AMAZING, yychar, yyline, yytext());
          }
        case 462: break;
        case 128: 
          { return new Symbol(sym.TIGER, yychar, yyline, yytext());
          }
        case 463: break;
        case 197: 
          { return new Symbol(sym.GARDEN, yychar, yyline, yytext());
          }
        case 464: break;
        case 6: 
          { return new Symbol(sym.cerrin, yychar, yyline, yytext());
          }
        case 465: break;
        case 273: 
          { return new Symbol(sym.CAREFULLY, yychar, yyline, yytext());
          }
        case 466: break;
        case 155: 
          { return new Symbol(sym.CLOCK, yychar, yyline, yytext());
          }
        case 467: break;
        case 244: 
          { return new Symbol(sym.AIRPLANE, yychar, yyline, yytext());
          }
        case 468: break;
        case 12: 
          { return new Symbol(sym.IT, yychar, yyline, yytext());
          }
        case 469: break;
        case 71: 
          { return new Symbol(sym.SAME, yychar, yyline, yytext());
          }
        case 470: break;
        case 11: 
          { return new Symbol(sym.IS, yychar, yyline, yytext());
          }
        case 471: break;
        case 240: 
          { return new Symbol(sym.ELEVENTH, yychar, yyline, yytext());
          }
        case 472: break;
        case 256: 
          { return new Symbol(sym.HUNDREDTH, yychar, yyline, yytext());
          }
        case 473: break;
        case 178: 
          { return new Symbol(sym.THEIRS, yychar, yyline, yytext());
          }
        case 474: break;
        case 33: 
          { return new Symbol(sym.SIX, yychar, yyline, yytext());
          }
        case 475: break;
        case 8: 
          { return new Symbol(sym.cerrpar, yychar, yyline, yytext());
          }
        case 476: break;
        case 59: 
          { return new Symbol(sym.KEY, yychar, yyline, yytext());
          }
        case 477: break;
        case 83: 
          { return new Symbol(sym.WEAK, yychar, yyline, yytext());
          }
        case 478: break;
        case 246: 
          { return new Symbol(sym.ARROGANT, yychar, yyline, yytext());
          }
        case 479: break;
        case 40: 
          { return new Symbol(sym.WHY, yychar, yyline, yytext());
          }
        case 480: break;
        case 235: 
          { return new Symbol(sym.QUICKLY, yychar, yyline, yytext());
          }
        case 481: break;
        case 142: 
          { return new Symbol(sym.ACTOR, yychar, yyline, yytext());
          }
        case 482: break;
        case 135: 
          { return new Symbol(sym.TABLE, yychar, yyline, yytext());
          }
        case 483: break;
        case 34: 
          { return new Symbol(sym.SUN, yychar, yyline, yytext());
          }
        case 484: break;
        case 205: 
          { return new Symbol(sym.POTATO, yychar, yyline, yytext());
          }
        case 485: break;
        case 131: 
          { return new Symbol(sym.THOSE, yychar, yyline, yytext());
          }
        case 486: break;
        case 154: 
          { return new Symbol(sym.CHAIR, yychar, yyline, yytext());
          }
        case 487: break;
        case 107: 
          { return new Symbol(sym.NAME, yychar, yyline, yytext());
          }
        case 488: break;
        case 30: 
          { return new Symbol(sym.HOW, yychar, yyline, yytext());
          }
        case 489: break;
        case 250: 
          { return new Symbol(sym.COWARDLY, yychar, yyline, yytext());
          }
        case 490: break;
        case 232: 
          { return new Symbol(sym.PATIENT, yychar, yyline, yytext());
          }
        case 491: break;
        case 162: 
          { return new Symbol(sym.NURSE, yychar, yyline, yytext());
          }
        case 492: break;
        case 281: 
          { return new Symbol(sym.INTELLIGENT, yychar, yyline, yytext());
          }
        case 493: break;
        case 61: 
          { return new Symbol(sym.FISH, yychar, yyline, yytext());
          }
        case 494: break;
        case 270: 
          { return new Symbol(sym.BRILLIANT, yychar, yyline, yytext());
          }
        case 495: break;
        case 241: 
          { return new Symbol(sym.ENGINEER, yychar, yyline, yytext());
          }
        case 496: break;
        case 188: 
          { return new Symbol(sym.LOUDLY, yychar, yyline, yytext());
          }
        case 497: break;
        case 103: 
          { return new Symbol(sym.CALM, yychar, yyline, yytext());
          }
        case 498: break;
        case 149: 
          { return new Symbol(sym.FUNNY, yychar, yyline, yytext());
          }
        case 499: break;
        case 207: 
          { return new Symbol(sym.PENCIL , yychar, yyline, yytext());
          }
        case 500: break;
        case 161: 
          { return new Symbol(sym.NINTH, yychar, yyline, yytext());
          }
        case 501: break;
        case 65: 
          { return new Symbol(sym.HERE, yychar, yyline, yytext());
          }
        case 502: break;
        case 66: 
          { return new Symbol(sym.HARD, yychar, yyline, yytext());
          }
        case 503: break;
        case 126: 
          { return new Symbol(sym.SNAKE, yychar, yyline, yytext());
          }
        case 504: break;
        case 168: 
          { return new Symbol(sym.EIGHTH, yychar, yyline, yytext());
          }
        case 505: break;
        case 99: 
          { return new Symbol(sym.BALL, yychar, yyline, yytext());
          }
        case 506: break;
        case 286: 
          { return new Symbol(sym.PESSIMISTIC, yychar, yyline, yytext());
          }
        case 507: break;
        case 106: 
          { return new Symbol(sym.NINE, yychar, yyline, yytext());
          }
        case 508: break;
        case 1: 
          { /*Ignore*/
          }
        case 509: break;
        case 93: 
          { return new Symbol(sym.FIVE, yychar, yyline, yytext());
          }
        case 510: break;
        case 192: 
          { return new Symbol(sym.FOURTH, yychar, yyline, yytext());
          }
        case 511: break;
        case 173: 
          { return new Symbol(sym.STUPID, yychar, yyline, yytext());
          }
        case 512: break;
        case 183: 
          { return new Symbol(sym.ALWAYS, yychar, yyline, yytext());
          }
        case 513: break;
        case 85: 
          { return new Symbol(sym.MINE, yychar, yyline, yytext());
          }
        case 514: break;
        case 138: 
          { return new Symbol(sym.WHICH, yychar, yyline, yytext());
          }
        case 515: break;
        case 112: 
          { return new Symbol(sym.HELLO, yychar, yyline, yytext());
          }
        case 516: break;
        case 223: 
          { return new Symbol(sym.ANXIOUS, yychar, yyline, yytext());
          }
        case 517: break;
        case 29: 
          { return new Symbol(sym.HOT, yychar, yyline, yytext());
          }
        case 518: break;
        case 3: 
          { return new Symbol(sym.A, yychar, yyline, yytext());
          }
        case 519: break;
        case 219: 
          { return new Symbol(sym.TWELFTH, yychar, yyline, yytext());
          }
        case 520: break;
        case 187: 
          { return new Symbol(sym.RABBIT, yychar, yyline, yytext());
          }
        case 521: break;
        case 144: 
          { return new Symbol(sym.MUSIC, yychar, yyline, yytext());
          }
        case 522: break;
        case 17: 
          { return new Symbol(sym.WE, yychar, yyline, yytext());
          }
        case 523: break;
        case 52: 
          { return new Symbol(sym.BIG, yychar, yyline, yytext());
          }
        case 524: break;
        case 208: 
          { return new Symbol(sym.PARENT, yychar, yyline, yytext());
          }
        case 525: break;
        case 254: 
          { return new Symbol(sym.NEIGHBOR, yychar, yyline, yytext());
          }
        case 526: break;
        case 282: 
          { return new Symbol(sym.INDIFFERENT, yychar, yyline, yytext());
          }
        case 527: break;
        case 211: 
          { return new Symbol(sym.HAPPILY, yychar, yyline, yytext());
          }
        case 528: break;
        case 176: 
          { return new Symbol(sym.SPIDER, yychar, yyline, yytext());
          }
        case 529: break;
        case 170: 
          { return new Symbol(sym.ELEVEN, yychar, yyline, yytext());
          }
        case 530: break;
        case 127: 
          { return new Symbol(sym.TIRED, yychar, yyline, yytext());
          }
        case 531: break;
        case 159: 
          { return new Symbol(sym.PIZZA, yychar, yyline, yytext());
          }
        case 532: break;
        case 94: 
          { return new Symbol(sym.FOUR, yychar, yyline, yytext());
          }
        case 533: break;
        case 134: 
          { return new Symbol(sym.THREE, yychar, yyline, yytext());
          }
        case 534: break;
        case 158: 
          { return new Symbol(sym.PILOT, yychar, yyline, yytext());
          }
        case 535: break;
        case 151: 
          { return new Symbol(sym.BEACH, yychar, yyline, yytext());
          }
        case 536: break;
        case 238: 
          { return new Symbol(sym.YOURSELF, yychar, yyline, yytext());
          }
        case 537: break;
        case 116: 
          { return new Symbol(sym.EVERY, yychar, yyline, yytext());
          }
        case 538: break;
        case 57: 
          { return new Symbol(sym.CAT, yychar, yyline, yytext());
          }
        case 539: break;
        case 217: 
          { return new Symbol(sym.STUDENT, yychar, yyline, yytext());
          }
        case 540: break;
        case 215: 
          { return new Symbol(sym.SEVERAL, yychar, yyline, yytext());
          }
        case 541: break;
        case 267: 
          { return new Symbol(sym.BOOKSHELF, yychar, yyline, yytext());
          }
        case 542: break;
        case 136: 
          { return new Symbol(sym.TRAIN, yychar, yyline, yytext());
          }
        case 543: break;
        case 108: 
          { return new Symbol(sym.YOURS, yychar, yyline, yytext());
          }
        case 544: break;
        case 121: 
          { return new Symbol(sym.SHORT, yychar, yyline, yytext());
          }
        case 545: break;
        case 283: 
          { return new Symbol(sym.INDEPENDENT, yychar, yyline, yytext());
          }
        case 546: break;
        case 72: 
          { return new Symbol(sym.SLOW, yychar, yyline, yytext());
          }
        case 547: break;
        case 262: 
          { return new Symbol(sym.REPULSIVE, yychar, yyline, yytext());
          }
        case 548: break;
        case 10: 
          { return new Symbol(sym.cerrllac, yychar, yyline, yytext());
          }
        case 549: break;
        case 228: 
          { return new Symbol(sym.CHICKEN, yychar, yyline, yytext());
          }
        case 550: break;
        case 194: 
          { return new Symbol(sym.FLOWER, yychar, yyline, yytext());
          }
        case 551: break;
        case 104: 
          { return new Symbol(sym.KIND, yychar, yyline, yytext());
          }
        case 552: break;
        case 39: 
          { return new Symbol(sym.TWO, yychar, yyline, yytext());
          }
        case 553: break;
        case 44: 
          { return new Symbol(sym.ANY, yychar, yyline, yytext());
          }
        case 554: break;
        case 96: 
          { return new Symbol(sym.DULL, yychar, yyline, yytext());
          }
        case 555: break;
        case 143: 
          { return new Symbol(sym.APPLE, yychar, yyline, yytext());
          }
        case 556: break;
        case 242: 
          { return new Symbol(sym.EXCITING, yychar, yyline, yytext());
          }
        case 557: break;
        case 189: 
          { return new Symbol(sym.LOVELY, yychar, yyline, yytext());
          }
        case 558: break;
        case 234: 
          { return new Symbol(sym.QUIETLY, yychar, yyline, yytext());
          }
        case 559: break;
        case 68: 
          { return new Symbol(sym.SOFT, yychar, yyline, yytext());
          }
        case 560: break;
        case 209: 
          { return new Symbol(sym.HOSTILE, yychar, yyline, yytext());
          }
        case 561: break;
        case 185: 
          { return new Symbol(sym.MONKEY, yychar, yyline, yytext());
          }
        case 562: break;
        case 181: 
          { return new Symbol(sym.COMPUTER, yychar, yyline, yytext());
          }
        case 563: break;
        case 167: 
          { return new Symbol(sym.HUMBLE, yychar, yyline, yytext());
          }
        case 564: break;
        case 163: 
          { return new Symbol(sym.NEVER, yychar, yyline, yytext());
          }
        case 565: break;
        case 269: 
          { return new Symbol(sym.BEAUTIFUL, yychar, yyline, yytext());
          }
        case 566: break;
        case 102: 
          { return new Symbol(sym.CUTE, yychar, yyline, yytext());
          }
        case 567: break;
        case 69: 
          { return new Symbol(sym.SUCH, yychar, yyline, yytext());
          }
        case 568: break;
        case 214: 
          { return new Symbol(sym.SELFISH, yychar, yyline, yytext());
          }
        case 569: break;
        case 261: 
          { return new Symbol(sym.WONDERFUL, yychar, yyline, yytext());
          }
        case 570: break;
        case 27: 
          { return new Symbol(sym.HIS, yychar, yyline, yytext());
          }
        case 571: break;
        case 58: 
          { return new Symbol(sym.CAR, yychar, yyline, yytext());
          }
        case 572: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
