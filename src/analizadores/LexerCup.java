/* The following code was generated by JFlex 1.4.3 on 17/05/23 09:15 PM */

package analizadores;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17/05/23 09:15 PM from the specification file
 * <tt>C:/Users/audyc/Documents/NetBeansProjects/ProyectoTraductor/src/analizadores/LexerCup.flex</tt>
 */
class LexerCup {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\0\2\0\1\0\22\0\1\60\6\0\1\23\4\0\1\0"+
    "\3\0\12\0\7\0\1\20\1\46\1\33\1\40\1\26\1\55\1\51"+
    "\1\7\1\1\2\0\1\34\1\47\1\44\1\36\1\32\1\0\1\25"+
    "\1\12\1\17\1\37\1\43\1\15\1\57\1\3\1\53\4\0\1\0"+
    "\1\0\1\22\1\45\1\30\1\35\1\10\1\54\1\50\1\11\1\2"+
    "\2\0\1\31\1\21\1\42\1\4\1\27\1\0\1\24\1\13\1\14"+
    "\1\5\1\41\1\16\1\56\1\6\1\52\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\36\0\1\2\1\3\5\0\1\4\5\0"+
    "\1\5\5\0\1\6\4\0\1\7\3\0\1\10\5\0"+
    "\1\11\36\0\1\12\16\0\1\11\1\0\1\13\2\0"+
    "\1\14\2\0\1\15\6\0\1\16\1\0\1\16\1\17"+
    "\1\0\1\20\1\0\1\21\3\0\1\22\10\0\1\23"+
    "\3\0\1\24\33\0\1\25\31\0\1\26\1\27\1\30"+
    "\14\0\1\31\25\0\1\32\4\0\1\33\5\0\2\34"+
    "\14\0\1\35\1\36\1\0\1\37\1\40\1\0\1\37"+
    "\3\0\1\41\2\0\1\42\1\0\1\43\2\0\2\44"+
    "\1\0\1\45\5\0\1\46\6\0\1\47\1\42\1\0"+
    "\1\50\27\0\1\51\3\0\1\52\5\0\1\53\3\0"+
    "\1\54\2\0\1\55\3\0\1\56\2\0\1\57\1\60"+
    "\1\0\1\61\11\0\1\62\1\0\1\63\15\0\1\64"+
    "\2\0\1\65\4\0\1\66\2\0\1\67\6\0\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\2\0\1\76\2\0"+
    "\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[412];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef"+
    "\0\u0620\0\u0651\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746"+
    "\0\u0651\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u0651\0\u086c"+
    "\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0651\0\u0961\0\u0992\0\u09c3"+
    "\0\u09f4\0\u0651\0\u0a25\0\u0a56\0\u0a87\0\u0651\0\u0ab8\0\u0ae9"+
    "\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71"+
    "\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9"+
    "\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81"+
    "\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109"+
    "\0\u113a\0\u116b\0\u0651\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260"+
    "\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8"+
    "\0\u1419\0\u0651\0\u144a\0\u0651\0\u147b\0\u14ac\0\u0651\0\u14dd"+
    "\0\u150e\0\u0651\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634"+
    "\0\u1665\0\u1696\0\u16c7\0\u0651\0\u16f8\0\u0651\0\u1729\0\u0651"+
    "\0\u175a\0\u178b\0\u17bc\0\u0651\0\u17ed\0\u181e\0\u184f\0\u1880"+
    "\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u0651\0\u1975\0\u19a6\0\u19d7"+
    "\0\u0651\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e"+
    "\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6"+
    "\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e"+
    "\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u0651\0\u1f33\0\u1f64\0\u1f95"+
    "\0\u1fc6\0\u1ff7\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d"+
    "\0\u214e\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5"+
    "\0\u22d6\0\u2307\0\u2338\0\u2369\0\u239a\0\u23cb\0\u0651\0\u0651"+
    "\0\u0651\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522"+
    "\0\u2553\0\u2584\0\u25b5\0\u25e6\0\u2617\0\u0651\0\u2648\0\u2679"+
    "\0\u26aa\0\u26db\0\u270c\0\u273d\0\u276e\0\u279f\0\u27d0\0\u2801"+
    "\0\u2832\0\u2863\0\u2894\0\u28c5\0\u28f6\0\u2927\0\u2958\0\u2989"+
    "\0\u29ba\0\u29eb\0\u2a1c\0\u0651\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0"+
    "\0\u0651\0\u2b11\0\u2b42\0\u2b73\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37"+
    "\0\u2c68\0\u2c99\0\u2cca\0\u2cfb\0\u2d2c\0\u2d5d\0\u2d8e\0\u2dbf"+
    "\0\u2df0\0\u2e21\0\u2e52\0\u2e83\0\u0651\0\u0651\0\u2eb4\0\u2ee5"+
    "\0\u0651\0\u2f16\0\u2f47\0\u2f78\0\u2fa9\0\u2fda\0\u0651\0\u300b"+
    "\0\u303c\0\u306d\0\u309e\0\u0651\0\u30cf\0\u3100\0\u3131\0\u3162"+
    "\0\u3193\0\u0651\0\u31c4\0\u31f5\0\u3226\0\u3257\0\u3288\0\u0651"+
    "\0\u32b9\0\u32ea\0\u331b\0\u334c\0\u337d\0\u33ae\0\u0651\0\u33df"+
    "\0\u3410\0\u0651\0\u3441\0\u3472\0\u34a3\0\u34d4\0\u3505\0\u3536"+
    "\0\u3567\0\u3598\0\u35c9\0\u35fa\0\u362b\0\u365c\0\u368d\0\u36be"+
    "\0\u36ef\0\u3720\0\u3751\0\u3782\0\u37b3\0\u37e4\0\u3815\0\u3846"+
    "\0\u3877\0\u0651\0\u38a8\0\u38d9\0\u390a\0\u0651\0\u393b\0\u396c"+
    "\0\u399d\0\u39ce\0\u39ff\0\u0651\0\u3a30\0\u3a61\0\u3a92\0\u0651"+
    "\0\u3ac3\0\u3af4\0\u0651\0\u3b25\0\u3b56\0\u3b87\0\u0651\0\u3bb8"+
    "\0\u3be9\0\u0651\0\u0651\0\u3c1a\0\u0651\0\u3c4b\0\u3c7c\0\u3cad"+
    "\0\u3cde\0\u3d0f\0\u3d40\0\u3d71\0\u3da2\0\u3dd3\0\u0651\0\u3e04"+
    "\0\u0651\0\u3e35\0\u3e66\0\u3e97\0\u3ec8\0\u3ef9\0\u3f2a\0\u3f5b"+
    "\0\u3f8c\0\u3fbd\0\u3fee\0\u401f\0\u4050\0\u4081\0\u0651\0\u40b2"+
    "\0\u40e3\0\u0651\0\u4114\0\u4145\0\u4176\0\u41a7\0\u0651\0\u41d8"+
    "\0\u4209\0\u0651\0\u423a\0\u426b\0\u429c\0\u42cd\0\u42fe\0\u432f"+
    "\0\u0651\0\u0651\0\u0651\0\u0651\0\u0651\0\u0651\0\u4360\0\u4391"+
    "\0\u0651\0\u43c2\0\u43f3\0\u0651";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[412];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\4\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\2\15\1\16\1\17"+
    "\1\0\1\20\3\0\1\21\1\22\2\0\1\23\2\0"+
    "\1\24\1\25\1\26\1\27\1\0\1\30\1\0\1\31"+
    "\1\32\1\33\1\0\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\15\0\2\42\1\43\4\0\1\44\1\0\1\45"+
    "\23\0\1\46\24\0\1\42\1\43\4\0\1\44\1\0"+
    "\1\45\41\0\1\47\61\0\1\50\16\0\1\51\14\0"+
    "\1\52\1\53\11\0\1\54\46\0\1\55\22\0\1\56"+
    "\3\0\1\57\25\0\1\60\24\0\1\61\26\0\1\62"+
    "\33\0\1\56\3\0\1\57\51\0\1\63\1\64\1\0"+
    "\1\65\2\0\1\66\1\67\1\70\14\0\1\71\7\0"+
    "\1\65\24\0\1\64\1\0\1\65\3\0\1\67\1\70"+
    "\53\0\1\72\3\0\1\73\1\74\4\0\1\75\52\0"+
    "\1\76\54\0\1\72\2\0\1\77\1\73\1\74\3\0"+
    "\1\100\1\75\7\0\1\101\7\0\1\72\37\0\1\102"+
    "\1\103\2\0\1\104\2\0\1\105\1\106\7\0\1\107"+
    "\2\0\1\110\1\0\1\111\1\0\1\112\1\113\1\114"+
    "\1\115\4\0\1\116\1\117\21\0\1\103\2\0\1\104"+
    "\2\0\1\105\10\0\1\107\4\0\1\111\2\0\1\113"+
    "\6\0\1\116\5\0\1\120\1\61\26\0\1\62\2\0"+
    "\1\121\46\0\1\122\1\0\1\123\54\0\1\124\1\0"+
    "\1\122\1\0\1\123\1\125\37\0\1\126\1\127\60\0"+
    "\1\130\16\0\2\51\11\0\1\131\1\0\1\52\1\53"+
    "\1\132\1\133\7\0\1\54\1\134\45\0\1\55\1\0"+
    "\1\135\20\0\1\126\1\127\30\0\1\136\1\137\23\0"+
    "\1\140\57\0\1\141\1\140\63\0\1\142\1\143\1\0"+
    "\1\144\53\0\1\143\1\0\1\142\1\143\1\0\1\144"+
    "\15\0\1\145\10\0\1\146\31\0\1\147\60\0\1\147"+
    "\15\0\1\150\42\0\1\151\60\0\1\151\15\0\1\152"+
    "\34\0\1\153\1\0\1\154\17\0\1\155\35\0\1\156"+
    "\1\153\1\0\1\154\17\0\1\155\1\157\10\0\1\160"+
    "\132\0\1\161\52\0\1\162\71\0\1\163\33\0\1\164"+
    "\67\0\1\165\54\0\1\166\60\0\1\167\3\0\1\170"+
    "\14\0\1\171\103\0\1\172\20\0\1\173\62\0\1\174"+
    "\57\0\1\175\113\0\1\176\20\0\1\177\114\0\1\200"+
    "\12\0\1\201\43\0\1\202\13\0\1\203\5\0\1\204"+
    "\116\0\1\205\25\0\1\204\1\0\1\206\113\0\1\207"+
    "\57\0\1\210\20\0\1\211\5\0\1\212\13\0\1\213"+
    "\40\0\1\214\3\0\1\215\51\0\1\216\23\0\1\217"+
    "\61\0\1\220\7\0\1\214\66\0\1\210\34\0\1\221"+
    "\62\0\1\222\42\0\1\223\60\0\1\224\3\0\1\225"+
    "\76\0\1\225\7\0\1\226\63\0\1\227\62\0\1\230"+
    "\52\0\1\231\63\0\1\231\24\0\1\232\6\0\1\233"+
    "\57\0\1\234\23\0\1\235\60\0\1\236\36\0\1\237"+
    "\63\0\1\240\112\0\1\241\35\0\1\242\45\0\1\243"+
    "\51\0\1\244\15\0\1\245\50\0\1\246\66\0\1\247"+
    "\15\0\1\250\40\0\1\251\66\0\1\252\50\0\1\253"+
    "\63\0\1\254\67\0\1\255\51\0\1\256\6\0\1\167"+
    "\5\0\1\257\101\0\1\172\22\0\1\260\56\0\1\261"+
    "\70\0\1\262\75\0\1\263\62\0\1\264\30\0\1\265"+
    "\55\0\1\266\1\0\1\267\1\270\14\0\1\271\22\0"+
    "\1\272\13\0\1\273\2\0\1\274\4\0\1\275\14\0"+
    "\1\276\20\0\1\277\22\0\1\265\103\0\1\300\62\0"+
    "\1\301\40\0\1\302\61\0\1\303\74\0\1\304\12\0"+
    "\1\305\11\0\1\306\57\0\1\307\117\0\1\310\11\0"+
    "\1\311\41\0\1\312\61\0\1\313\43\0\1\314\56\0"+
    "\1\315\120\0\1\316\24\0\1\317\40\0\1\320\62\0"+
    "\1\321\54\0\1\322\66\0\1\323\76\0\1\324\43\0"+
    "\1\325\110\0\1\326\52\0\1\327\44\0\1\330\71\0"+
    "\1\331\44\0\1\332\54\0\1\333\76\0\1\334\56\0"+
    "\1\335\42\0\1\336\62\0\1\337\101\0\1\340\54\0"+
    "\1\341\61\0\1\342\66\0\1\343\27\0\1\344\63\0"+
    "\1\345\114\0\1\346\23\0\1\347\112\0\1\350\31\0"+
    "\1\351\76\0\1\352\73\0\1\353\27\0\1\354\76\0"+
    "\1\355\75\0\1\356\61\0\1\357\24\0\1\360\76\0"+
    "\1\361\41\0\1\362\114\0\1\363\31\0\1\364\51\0"+
    "\1\365\103\0\1\366\47\0\1\364\74\0\1\367\64\0"+
    "\1\370\63\0\1\371\20\0\1\372\136\0\1\373\60\0"+
    "\1\374\25\0\1\317\71\0\1\320\25\0\1\321\56\0"+
    "\1\375\123\0\1\371\15\0\1\376\67\0\1\377\76\0"+
    "\1\u0100\34\0\1\u0101\60\0\1\u0102\74\0\1\u0103\46\0"+
    "\1\u0104\60\0\1\u0105\55\0\1\u0106\60\0\1\u0107\74\0"+
    "\1\u0108\101\0\1\u0109\60\0\1\u010a\32\0\1\u010b\76\0"+
    "\1\u010c\36\0\1\u010d\112\0\1\u010d\32\0\1\u010e\64\0"+
    "\1\u010f\70\0\1\u0110\55\0\1\u0111\65\0\1\u010e\51\0"+
    "\1\u0112\110\0\1\u0111\36\0\1\u0113\47\0\1\u0114\63\0"+
    "\1\u0115\45\0\1\u0116\105\0\1\u0117\70\0\1\u0118\62\0"+
    "\1\u0119\31\0\1\u011a\54\0\1\u011b\76\0\1\u011c\60\0"+
    "\1\u011d\42\0\1\u011c\60\0\1\u011e\112\0\1\u011f\62\0"+
    "\1\u0120\30\0\1\u0121\54\0\1\u0122\111\0\1\u0123\36\0"+
    "\1\u0124\67\0\1\u0122\75\0\1\u0125\75\0\1\u0126\60\0"+
    "\1\u0127\50\0\1\u0128\52\0\1\u0129\62\0\1\u012a\56\0"+
    "\1\u012b\62\0\1\u012c\24\0\1\320\112\0\1\u012d\62\0"+
    "\1\u012e\42\0\1\320\103\0\1\u0128\33\0\1\u012f\61\0"+
    "\1\u012f\52\0\1\u0130\67\0\1\u0131\67\0\1\u0132\37\0"+
    "\1\u0133\63\0\1\u0134\101\0\1\u0132\62\0\1\u0135\54\0"+
    "\1\u0116\60\0\1\u0136\56\0\1\u0117\70\0\1\u0137\30\0"+
    "\1\u0138\63\0\1\u0139\103\0\1\u013a\53\0\1\u013b\33\0"+
    "\1\u013c\66\0\1\371\66\0\1\u013d\100\0\1\u013e\54\0"+
    "\1\u013f\46\0\1\u0140\47\0\1\371\70\0\1\u0141\57\0"+
    "\1\u0142\61\0\1\u0143\43\0\1\u0144\64\0\1\u0145\72\0"+
    "\1\u0146\51\0\1\u0147\43\0\1\u0148\57\0\1\u0149\133\0"+
    "\1\u014a\14\0\1\u014b\76\0\1\u014c\42\0\1\u014d\112\0"+
    "\1\u014e\44\0\1\u014f\42\0\1\u0150\64\0\1\u0151\63\0"+
    "\1\u0152\51\0\1\u0153\60\0\1\u0154\76\0\1\u0155\60\0"+
    "\1\u0154\107\0\1\u0156\57\0\1\u0157\41\0\1\u0158\63\0"+
    "\1\u0158\34\0\1\u0159\63\0\1\u015a\55\0\1\u015b\63\0"+
    "\1\u015b\67\0\1\u015c\76\0\1\u014e\16\0\1\u015d\57\0"+
    "\1\u015e\127\0\1\u015f\65\0\1\u014a\54\0\1\u015f\17\0"+
    "\1\u0160\76\0\1\u0161\67\0\1\u0162\33\0\1\u0163\60\0"+
    "\1\u0164\60\0\1\u0165\110\0\1\u0162\46\0\1\u0163\60\0"+
    "\1\u0166\60\0\1\u0165\36\0\1\u0167\112\0\1\u0168\32\0"+
    "\1\u0169\60\0\1\u016a\76\0\1\u016b\60\0\1\u016c\42\0"+
    "\1\u016d\76\0\1\u016e\56\0\1\u016f\61\0\1\u016f\43\0"+
    "\1\u0170\114\0\1\u0171\56\0\1\u0171\26\0\1\u0172\76\0"+
    "\1\u0173\42\0\1\u0174\76\0\1\u0175\57\0\1\u0176\57\0"+
    "\1\u0177\41\0\1\u0178\112\0\1\u0179\47\0\1\u017a\62\0"+
    "\1\u017b\63\0\1\u017c\35\0\1\u017d\76\0\1\u017e\74\0"+
    "\1\u017f\62\0\1\u017f\21\0\1\u0180\112\0\1\u0181\63\0"+
    "\1\u0182\26\0\1\u0183\114\0\1\u0182\42\0\1\u0184\74\0"+
    "\1\u0185\62\0\1\u0186\56\0\1\u0187\26\0\1\u0188\76\0"+
    "\1\u0189\74\0\1\u018a\62\0\1\u018a\52\0\1\u018b\26\0"+
    "\1\u018c\100\0\1\u018d\61\0\1\u018e\77\0\1\u0187\36\0"+
    "\1\u018f\56\0\1\u0190\102\0\1\u0191\62\0\1\u0191\27\0"+
    "\1\u0192\57\0\1\u0192\110\0\1\u0193\62\0\1\u0193\30\0"+
    "\1\u0194\63\0\1\u0194\103\0\1\u0195\62\0\1\u0195\63\0"+
    "\1\u0196\32\0\1\u0196\43\0\1\u0197\112\0\1\u0198\53\0"+
    "\1\u0199\63\0\1\u0199\31\0\1\u019a\112\0\1\u019b\34\0"+
    "\1\u019c\57\0\1\u019c\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17444];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\36\0\2\11\5\0\1\11\5\0\1\11"+
    "\5\0\1\11\4\0\1\11\3\0\1\11\5\0\1\1"+
    "\36\0\1\11\16\0\1\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\6\0\1\1\1\0\1\1\1\11\1\0"+
    "\1\11\1\0\1\11\3\0\1\11\10\0\1\11\3\0"+
    "\1\11\33\0\1\11\31\0\3\11\14\0\1\11\25\0"+
    "\1\11\4\0\1\11\5\0\2\1\14\0\2\11\1\0"+
    "\1\1\1\11\1\0\1\1\3\0\1\11\2\0\1\1"+
    "\1\0\1\11\2\0\2\1\1\0\1\11\5\0\1\11"+
    "\6\0\1\11\1\1\1\0\1\11\27\0\1\11\3\0"+
    "\1\11\5\0\1\11\3\0\1\11\2\0\1\11\3\0"+
    "\1\11\2\0\2\11\1\0\1\11\11\0\1\11\1\0"+
    "\1\11\15\0\1\11\2\0\1\11\4\0\1\11\2\0"+
    "\1\11\6\0\6\11\2\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[412];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn,value);
        }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
        }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 134) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 61: 
          { return new Symbol(sym.lejosde, yychar, yyline, yytext());
          }
        case 64: break;
        case 5: 
          { return new Symbol(sym.el, yychar, yyline, yytext());
          }
        case 65: break;
        case 13: 
          { return new Symbol(sym.apagado, yychar, yyline, yytext());
          }
        case 66: break;
        case 9: 
          { return new Symbol(sym.soy, yychar, yyline, yytext());
          }
        case 67: break;
        case 44: 
          { return new Symbol(sym.alrededor, yychar, yyline, yytext());
          }
        case 68: break;
        case 24: 
          { return new Symbol(sym.solamente, yychar, yyline, yytext());
          }
        case 69: break;
        case 10: 
          { return new Symbol(sym.por, yychar, yyline, yytext());
          }
        case 70: break;
        case 38: 
          { return new Symbol(sym.entre, yychar, yyline, yytext());
          }
        case 71: break;
        case 35: 
          { return new Symbol(sym.yaque, yychar, yyline, yytext());
          }
        case 72: break;
        case 11: 
          { return new Symbol(sym.tu, yychar, yyline, yytext());
          }
        case 73: break;
        case 43: 
          { return new Symbol(sym.doce, yychar, yyline, yytext());
          }
        case 74: break;
        case 8: 
          { return new Symbol(sym.nosotros, yychar, yyline, yytext());
          }
        case 75: break;
        case 48: 
          { return new Symbol(sym.alladode, yychar, yyline, yytext());
          }
        case 76: break;
        case 31: 
          { return new Symbol(sym.cuatro, yychar, yyline, yytext());
          }
        case 77: break;
        case 20: 
          { return new Symbol(sym.y, yychar, yyline, yytext());
          }
        case 78: break;
        case 49: 
          { return new Symbol(sym.antesde, yychar, yyline, yytext());
          }
        case 79: break;
        case 41: 
          { return new Symbol(sym.fuerade, yychar, yyline, yytext());
          }
        case 80: break;
        case 27: 
          { return new Symbol(sym.abajo, yychar, yyline, yytext());
          }
        case 81: break;
        case 3: 
          { return new Symbol(sym.ello, yychar, yyline, yytext());
          }
        case 82: break;
        case 37: 
          { return new Symbol(sym.Tres, yychar, yyline, yytext());
          }
        case 83: break;
        case 58: 
          { return new Symbol(sym.catorce, yychar, yyline, yytext());
          }
        case 84: break;
        case 15: 
          { return new Symbol(sym.timido, yychar, yyline, yytext());
          }
        case 85: break;
        case 40: 
          { return new Symbol(sym.orgulloso, yychar, yyline, yytext());
          }
        case 86: break;
        case 46: 
          { return new Symbol(sym.durante, yychar, yyline, yytext());
          }
        case 87: break;
        case 21: 
          { return new Symbol(sym.pero, yychar, yyline, yytext());
          }
        case 88: break;
        case 29: 
          { return new Symbol(sym.cero, yychar, yyline, yytext());
          }
        case 89: break;
        case 56: 
          { return new Symbol(sym.diecinueve, yychar, yyline, yytext());
          }
        case 90: break;
        case 19: 
          { return new Symbol(sym.eres, yychar, yyline, yytext());
          }
        case 91: break;
        case 1: 
          { return new Symbol(sym.yo, yychar, yyline, yytext());
          }
        case 92: break;
        case 39: 
          { return new Symbol(sym.despues, yychar, yyline, yytext());
          }
        case 93: break;
        case 6: 
          { return new Symbol(sym.asique, yychar, yyline, yytext());
          }
        case 94: break;
        case 30: 
          { return new Symbol(sym.cinco, yychar, yyline, yytext());
          }
        case 95: break;
        case 62: 
          { return new Symbol(sym.practico, yychar, yyline, yytext());
          }
        case 96: break;
        case 28: 
          { return new Symbol(sym.nueve, yychar, yyline, yytext());
          }
        case 97: break;
        case 4: 
          { return new Symbol(sym.o, yychar, yyline, yytext());
          }
        case 98: break;
        case 53: 
          { return new Symbol(sym.quince, yychar, yyline, yytext());
          }
        case 99: break;
        case 23: 
          { return new Symbol(sym.sobre, yychar, yyline, yytext());
          }
        case 100: break;
        case 12: 
          { return new Symbol(sym.uno, yychar, yyline, yytext());
          }
        case 101: break;
        case 14: 
          { return new Symbol(sym.seis, yychar, yyline, yytext());
          }
        case 102: break;
        case 25: 
          { return new Symbol(sym.ellos, yychar, yyline, yytext());
          }
        case 103: break;
        case 51: 
          { return new Symbol(sym.dieciseis, yychar, yyline, yytext());
          }
        case 104: break;
        case 17: 
          { return new Symbol(sym.diez, yychar, yyline, yytext());
          }
        case 105: break;
        case 42: 
          { return new Symbol(sym.once, yychar, yyline, yytext());
          }
        case 106: break;
        case 59: 
          { return new Symbol(sym.impaciente, yychar, yyline, yytext());
          }
        case 107: break;
        case 57: 
          { return new Symbol(sym.generoso, yychar, yyline, yytext());
          }
        case 108: break;
        case 26: 
          { return new Symbol(sym.pasado, yychar, yyline, yytext());
          }
        case 109: break;
        case 7: 
          { return new Symbol(sym.para, yychar, yyline, yytext());
          }
        case 110: break;
        case 18: 
          { return new Symbol(sym.dos, yychar, yyline, yytext());
          }
        case 111: break;
        case 33: 
          { return new Symbol(sym.hasta, yychar, yyline, yytext());
          }
        case 112: break;
        case 36: 
          { return new Symbol(sym.Siete, yychar, yyline, yytext());
          }
        case 113: break;
        case 2: 
          { return new Symbol(sym.es, yychar, yyline, yytext());
          }
        case 114: break;
        case 45: 
          { return new Symbol(sym.ausente, yychar, yyline, yytext());
          }
        case 115: break;
        case 34: 
          { return new Symbol(sym.ocho, yychar, yyline, yytext());
          }
        case 116: break;
        case 52: 
          { return new Symbol(sym.ente, yychar, yyline, yytext());
          }
        case 117: break;
        case 54: 
          { return new Symbol(sym.Dieciocho, yychar, yyline, yytext());
          }
        case 118: break;
        case 50: 
          { return new Symbol(sym.sinembargo, yychar, yyline, yytext());
          }
        case 119: break;
        case 63: 
          { return new Symbol(sym.aventurero, yychar, yyline, yytext());
          }
        case 120: break;
        case 47: 
          { return new Symbol(sym.detras, yychar, yyline, yytext());
          }
        case 121: break;
        case 60: 
          { return new Symbol(sym.diecisiete, yychar, yyline, yytext());
          }
        case 122: break;
        case 32: 
          { return new Symbol(sym.desde, yychar, yyline, yytext());
          }
        case 123: break;
        case 16: 
          { return new Symbol(sym.ella, yychar, yyline, yytext());
          }
        case 124: break;
        case 22: 
          { return new Symbol(sym.terminado, yychar, yyline, yytext());
          }
        case 125: break;
        case 55: 
          { return new Symbol(sym.trece, yychar, yyline, yytext());
          }
        case 126: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
