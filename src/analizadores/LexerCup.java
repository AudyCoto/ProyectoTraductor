/* The following code was generated by JFlex 1.4.3 on 2/06/23 09:30 PM */

package analizadores;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/06/23 09:30 PM from the specification file
 * <tt>C:/Users/audyc/Documents/NetBeansProjects/ProyectoTraductor/src/analizadores/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    54, 57,  0,  0,  0,  0,  0, 20, 59, 60,  0,  0,  1,  0, 56,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 55,  0,  0,  0,  0, 58, 
     0, 17, 33, 31, 27, 23, 38, 30,  8,  2,  0, 36, 25, 41, 44, 26, 
    42, 52, 22, 11, 16, 37, 48, 14, 51,  4, 49, 61,  0, 62,  0,  0, 
     0, 19, 35, 32, 29,  9, 39, 28, 10,  3,  0, 34, 24, 18, 43,  5, 
    40, 53, 21, 12, 13,  6, 46, 15, 50,  7, 45,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 47,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\15\0\1\3\1\0\1\3\34\0"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\23\0\2\14\2\0\1\15\56\0\1\16\20\0\1\17"+
    "\13\0\2\20\3\0\1\21\202\0\1\22\1\0\1\17"+
    "\13\0\1\23\1\0\1\24\2\0\1\25\1\0\1\26"+
    "\2\0\1\23\1\27\2\0\1\30\1\31\4\0\1\32"+
    "\1\0\1\33\4\0\1\32\20\0\1\34\2\0\1\34"+
    "\3\0\1\35\7\0\1\36\5\0\1\37\30\0\1\40"+
    "\2\0\1\41\2\0\1\42\13\0\1\43\2\0\1\44"+
    "\3\0\1\44\14\0\1\41\10\0\1\40\6\0\1\45"+
    "\7\0\1\46\12\0\1\47\1\50\15\0\1\51\2\0"+
    "\1\52\44\0\1\53\25\0\1\54\12\0\1\55\1\56"+
    "\3\0\1\56\12\0\1\54\6\0\1\57\4\0\1\60"+
    "\1\0\1\61\1\0\1\62\15\0\1\63\17\0\1\64"+
    "\1\65\12\0\1\64\7\0\1\66\1\67\24\0\1\66"+
    "\41\0\1\70\4\0\1\71\10\0\1\72\1\73\1\0"+
    "\1\74\33\0\1\75\1\76\1\77\3\0\1\100\17\0"+
    "\1\101\6\0\2\102\16\0\1\103\3\0\1\104\1\0"+
    "\1\105\3\0\1\106\1\0\1\107\1\0\1\110\4\0"+
    "\1\111\1\0\1\112\1\0\1\113\1\114\1\115\55\0"+
    "\1\116\3\0\1\117\1\120\2\0\1\121\23\0\1\122"+
    "\1\123\2\0\1\124\1\0\1\125\2\0\1\123\13\0"+
    "\1\126\1\0\1\127\25\0\1\130\1\0\1\131\14\0"+
    "\1\132\24\0\1\133\1\134\4\0\1\135\11\0\1\133"+
    "\1\0\1\136\4\0\1\137\4\0\1\140\1\0\1\141"+
    "\7\0\1\140\33\0\1\142\1\143\4\0\1\144\32\0"+
    "\1\145\1\146\4\0\1\147\1\0\1\150\3\0\1\151"+
    "\1\0\1\152\5\0\1\153\6\0\1\154\2\0\1\155"+
    "\2\0\1\156\2\0\1\157\1\160\1\161\3\0\1\162"+
    "\10\0\1\163\1\164\1\165\3\0\1\162\6\0\1\166"+
    "\1\167\1\170\3\0\1\171\1\172\1\173\1\174\1\175"+
    "\1\176\3\0\1\177\1\200\1\201\1\0\1\202\1\203"+
    "\1\204\3\0\1\174\21\0\1\205\3\0\1\206\1\207"+
    "\7\0\1\210\1\211\6\0\1\153\11\0\1\212\11\0"+
    "\1\213\33\0\1\214\1\0\1\215\15\0\1\216\1\0"+
    "\1\217\7\0\1\220\5\0\1\221\3\0\1\222\6\0"+
    "\1\223\1\0\1\224\3\0\1\225\10\0\1\226\1\0"+
    "\1\227\5\0\1\230\15\0\1\231\1\232\1\0\1\233"+
    "\3\0\2\234\22\0\1\235\4\0\1\236\1\237\5\0"+
    "\1\240\1\241\2\0\1\242\4\0\1\243\3\0\1\244"+
    "\3\0\1\245\1\246\6\0\1\247\2\0\1\250\1\251"+
    "\2\0\1\252\1\0\1\253\1\0\1\254\1\0\1\255"+
    "\12\0\1\256\2\0\1\257\10\0\1\260\1\261\2\0"+
    "\1\262\4\0\1\242\4\0\1\263\1\264\1\265\6\0"+
    "\1\266\6\0\1\267\1\0\1\270\1\271\1\0\1\272"+
    "\14\0\1\273\7\0\1\274\1\275\6\0\1\276\2\0"+
    "\1\277\6\0\1\300\1\0\1\301\2\0\2\302\1\303"+
    "\2\0\1\304\1\305\1\0\1\306\2\0\1\307\37\0"+
    "\1\310\1\311\1\312\1\311\1\313\6\0\1\314\1\315"+
    "\1\316\1\317\1\320\4\0\1\321\1\0\1\322\11\0"+
    "\1\323\5\0\1\324\1\325\24\0\1\326\10\0\1\327"+
    "\1\330\1\0\1\331\12\0\1\332\11\0\1\333\4\0"+
    "\1\334\2\0\1\335\4\0\1\336\1\337\1\340\1\0"+
    "\1\341\1\0\1\342\14\0\1\70\2\0\1\343\1\344"+
    "\1\0\1\345\1\346\1\0\1\347\10\0\1\350\1\351"+
    "\1\352\23\0\1\353\1\354\1\0\1\355\1\0\1\356"+
    "\1\0\1\357\1\0\1\360\14\0\1\361\4\0\1\362"+
    "\1\363\14\0\1\364\1\365\1\366\1\367\1\0\1\370"+
    "\1\371\5\0\1\372\2\0\1\373\2\0\1\374\1\375"+
    "\1\376\1\0\1\377\1\u0100\1\u0101\1\u0102\1\u0103\1\u0104"+
    "\1\0\1\u0105\10\0\1\u0106\4\0\1\u0107\1\u0108\1\u0109"+
    "\5\0\1\u010a\2\0\1\u010b\1\0\1\u010c\1\u010d\1\u010e"+
    "\1\u010f\1\u0110\1\0\1\u0111\1\0\1\u0112\7\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[1819];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1"+
    "\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9"+
    "\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1"+
    "\0\u07e0\0\u081f\0\u085e\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0999"+
    "\0\u09d8\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91"+
    "\0\u0bd0\0\u0bd0\0\u0bd0\0\u0bd0\0\u0bd0\0\u0bd0\0\u0bd0\0\u0c0f"+
    "\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07"+
    "\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u0fff"+
    "\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7"+
    "\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef"+
    "\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7"+
    "\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df"+
    "\0\u181e\0\u185d\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7"+
    "\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf"+
    "\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7"+
    "\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf"+
    "\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7"+
    "\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af"+
    "\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568\0\u25a7"+
    "\0\u0bd0\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u2721\0\u2760"+
    "\0\u279f\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da\0\u2919\0\u2958"+
    "\0\u2997\0\u29d6\0\u2a15\0\u2a54\0\u2a93\0\u2ad2\0\u2b11\0\u2b50"+
    "\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u2d48"+
    "\0\u2d87\0\u2dc6\0\u2e05\0\u2e44\0\u2e83\0\u2ec2\0\u2f01\0\u2f40"+
    "\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c\0\u307b\0\u30ba\0\u30f9\0\u3138"+
    "\0\u3177\0\u31b6\0\u31f5\0\u3234\0\u3273\0\u32b2\0\u32f1\0\u3330"+
    "\0\u336f\0\u33ae\0\u33ed\0\u342c\0\u346b\0\u34aa\0\u34e9\0\u3528"+
    "\0\u3567\0\u35a6\0\u35e5\0\u3624\0\u3663\0\u36a2\0\u36e1\0\u3720"+
    "\0\u375f\0\u379e\0\u37dd\0\u381c\0\u385b\0\u389a\0\u38d9\0\u3918"+
    "\0\u3957\0\u3996\0\u39d5\0\u3a14\0\u3a53\0\u3a92\0\u3ad1\0\u3b10"+
    "\0\u3b4f\0\u3b8e\0\u3bcd\0\u3c0c\0\u3c4b\0\u3c8a\0\u3cc9\0\u3d08"+
    "\0\u3d47\0\u3d86\0\u3dc5\0\u3e04\0\u3e43\0\u3e82\0\u3ec1\0\u3f00"+
    "\0\u3f3f\0\u3f7e\0\u3fbd\0\u3ffc\0\u403b\0\u407a\0\u40b9\0\u40f8"+
    "\0\u4137\0\u4176\0\u41b5\0\u41f4\0\u4233\0\u4272\0\u42b1\0\u42f0"+
    "\0\u432f\0\u436e\0\u43ad\0\u43ec\0\u442b\0\u446a\0\u44a9\0\u44e8"+
    "\0\u4527\0\u4566\0\u45a5\0\u0bd0\0\u45e4\0\u0bd0\0\u4623\0\u4662"+
    "\0\u46a1\0\u46e0\0\u471f\0\u475e\0\u479d\0\u47dc\0\u481b\0\u485a"+
    "\0\u4899\0\u48d8\0\u4917\0\u0bd0\0\u4956\0\u4995\0\u0bd0\0\u49d4"+
    "\0\u0bd0\0\u4a13\0\u4a52\0\u4a91\0\u0bd0\0\u4ad0\0\u4b0f\0\u0bd0"+
    "\0\u0bd0\0\u4b4e\0\u4b8d\0\u4bcc\0\u4c0b\0\u4c4a\0\u4c89\0\u0bd0"+
    "\0\u4cc8\0\u4d07\0\u4d46\0\u4d85\0\u4dc4\0\u4e03\0\u4e42\0\u4e81"+
    "\0\u4ec0\0\u4eff\0\u4f3e\0\u4f7d\0\u4fbc\0\u4ffb\0\u503a\0\u5079"+
    "\0\u50b8\0\u50f7\0\u5136\0\u5175\0\u51b4\0\u51f3\0\u5232\0\u5271"+
    "\0\u52b0\0\u52ef\0\u532e\0\u536d\0\u0bd0\0\u53ac\0\u53eb\0\u542a"+
    "\0\u5469\0\u54a8\0\u54e7\0\u5526\0\u0bd0\0\u5565\0\u55a4\0\u55e3"+
    "\0\u5622\0\u5661\0\u0bd0\0\u56a0\0\u56df\0\u571e\0\u575d\0\u579c"+
    "\0\u57db\0\u581a\0\u5859\0\u5898\0\u58d7\0\u5916\0\u5955\0\u5994"+
    "\0\u59d3\0\u5a12\0\u5a51\0\u5a90\0\u5acf\0\u5b0e\0\u5b4d\0\u5b8c"+
    "\0\u5bcb\0\u5c0a\0\u5c49\0\u5c88\0\u5cc7\0\u5d06\0\u5d45\0\u5d84"+
    "\0\u5dc3\0\u0bd0\0\u5e02\0\u5e41\0\u5e80\0\u5ebf\0\u5efe\0\u5f3d"+
    "\0\u5f7c\0\u5fbb\0\u5ffa\0\u6039\0\u6078\0\u0bd0\0\u60b7\0\u60f6"+
    "\0\u6135\0\u6174\0\u61b3\0\u61f2\0\u6231\0\u6270\0\u62af\0\u62ee"+
    "\0\u632d\0\u636c\0\u63ab\0\u63ea\0\u6429\0\u6468\0\u64a7\0\u64e6"+
    "\0\u6525\0\u6564\0\u65a3\0\u65e2\0\u6621\0\u6660\0\u669f\0\u66de"+
    "\0\u671d\0\u675c\0\u679b\0\u67da\0\u6819\0\u6858\0\u6897\0\u68d6"+
    "\0\u6915\0\u0bd0\0\u6954\0\u6993\0\u69d2\0\u6a11\0\u6a50\0\u6a8f"+
    "\0\u6ace\0\u0bd0\0\u6b0d\0\u6b4c\0\u6b8b\0\u6bca\0\u6c09\0\u6c48"+
    "\0\u6c87\0\u6cc6\0\u6d05\0\u6d44\0\u0bd0\0\u0bd0\0\u6d83\0\u6dc2"+
    "\0\u6e01\0\u6e40\0\u6e7f\0\u6ebe\0\u6efd\0\u6f3c\0\u6f7b\0\u6fba"+
    "\0\u6ff9\0\u7038\0\u7077\0\u0bd0\0\u70b6\0\u70f5\0\u0bd0\0\u7134"+
    "\0\u7173\0\u71b2\0\u71f1\0\u7230\0\u726f\0\u72ae\0\u72ed\0\u732c"+
    "\0\u736b\0\u73aa\0\u73e9\0\u7428\0\u7467\0\u74a6\0\u74e5\0\u7524"+
    "\0\u7563\0\u75a2\0\u75e1\0\u7620\0\u765f\0\u769e\0\u76dd\0\u771c"+
    "\0\u775b\0\u779a\0\u77d9\0\u7818\0\u7857\0\u7896\0\u78d5\0\u7914"+
    "\0\u7953\0\u7992\0\u79d1\0\u0bd0\0\u7a10\0\u7a4f\0\u7a8e\0\u7acd"+
    "\0\u7b0c\0\u7b4b\0\u7b8a\0\u7bc9\0\u7c08\0\u7c47\0\u7c86\0\u7cc5"+
    "\0\u7d04\0\u7d43\0\u7d82\0\u7dc1\0\u7e00\0\u7e3f\0\u7e7e\0\u7ebd"+
    "\0\u7efc\0\u7f3b\0\u7f7a\0\u7fb9\0\u7ff8\0\u8037\0\u8076\0\u80b5"+
    "\0\u80f4\0\u8133\0\u8172\0\u81b1\0\u0bd0\0\u81f0\0\u822f\0\u826e"+
    "\0\u82ad\0\u82ec\0\u832b\0\u836a\0\u83a9\0\u83e8\0\u8427\0\u8466"+
    "\0\u84a5\0\u84e4\0\u8523\0\u8562\0\u85a1\0\u85e0\0\u861f\0\u865e"+
    "\0\u869d\0\u86dc\0\u871b\0\u0bd0\0\u875a\0\u8799\0\u87d8\0\u8817"+
    "\0\u0bd0\0\u8856\0\u0bd0\0\u8895\0\u0bd0\0\u88d4\0\u8913\0\u8952"+
    "\0\u8991\0\u89d0\0\u8a0f\0\u8a4e\0\u8a8d\0\u8acc\0\u8b0b\0\u8b4a"+
    "\0\u8b89\0\u8bc8\0\u0bd0\0\u8c07\0\u8c46\0\u8c85\0\u8cc4\0\u8d03"+
    "\0\u8d42\0\u8d81\0\u8dc0\0\u8dff\0\u8e3e\0\u8e7d\0\u8ebc\0\u8efb"+
    "\0\u8f3a\0\u8f79\0\u8fb8\0\u0bd0\0\u8ff7\0\u9036\0\u9075\0\u90b4"+
    "\0\u90f3\0\u9132\0\u9171\0\u91b0\0\u91ef\0\u922e\0\u926d\0\u92ac"+
    "\0\u92eb\0\u932a\0\u9369\0\u93a8\0\u93e7\0\u9426\0\u9465\0\u0bd0"+
    "\0\u94a4\0\u94e3\0\u9522\0\u9561\0\u95a0\0\u95df\0\u961e\0\u965d"+
    "\0\u969c\0\u96db\0\u971a\0\u9759\0\u9798\0\u97d7\0\u9816\0\u9855"+
    "\0\u9894\0\u98d3\0\u9912\0\u9951\0\u9990\0\u99cf\0\u9a0e\0\u9a4d"+
    "\0\u9a8c\0\u9acb\0\u9b0a\0\u9b49\0\u9b88\0\u9bc7\0\u9c06\0\u9c45"+
    "\0\u9c84\0\u9cc3\0\u9d02\0\u9d41\0\u9d80\0\u9dbf\0\u9dfe\0\u9e3d"+
    "\0\u9e7c\0\u9ebb\0\u9efa\0\u9f39\0\u9f78\0\u9fb7\0\u9ff6\0\ua035"+
    "\0\ua074\0\ua0b3\0\ua0f2\0\ua131\0\ua170\0\ua1af\0\ua1ee\0\ua22d"+
    "\0\ua26c\0\ua2ab\0\ua2ea\0\u0bd0\0\ua329\0\ua368\0\ua3a7\0\ua3e6"+
    "\0\ua425\0\ua464\0\ua4a3\0\ua4e2\0\u0bd0\0\u0bd0\0\ua521\0\u0bd0"+
    "\0\ua560\0\ua59f\0\ua5de\0\ua61d\0\ua65c\0\ua69b\0\ua6da\0\ua719"+
    "\0\ua758\0\ua797\0\ua7d6\0\ua815\0\ua854\0\ua893\0\ua8d2\0\ua911"+
    "\0\ua950\0\ua98f\0\ua9ce\0\uaa0d\0\uaa4c\0\uaa8b\0\uaaca\0\uab09"+
    "\0\uab48\0\uab87\0\uabc6\0\u0bd0\0\u0bd0\0\u0bd0\0\uac05\0\uac44"+
    "\0\uac83\0\u0bd0\0\uacc2\0\uad01\0\uad40\0\uad7f\0\uadbe\0\uadfd"+
    "\0\uae3c\0\uae7b\0\uaeba\0\uaef9\0\uaf38\0\uaf77\0\uafb6\0\uaff5"+
    "\0\ub034\0\u0bd0\0\ub073\0\ub0b2\0\ub0f1\0\ub130\0\ub16f\0\ub1ae"+
    "\0\ub1ed\0\ub22c\0\ub26b\0\ub2aa\0\ub2e9\0\ub328\0\ub367\0\ub3a6"+
    "\0\ub3e5\0\ub424\0\ub463\0\ub4a2\0\ub4e1\0\ub520\0\ub55f\0\ub59e"+
    "\0\u0bd0\0\ub5dd\0\ub61c\0\ub65b\0\u0bd0\0\ub69a\0\u0bd0\0\ub6d9"+
    "\0\ub718\0\ub757\0\u0bd0\0\ub796\0\u0bd0\0\ub7d5\0\u0bd0\0\ub814"+
    "\0\ub853\0\ub892\0\ub8d1\0\u0bd0\0\ub910\0\u0bd0\0\ub94f\0\u0bd0"+
    "\0\u0bd0\0\u0bd0\0\ub98e\0\ub9cd\0\uba0c\0\uba4b\0\uba8a\0\ubac9"+
    "\0\ubb08\0\ubb47\0\ubb86\0\ubbc5\0\ubc04\0\ubc43\0\ubc82\0\ubcc1"+
    "\0\ubd00\0\ubd3f\0\ubd7e\0\ubdbd\0\ubdfc\0\ube3b\0\ube7a\0\ubeb9"+
    "\0\ubef8\0\ubf37\0\ubf76\0\ubfb5\0\ubff4\0\uc033\0\uc072\0\uc0b1"+
    "\0\uc0f0\0\uc12f\0\uc16e\0\uc1ad\0\uc1ec\0\uc22b\0\uc26a\0\uc2a9"+
    "\0\uc2e8\0\uc327\0\uc366\0\uc3a5\0\uc3e4\0\uc423\0\uc462\0\u0bd0"+
    "\0\uc4a1\0\uc4e0\0\uc51f\0\u0bd0\0\u0bd0\0\uc55e\0\uc59d\0\u0bd0"+
    "\0\uc5dc\0\uc61b\0\uc65a\0\uc699\0\uc6d8\0\uc717\0\uc756\0\uc795"+
    "\0\uc7d4\0\uc813\0\uc852\0\uc891\0\uc8d0\0\uc90f\0\uc94e\0\uc98d"+
    "\0\uc9cc\0\uca0b\0\uca4a\0\u0bd0\0\uca89\0\ucac8\0\ucb07\0\u0bd0"+
    "\0\ucb46\0\u0bd0\0\ucb85\0\ucbc4\0\ucc03\0\ucc42\0\ucc81\0\uccc0"+
    "\0\uccff\0\ucd3e\0\ucd7d\0\ucdbc\0\ucdfb\0\uce3a\0\uce79\0\uceb8"+
    "\0\u0bd0\0\ucef7\0\u0bd0\0\ucf36\0\ucf75\0\ucfb4\0\ucff3\0\ud032"+
    "\0\ud071\0\ud0b0\0\ud0ef\0\ud12e\0\ud16d\0\ud1ac\0\ud1eb\0\ud22a"+
    "\0\ud269\0\ud2a8\0\ud2e7\0\ud326\0\ud365\0\ud3a4\0\ud3e3\0\ud422"+
    "\0\u0bd0\0\ud461\0\u0bd0\0\ud4a0\0\ud4df\0\ud51e\0\ud55d\0\ud59c"+
    "\0\ud5db\0\ud61a\0\ud659\0\ud698\0\ud6d7\0\ud716\0\ud755\0\u0bd0"+
    "\0\ud794\0\ud7d3\0\ud812\0\ud851\0\ud890\0\ud8cf\0\ud90e\0\ud94d"+
    "\0\ud98c\0\ud9cb\0\uda0a\0\uda49\0\uda88\0\udac7\0\udb06\0\udb45"+
    "\0\udb84\0\udbc3\0\udc02\0\udc41\0\udc80\0\u0bd0\0\udcbf\0\udcfe"+
    "\0\udd3d\0\udd7c\0\u0bd0\0\uddbb\0\uddfa\0\ude39\0\ude78\0\udeb7"+
    "\0\udef6\0\udf35\0\udf74\0\udfb3\0\udff2\0\ue031\0\u0bd0\0\ue070"+
    "\0\ue0af\0\ue0ee\0\ue12d\0\u0bd0\0\ue16c\0\ue1ab\0\ue1ea\0\ue229"+
    "\0\ue268\0\ue2a7\0\u0bd0\0\ue2e6\0\ue325\0\ue364\0\ue3a3\0\ue3e2"+
    "\0\ue421\0\ue460\0\ue49f\0\ue4de\0\ue51d\0\ue55c\0\ue59b\0\ue5da"+
    "\0\ue619\0\ue658\0\ue697\0\ue6d6\0\ue715\0\ue754\0\ue793\0\ue7d2"+
    "\0\ue811\0\ue850\0\ue88f\0\ue8ce\0\ue90d\0\ue94c\0\ue98b\0\ue9ca"+
    "\0\uea09\0\uea48\0\uea87\0\ueac6\0\ueb05\0\ueb44\0\u0bd0\0\u0bd0"+
    "\0\ueb83\0\uebc2\0\uec01\0\uec40\0\u0bd0\0\uec7f\0\uecbe\0\uecfd"+
    "\0\ued3c\0\ued7b\0\uedba\0\uedf9\0\uee38\0\uee77\0\ueeb6\0\ueef5"+
    "\0\uef34\0\uef73\0\uefb2\0\ueff1\0\uf030\0\uf06f\0\uf0ae\0\uf0ed"+
    "\0\uf12c\0\uf16b\0\uf1aa\0\uf1e9\0\uf228\0\uf267\0\uf2a6\0\u0bd0"+
    "\0\u0bd0\0\uf2e5\0\uf324\0\uf363\0\uf3a2\0\u0bd0\0\uf3e1\0\u0bd0"+
    "\0\uf420\0\uf45f\0\uf49e\0\u0bd0\0\uf4dd\0\u0bd0\0\uf51c\0\uf55b"+
    "\0\uf59a\0\uf5d9\0\uf618\0\uf657\0\uf696\0\uf6d5\0\uf714\0\uf753"+
    "\0\uf792\0\uf7d1\0\u0bd0\0\uf810\0\uf84f\0\u0bd0\0\uf88e\0\uf8cd"+
    "\0\u0bd0\0\uf90c\0\uf94b\0\u0bd0\0\u0bd0\0\u0bd0\0\uf98a\0\uf9c9"+
    "\0\ufa08\0\ufa47\0\ufa86\0\ufac5\0\ufb04\0\ufb43\0\ufb82\0\ufbc1"+
    "\0\ufc00\0\ufc3f\0\u0bd0\0\u0bd0\0\u0bd0\0\ufc7e\0\ufcbd\0\ufcfc"+
    "\0\ufd3b\0\ufd7a\0\ufdb9\0\ufdf8\0\ufe37\0\ufe76\0\ufeb5\0\u0bd0"+
    "\0\u0bd0\0\u0bd0\0\ufef4\0\uff33\0\uff72\0\u0bd0\0\u0bd0\0\u0bd0"+
    "\0\uffb1\0\u0bd0\0\u0bd0\0\ufff0\1\57\1\156\0\u0bd0\0\u0bd0"+
    "\0\u0bd0\1\255\0\u0bd0\0\u0bd0\0\u0bd0\1\354\1\u012b\1\u016a"+
    "\1\u01a9\1\u01e8\1\u0227\1\u0266\1\u02a5\1\u02e4\1\u0323\1\u0362"+
    "\1\u03a1\1\u03e0\1\u041f\1\u045e\1\u049d\1\u04dc\1\u051b\1\u055a"+
    "\1\u0599\1\u05d8\0\u0bd0\1\u0617\1\u0656\1\u0695\0\u0bd0\0\u0bd0"+
    "\1\u06d4\1\u0713\1\u0752\1\u0791\1\u07d0\1\u080f\1\u084e\0\u0bd0"+
    "\0\u0bd0\1\u088d\1\u08cc\1\u090b\1\u094a\1\u0989\1\u09c8\1\u0a07"+
    "\1\u0a46\1\u0a85\1\u0ac4\1\u0b03\1\u0b42\1\u0b81\1\u0bc0\1\u0bff"+
    "\1\u0c3e\0\u0bd0\1\u0c7d\1\u0cbc\1\u0cfb\1\u0d3a\1\u0d79\1\u0db8"+
    "\1\u0df7\1\u0e36\1\u0e75\0\u0bd0\1\u0eb4\1\u0ef3\1\u0f32\1\u0f71"+
    "\1\u0fb0\1\u0fef\1\u102e\1\u106d\1\u10ac\1\u10eb\1\u112a\1\u1169"+
    "\1\u11a8\1\u11e7\1\u1226\1\u1265\1\u12a4\1\u12e3\1\u1322\1\u1361"+
    "\1\u13a0\1\u13df\1\u141e\1\u145d\1\u149c\1\u14db\1\u151a\0\u0bd0"+
    "\1\u1559\0\u0bd0\1\u1598\1\u15d7\1\u1616\1\u1655\1\u1694\1\u16d3"+
    "\1\u1712\1\u1751\1\u1790\1\u17cf\1\u180e\1\u184d\1\u188c\0\u0bd0"+
    "\1\u18cb\0\u0bd0\1\u190a\1\u1949\1\u1988\1\u19c7\1\u1a06\1\u1a45"+
    "\1\u1a84\0\u0bd0\1\u1ac3\1\u1b02\1\u1b41\1\u1b80\1\u1bbf\0\u0bd0"+
    "\1\u1bfe\1\u1c3d\1\u1c7c\0\u0bd0\1\u1cbb\1\u1cfa\1\u1d39\1\u1d78"+
    "\1\u1db7\1\u1df6\0\u0bd0\1\u1e35\0\u0bd0\1\u1e74\1\u1eb3\1\u1ef2"+
    "\0\u0bd0\1\u1f31\1\u1f70\1\u1faf\1\u1fee\1\u202d\1\u206c\1\u20ab"+
    "\1\u20ea\0\u0bd0\1\u2129\0\u0bd0\1\u2168\1\u21a7\1\u21e6\1\u2225"+
    "\1\u2264\0\u0bd0\1\u22a3\1\u22e2\1\u2321\1\u2360\1\u239f\1\u23de"+
    "\1\u241d\1\u245c\1\u249b\1\u24da\1\u2519\1\u2558\1\u2597\0\u0bd0"+
    "\0\u0bd0\1\u25d6\0\u0bd0\1\u2615\1\u2654\1\u2693\1\u26d2\1\u2711"+
    "\1\u2750\1\u278f\1\u27ce\1\u280d\1\u284c\1\u288b\1\u28ca\1\u2909"+
    "\1\u2948\1\u2987\1\u29c6\1\u2a05\1\u2a44\1\u2a83\1\u2ac2\1\u2b01"+
    "\1\u2b40\1\u2b7f\0\u0bd0\1\u2bbe\1\u2bfd\1\u2c3c\1\u2c7b\0\u0bd0"+
    "\0\u0bd0\1\u2cba\1\u2cf9\1\u2d38\1\u2d77\1\u2db6\0\u0bd0\0\u0bd0"+
    "\1\u2df5\1\u2e34\1\u2e73\1\u2eb2\1\u2ef1\1\u2f30\1\u2f6f\0\u0bd0"+
    "\1\u2fae\1\u2fed\1\u302c\0\u0bd0\1\u306b\1\u30aa\1\u30e9\0\u0bd0"+
    "\0\u0bd0\1\u3128\1\u3167\1\u31a6\1\u31e5\1\u3224\1\u3263\0\u0bd0"+
    "\1\u32a2\1\u32e1\0\u0bd0\0\u0bd0\1\u3320\1\u335f\0\u0bd0\1\u339e"+
    "\0\u0bd0\1\u33dd\0\u0bd0\1\u341c\0\u0bd0\1\u345b\1\u349a\1\u34d9"+
    "\1\u3518\1\u3557\1\u3596\1\u35d5\1\u3614\1\u3653\1\u3692\0\u0bd0"+
    "\1\u36d1\1\u3710\0\u0bd0\1\u374f\1\u378e\1\u37cd\1\u380c\1\u384b"+
    "\1\u388a\1\u38c9\1\u3908\0\u0bd0\0\u0bd0\1\u3947\1\u3986\0\u0bd0"+
    "\1\u39c5\1\u3a04\1\u3a43\1\u3a82\1\u3ac1\1\u3b00\1\u3b3f\1\u3b7e"+
    "\1\u3bbd\0\u0bd0\0\u0bd0\0\u0bd0\1\u3bfc\1\u3c3b\1\u3c7a\1\u3cb9"+
    "\1\u3cf8\1\u3d37\0\u0bd0\1\u3d76\1\u3db5\1\u3df4\1\u3e33\1\u3e72"+
    "\1\u3eb1\0\u0bd0\1\u3ef0\0\u0bd0\0\u0bd0\1\u3f2f\0\u0bd0\1\u3f6e"+
    "\1\u3fad\1\u3fec\1\u402b\1\u406a\1\u40a9\1\u40e8\1\u4127\1\u4166"+
    "\1\u41a5\1\u41e4\1\u4223\0\u0bd0\1\u4262\1\u42a1\1\u42e0\1\u431f"+
    "\1\u435e\1\u439d\1\u43dc\0\u0bd0\0\u0bd0\1\u441b\1\u445a\1\u4499"+
    "\1\u44d8\1\u4517\1\u4556\0\u0bd0\1\u4595\1\u45d4\0\u0bd0\1\u4613"+
    "\1\u4652\1\u4691\1\u46d0\1\u470f\1\u474e\0\u0bd0\1\u478d\0\u0bd0"+
    "\1\u47cc\1\u480b\1\u484a\1\u4889\0\u0bd0\1\u48c8\1\u4907\0\u0bd0"+
    "\0\u0bd0\1\u4946\0\u0bd0\1\u4985\1\u49c4\0\u0bd0\1\u4a03\1\u4a42"+
    "\1\u4a81\1\u4ac0\1\u4aff\1\u4b3e\1\u4b7d\1\u4bbc\1\u4bfb\1\u4c3a"+
    "\1\u4c79\1\u4cb8\1\u4cf7\1\u4d36\1\u4d75\1\u4db4\1\u4df3\1\u4e32"+
    "\1\u4e71\1\u4eb0\1\u4eef\1\u4f2e\1\u4f6d\1\u4fac\1\u4feb\1\u502a"+
    "\1\u5069\1\u50a8\1\u50e7\1\u5126\1\u5165\0\u0bd0\1\u51a4\0\u0bd0"+
    "\1\u51e3\0\u0bd0\1\u5222\1\u5261\1\u52a0\1\u52df\1\u531e\1\u535d"+
    "\0\u0bd0\0\u0bd0\0\u0bd0\0\u0bd0\0\u0bd0\1\u539c\1\u53db\1\u541a"+
    "\1\u5459\0\u0bd0\1\u5498\0\u0bd0\1\u54d7\1\u5516\1\u5555\1\u5594"+
    "\1\u55d3\1\u5612\1\u5651\1\u5690\1\u56cf\0\u0bd0\1\u570e\1\u574d"+
    "\1\u578c\1\u57cb\1\u580a\0\u0bd0\0\u0bd0\1\u5849\1\u5888\1\u58c7"+
    "\1\u5906\1\u5945\1\u5984\1\u59c3\1\u5a02\1\u5a41\1\u5a80\1\u5abf"+
    "\1\u5afe\1\u5b3d\1\u5b7c\1\u5bbb\1\u5bfa\1\u5c39\1\u5c78\1\u5cb7"+
    "\1\u5cf6\0\u0bd0\1\u5d35\1\u5d74\1\u5db3\1\u5df2\1\u5e31\1\u5e70"+
    "\1\u5eaf\1\u5eee\0\u0bd0\0\u0bd0\1\u5f2d\0\u0bd0\1\u5f6c\1\u5fab"+
    "\1\u5fea\1\u6029\1\u6068\1\u60a7\1\u60e6\1\u6125\1\u6164\1\u61a3"+
    "\0\u0bd0\1\u61e2\1\u6221\1\u6260\1\u629f\1\u62de\1\u631d\1\u635c"+
    "\1\u639b\1\u63da\0\u0bd0\1\u6419\1\u6458\1\u6497\1\u64d6\0\u0bd0"+
    "\1\u6515\1\u6554\0\u0bd0\1\u6593\1\u65d2\1\u6611\1\u6650\0\u0bd0"+
    "\0\u0bd0\0\u0bd0\1\u668f\0\u0bd0\1\u66ce\0\u0bd0\1\u670d\1\u674c"+
    "\1\u678b\1\u67ca\1\u6809\1\u6848\1\u6887\1\u68c6\1\u6905\1\u6944"+
    "\1\u6983\1\u69c2\0\u0bd0\1\u6a01\1\u6a40\0\u0bd0\0\u0bd0\1\u6a7f"+
    "\0\u0bd0\0\u0bd0\1\u6abe\0\u0bd0\1\u6afd\1\u6b3c\1\u6b7b\1\u6bba"+
    "\1\u6bf9\1\u6c38\1\u6c77\1\u6cb6\0\u0bd0\0\u0bd0\0\u0bd0\1\u6cf5"+
    "\1\u6d34\1\u6d73\1\u6db2\1\u6df1\1\u6e30\1\u6e6f\1\u6eae\1\u6eed"+
    "\1\u6f2c\1\u6f6b\1\u6faa\1\u6fe9\1\u7028\1\u7067\1\u70a6\1\u70e5"+
    "\1\u7124\1\u7163\0\u0bd0\0\u0bd0\1\u71a2\0\u0bd0\1\u71e1\0\u0bd0"+
    "\1\u7220\0\u0bd0\1\u725f\0\u0bd0\1\u729e\1\u72dd\1\u731c\1\u735b"+
    "\1\u739a\1\u73d9\1\u7418\1\u7457\1\u7496\1\u74d5\1\u7514\1\u7553"+
    "\0\u0bd0\1\u7592\1\u75d1\1\u7610\1\u764f\0\u0bd0\0\u0bd0\1\u768e"+
    "\1\u76cd\1\u770c\1\u774b\1\u778a\1\u77c9\1\u7808\1\u7847\1\u7886"+
    "\1\u78c5\1\u7904\1\u7943\0\u0bd0\0\u0bd0\0\u0bd0\0\u0bd0\1\u7982"+
    "\0\u0bd0\0\u0bd0\1\u79c1\1\u7a00\1\u7a3f\1\u7a7e\1\u7abd\0\u0bd0"+
    "\1\u7afc\1\u7b3b\0\u0bd0\1\u7b7a\1\u7bb9\0\u0bd0\0\u0bd0\0\u0bd0"+
    "\1\u7bf8\0\u0bd0\0\u0bd0\0\u0bd0\0\u0bd0\0\u0bd0\0\u0bd0\1\u7c37"+
    "\0\u0bd0\1\u7c76\1\u7cb5\1\u7cf4\1\u7d33\1\u7d72\1\u7db1\1\u7df0"+
    "\1\u7e2f\0\u0bd0\1\u7e6e\1\u7ead\1\u7eec\1\u7f2b\0\u0bd0\0\u0bd0"+
    "\0\u0bd0\1\u7f6a\1\u7fa9\1\u7fe8\1\u8027\1\u8066\0\u0bd0\1\u80a5"+
    "\1\u80e4\0\u0bd0\1\u8123\0\u0bd0\0\u0bd0\0\u0bd0\0\u0bd0\0\u0bd0"+
    "\1\u8162\0\u0bd0\1\u81a1\0\u0bd0\1\u81e0\1\u821f\1\u825e\1\u829d"+
    "\1\u82dc\1\u831b\1\u835a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1819];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\0\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\0\1\55\1\0"+
    "\1\56\3\0\1\57\1\60\1\2\1\0\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\0\1\2\64\0"+
    "\1\2\25\0\1\70\2\0\1\71\1\0\1\72\1\0"+
    "\1\73\12\0\1\74\1\75\10\0\1\76\1\0\1\77"+
    "\1\100\37\0\1\70\4\0\1\72\1\0\1\73\13\0"+
    "\1\75\12\0\1\77\30\0\1\101\24\0\1\102\52\0"+
    "\1\103\6\0\1\104\7\0\1\105\2\0\1\106\17\0"+
    "\1\107\2\0\1\110\57\0\1\111\16\0\1\112\30\0"+
    "\1\113\73\0\1\114\1\115\1\0\1\116\1\117\2\0"+
    "\1\120\7\0\1\121\1\0\1\122\3\0\1\123\2\0"+
    "\1\124\12\0\1\125\34\0\1\126\17\0\1\127\4\0"+
    "\1\130\22\0\1\131\2\0\1\132\3\0\1\133\17\0"+
    "\1\115\1\0\1\116\1\117\2\0\1\120\11\0\1\122"+
    "\55\0\1\134\1\135\1\0\1\136\1\137\1\0\1\140"+
    "\1\141\1\142\2\0\1\143\2\0\1\144\1\145\1\146"+
    "\1\147\3\0\1\150\1\151\1\152\1\153\4\0\1\154"+
    "\1\155\4\0\1\156\2\0\1\157\1\160\1\161\1\162"+
    "\1\163\25\0\1\135\1\0\1\136\1\137\2\0\1\141"+
    "\1\142\2\0\1\143\4\0\1\146\1\147\4\0\1\151"+
    "\7\0\1\155\7\0\1\157\2\0\1\162\26\0\1\164"+
    "\1\0\1\165\3\0\1\166\1\167\4\0\1\170\3\0"+
    "\1\171\1\0\1\172\53\0\1\173\1\174\1\0\1\175"+
    "\2\0\1\176\1\177\1\200\6\0\1\201\1\0\1\202"+
    "\3\0\1\203\2\0\1\204\47\0\1\174\1\0\1\175"+
    "\3\0\1\177\1\200\10\0\1\202\55\0\1\205\1\164"+
    "\1\0\1\165\2\0\1\206\1\166\1\167\3\0\1\207"+
    "\1\170\1\0\1\210\1\0\1\171\1\0\1\172\1\211"+
    "\1\212\2\0\1\213\46\0\1\214\1\215\11\0\1\216"+
    "\2\0\1\217\1\0\1\220\2\0\1\221\1\222\1\0"+
    "\1\223\1\224\1\0\1\225\1\0\1\226\1\0\1\227"+
    "\1\230\7\0\1\231\1\232\1\233\1\234\1\235\25\0"+
    "\1\236\1\0\1\237\1\240\1\241\13\0\1\242\56\0"+
    "\1\215\11\0\1\216\4\0\1\220\2\0\1\221\2\0"+
    "\1\243\4\0\1\244\2\0\1\230\7\0\1\231\2\0"+
    "\1\234\30\0\1\245\1\246\2\0\1\247\11\0\1\250"+
    "\33\0\1\251\21\0\1\252\1\253\1\0\1\245\1\246"+
    "\2\0\1\247\7\0\1\254\1\0\1\250\3\0\1\255"+
    "\2\0\1\256\12\0\1\257\33\0\1\260\1\126\15\0"+
    "\1\261\1\0\1\127\4\0\1\130\1\262\21\0\1\131"+
    "\1\263\1\0\1\132\1\0\1\264\1\0\1\133\1\265"+
    "\16\0\1\266\1\0\1\267\1\270\14\0\1\271\55\0"+
    "\1\272\1\266\1\0\1\267\13\0\1\273\1\0\1\271"+
    "\6\0\1\274\52\0\1\103\6\0\1\104\2\0\1\275"+
    "\4\0\1\105\1\276\1\0\1\106\1\277\13\0\1\300"+
    "\2\0\1\107\1\0\1\301\1\110\1\302\24\0\1\303"+
    "\1\304\1\0\1\305\1\306\2\0\1\307\15\0\1\310"+
    "\2\0\1\311\12\0\1\312\34\0\1\313\1\0\1\314"+
    "\1\315\2\0\1\316\11\0\1\317\56\0\1\320\1\0"+
    "\1\321\1\306\2\0\1\307\67\0\1\322\1\313\1\0"+
    "\1\314\1\315\2\0\1\316\7\0\1\323\1\0\1\317"+
    "\3\0\1\324\2\0\1\325\12\0\1\326\36\0\1\327"+
    "\1\330\1\0\1\331\1\332\1\333\6\0\1\334\1\0"+
    "\1\335\1\0\1\336\1\337\1\340\1\341\1\342\1\343"+
    "\12\0\1\344\36\0\1\345\1\330\2\0\1\332\1\333"+
    "\10\0\1\335\1\0\1\336\2\0\1\341\50\0\1\346"+
    "\1\347\1\0\1\350\1\351\2\0\1\352\7\0\1\353"+
    "\1\0\1\354\1\0\1\355\1\356\1\357\2\0\1\360"+
    "\12\0\1\361\34\0\1\362\5\0\1\363\70\0\1\347"+
    "\1\0\1\350\1\351\2\0\1\352\11\0\1\354\1\0"+
    "\1\355\53\0\1\364\1\362\5\0\1\363\15\0\1\365"+
    "\103\0\1\111\1\0\1\366\14\0\1\112\1\367\24\0"+
    "\1\370\1\371\1\0\1\372\1\373\2\0\1\374\7\0"+
    "\1\375\1\0\1\376\1\0\1\377\1\u0100\1\u0101\1\u0102"+
    "\1\u0103\1\u0104\12\0\1\u0105\34\0\1\371\1\0\1\372"+
    "\1\373\2\0\1\374\11\0\1\376\1\0\1\377\2\0"+
    "\1\u0102\51\0\1\u0106\1\0\1\u0107\1\u0108\2\0\1\u0109"+
    "\1\u010a\10\0\1\u010b\55\0\1\u010c\1\236\1\241\1\u010d"+
    "\1\240\1\241\11\0\1\u010e\1\0\1\242\6\0\1\u010f"+
    "\12\0\1\u0110\33\0\1\u0111\1\u0106\1\0\1\u0107\2\0"+
    "\1\u0112\1\u0113\1\u010a\6\0\1\u0114\1\0\1\u010b\3\0"+
    "\1\u0115\2\0\1\u0116\47\0\1\u0117\2\0\1\u0118\2\0"+
    "\1\u0119\11\0\1\u011a\55\0\1\u011b\1\u0117\2\0\1\u0118"+
    "\2\0\1\u0119\7\0\1\u011c\1\0\1\u011a\3\0\1\u011d"+
    "\15\0\1\u011e\54\0\1\u011f\74\0\1\u0120\1\0\1\u011f"+
    "\61\0\1\u0121\36\0\1\u0122\37\0\1\u0123\203\0\1\u0124"+
    "\75\0\1\u0124\133\0\1\u0125\50\0\1\u0126\103\0\1\u0127"+
    "\60\0\1\u0128\137\0\1\u0129\40\0\1\u012a\1\u012b\17\0"+
    "\1\u012c\2\0\1\u012d\51\0\1\u012e\4\0\1\u012f\12\0"+
    "\1\u0130\3\0\1\u0131\45\0\1\u0132\135\0\1\u0133\56\0"+
    "\1\u0134\63\0\1\u0135\107\0\1\u0136\110\0\1\u0137\56\0"+
    "\1\u0138\72\0\1\u0139\115\0\1\u013a\115\0\1\u013b\35\0"+
    "\1\u013c\103\0\1\u013d\77\0\1\u013d\70\0\1\u013e\5\0"+
    "\1\u013f\1\u0140\1\0\1\u0141\5\0\1\u0142\25\0\1\u0143"+
    "\45\0\1\u0144\30\0\1\u0145\50\0\1\u0146\2\0\1\u0147"+
    "\66\0\1\u0148\5\0\1\u0149\23\0\1\u014a\41\0\1\u0148"+
    "\7\0\1\u014b\22\0\1\u014c\54\0\1\u014d\2\0\1\u014e"+
    "\60\0\1\u014f\2\0\1\u0141\1\0\1\u0140\5\0\1\u0150"+
    "\16\0\1\u0151\6\0\1\u0152\73\0\1\u0153\2\0\1\u0154"+
    "\56\0\1\u0155\56\0\1\u0156\73\0\1\u0157\76\0\1\u0158"+
    "\22\0\1\u0159\53\0\1\u015a\125\0\1\u015b\67\0\1\u015c"+
    "\22\0\1\u015d\6\0\1\u015e\43\0\1\u015f\22\0\1\u0160"+
    "\6\0\1\u0161\36\0\1\u0162\24\0\1\u0163\67\0\1\u0164"+
    "\12\0\1\u0165\25\0\1\u0166\27\0\1\u0167\74\0\1\u0168"+
    "\7\0\1\u0169\15\0\1\u016a\23\0\1\u016b\1\0\1\u016c"+
    "\3\0\1\u016d\73\0\1\u016e\16\0\1\u016f\77\0\1\u0170"+
    "\16\0\1\u0171\62\0\1\u0172\1\0\1\u0173\15\0\1\u0174"+
    "\50\0\1\u0175\75\0\1\u0176\5\0\1\u0177\4\0\1\u0173"+
    "\72\0\1\u0178\5\0\1\u0179\20\0\1\u017a\23\0\1\u017b"+
    "\123\0\1\u017c\112\0\1\u017d\2\0\1\u017e\27\0\1\u017f"+
    "\77\0\1\u0180\132\0\1\u0181\14\0\1\u0165\25\0\1\u0182"+
    "\114\0\1\u0183\57\0\1\u0184\117\0\1\u0185\74\0\1\u0186"+
    "\102\0\1\u0187\6\0\1\u0188\64\0\1\u0189\77\0\1\u018a"+
    "\4\0\1\u018b\22\0\1\u018c\26\0\1\u018d\1\0\1\u018e"+
    "\3\0\1\u018f\11\0\1\u0190\1\0\1\u0191\56\0\1\u0192"+
    "\3\0\1\u0193\115\0\1\u0194\12\0\1\u0195\44\0\1\u0196"+
    "\11\0\1\u0197\66\0\1\u0198\4\0\1\u0199\72\0\1\u019a"+
    "\1\u019b\134\0\1\u019c\25\0\1\u019d\1\0\1\u019e\14\0"+
    "\1\u019f\5\0\1\u01a0\2\0\1\u01a1\67\0\1\u01a2\4\0"+
    "\1\u01a3\51\0\1\u01a4\1\0\1\u01a5\1\0\1\u019e\1\0"+
    "\1\u01a6\11\0\1\u01a7\104\0\1\u01a8\75\0\1\u01a9\67\0"+
    "\1\u01aa\7\0\1\u01ab\121\0\1\u01ac\50\0\1\u01ad\7\0"+
    "\1\u01ae\42\0\1\u01af\16\0\1\u01b0\4\0\1\u01b1\1\u01b2"+
    "\2\0\1\u01b3\73\0\1\u01b4\2\0\1\u0192\75\0\1\u01b5"+
    "\7\0\1\u01b6\56\0\1\u01b7\5\0\1\u01b8\70\0\1\u01b9"+
    "\7\0\1\u01ba\22\0\1\u01bb\73\0\1\u01bc\53\0\1\u01bd"+
    "\75\0\1\u01be\63\0\1\u01bf\74\0\1\u01c0\111\0\1\u01c1"+
    "\64\0\1\u01c2\3\0\1\u01c3\7\0\1\u01c4\71\0\1\u01c5"+
    "\5\0\1\u01c6\1\u01c2\66\0\1\u01c7\10\0\1\u01c8\64\0"+
    "\1\u01c9\12\0\1\u01ca\112\0\1\u01cb\12\0\1\u01cc\24\0"+
    "\1\u01cd\47\0\1\u01ce\40\0\1\u01cf\73\0\1\u01d0\131\0"+
    "\1\u01d1\47\0\1\u01d2\127\0\1\u01d3\31\0\1\u01d4\1\0"+
    "\1\u01d5\5\0\1\u01d6\44\0\1\u01d7\20\0\1\u01d5\13\0"+
    "\1\u01d6\11\0\1\u01d8\30\0\1\u01d9\66\0\1\u01da\60\0"+
    "\1\u01db\15\0\1\u01dc\37\0\1\u01dd\23\0\1\u01de\111\0"+
    "\1\u01df\42\0\1\u01c7\10\0\1\u01ca\54\0\1\u01cd\47\0"+
    "\1\u01e0\26\0\1\u01e1\125\0\1\u01e2\55\0\1\u01e3\20\0"+
    "\1\u01e4\12\0\1\u01e5\71\0\1\u01e6\40\0\1\u01e7\151\0"+
    "\1\u01e8\74\0\1\u01e9\61\0\1\u01ea\50\0\1\u01eb\17\0"+
    "\1\u01e4\16\0\1\u01ec\71\0\1\u01ed\64\0\1\u01ee\101\0"+
    "\1\u01ef\53\0\1\u01f0\112\0\1\u01f1\76\0\1\u01f2\6\0"+
    "\1\u01f3\67\0\1\u01f4\106\0\1\u01f5\44\0\1\u01f6\77\0"+
    "\1\u01f7\1\u01f8\46\0\1\u01f9\73\0\1\u01fa\42\0\1\u01fb"+
    "\2\0\1\u01fc\106\0\1\u01fd\62\0\1\u01fe\32\0\1\u01ff"+
    "\31\0\1\u0200\40\0\1\u0201\12\0\1\u0202\26\0\1\u0203"+
    "\107\0\1\u0204\110\0\1\u0137\71\0\1\u0134\70\0\1\u0205"+
    "\105\0\1\u0139\62\0\1\u0206\12\0\1\u0207\64\0\1\u0208"+
    "\10\0\1\u0209\21\0\1\u020a\34\0\1\u020b\26\0\1\u020c"+
    "\3\0\1\u020d\66\0\1\u020e\76\0\1\u020f\17\0\1\u0210"+
    "\57\0\1\u0211\20\0\1\u0212\56\0\1\u0213\3\0\1\u020c"+
    "\1\u0214\70\0\1\u0215\72\0\1\u0216\76\0\1\u0217\54\0"+
    "\1\u0218\146\0\1\u0219\50\0\1\u021a\65\0\1\u0208\10\0"+
    "\1\u0209\21\0\1\u021b\43\0\1\u021c\17\0\1\u020c\3\0"+
    "\1\u020d\64\0\1\u021d\76\0\1\u021e\124\0\1\u021f\50\0"+
    "\1\u0220\52\0\1\u0221\113\0\1\u0222\2\0\1\u0223\5\0"+
    "\1\u0224\22\0\1\u0225\40\0\1\u0226\7\0\1\u0227\53\0"+
    "\1\u0228\16\0\1\u0229\102\0\1\u022a\54\0\1\u022b\17\0"+
    "\1\u022c\73\0\1\u022d\5\0\1\u022e\2\0\1\u022f\13\0"+
    "\1\u0230\37\0\1\u0231\6\0\1\u022d\7\0\1\u0232\2\0"+
    "\1\u0233\57\0\1\u0234\114\0\1\u0235\75\0\1\u0236\55\0"+
    "\1\u0237\1\u0238\2\0\1\u0239\114\0\1\u023a\2\0\1\u023b"+
    "\12\0\1\u023c\47\0\1\u023d\12\0\1\u023e\17\0\1\u023f"+
    "\2\0\1\u0240\42\0\1\u0241\5\0\1\u0242\67\0\1\u0222"+
    "\2\0\1\u0243\5\0\1\u0224\22\0\1\u0225\61\0\1\u0244"+
    "\74\0\1\u0244\47\0\1\u0245\7\0\1\u0246\7\0\1\u0247"+
    "\66\0\1\u0248\72\0\1\u0249\11\0\1\u024a\11\0\1\u024b"+
    "\72\0\1\u024c\1\0\1\u024d\20\0\1\u024e\52\0\1\u024f"+
    "\4\0\1\u024d\15\0\1\u0250\26\0\1\u0251\17\0\1\u0252"+
    "\55\0\1\u0253\16\0\1\u0254\76\0\1\u0255\5\0\1\u0249"+
    "\3\0\1\u024b\63\0\1\u0256\5\0\1\u0257\3\0\1\u0258"+
    "\64\0\1\u0259\131\0\1\u025a\32\0\1\u025b\143\0\1\u025c"+
    "\26\0\1\u025b\123\0\1\u025d\113\0\1\u025e\43\0\1\u025f"+
    "\12\0\1\u0260\1\u0261\16\0\1\u0262\11\0\1\u0263\27\0"+
    "\1\u0264\2\0\1\u0265\10\0\1\u0266\21\0\1\u0267\6\0"+
    "\1\u0268\25\0\1\u0269\1\u026a\143\0\1\u026b\42\0\1\u026c"+
    "\72\0\1\u026d\40\0\1\u026e\36\0\1\u026f\36\0\1\u0270"+
    "\26\0\1\u0271\75\0\1\u0272\112\0\1\u026c\65\0\1\u0273"+
    "\123\0\1\u0274\76\0\1\u0275\12\0\1\u0276\105\0\1\u0277"+
    "\52\0\1\u0278\7\0\1\u0279\14\0\1\u027a\36\0\1\u027b"+
    "\12\0\1\u027c\57\0\1\u027d\101\0\1\u027e\36\0\1\u027f"+
    "\1\0\1\u0280\26\0\1\u0281\105\0\1\u0282\1\u0283\7\0"+
    "\1\u0284\125\0\1\u0285\27\0\1\u0286\27\0\1\u01db\15\0"+
    "\1\u01dc\77\0\1\u0287\54\0\1\u0288\1\u0289\20\0\1\u028a"+
    "\35\0\1\u028b\23\0\1\u028c\70\0\1\u028d\5\0\1\u028e"+
    "\21\0\1\u028f\47\0\1\u0290\60\0\1\u027e\36\0\1\u027f"+
    "\36\0\1\u0291\4\0\1\u0292\5\0\1\u0293\63\0\1\u0294"+
    "\40\0\1\u0295\42\0\1\u0296\10\0\1\u0297\105\0\1\u0298"+
    "\12\0\1\u0299\50\0\1\u029a\54\0\1\u029b\52\0\1\u029c"+
    "\42\0\1\u029d\113\0\1\u029e\14\0\1\u029f\73\0\1\u02a0"+
    "\27\0\1\u02a1\55\0\1\u02a2\44\0\1\u02a3\75\0\1\u02a4"+
    "\77\0\1\u02a5\53\0\1\u02a6\75\0\1\u02a7\77\0\1\u02a8"+
    "\116\0\1\u02a9\112\0\1\u02aa\77\0\1\u02ab\57\0\1\u02ac"+
    "\66\0\1\u02ad\76\0\1\u02ae\70\0\1\u02af\5\0\1\u02b0"+
    "\112\0\1\u02b1\100\0\1\u02b2\76\0\1\u02b3\51\0\1\u02b4"+
    "\24\0\1\u02b5\75\0\1\u02b6\75\0\1\u02b7\77\0\1\u02b8"+
    "\61\0\1\u02b9\140\0\1\u02ba\26\0\1\u02bb\102\0\1\u02bc"+
    "\112\0\1\u02bd\100\0\1\u02be\65\0\1\u02bf\77\0\1\u02c0"+
    "\75\0\1\u02c1\73\0\1\u02c2\130\0\1\u02c3\70\0\1\u02c4"+
    "\46\0\1\u02c5\3\0\1\u02c6\115\0\1\u02c7\101\0\1\u02c8"+
    "\115\0\1\u02c9\61\0\1\u02c8\111\0\1\u02ca\55\0\1\u02c6"+
    "\2\0\1\u02c5\75\0\1\u02cb\65\0\1\u02cc\71\0\1\u02cd"+
    "\76\0\1\u02ce\112\0\1\u02cf\110\0\1\u02d0\70\0\1\u02d1"+
    "\55\0\1\u02d2\67\0\1\u02d3\127\0\1\u02d4\13\0\1\u02d5"+
    "\5\0\1\u02d6\45\0\1\u02d7\54\0\1\u02d8\120\0\1\u02d9"+
    "\54\0\1\u02da\5\0\1\u02db\116\0\1\u02dc\103\0\1\u02dd"+
    "\1\u02de\57\0\1\u02df\106\0\1\u02e0\102\0\1\u02e1\3\0"+
    "\1\u02e2\53\0\1\u02e3\72\0\1\u02e4\102\0\1\u02e5\73\0"+
    "\1\u02e6\112\0\1\u02e7\25\0\1\u02e8\50\0\1\u02e9\1\u02ea"+
    "\116\0\1\u02eb\34\0\1\u02ec\102\0\1\u02ed\112\0\1\u02ee"+
    "\25\0\1\u02ef\34\0\1\u02ea\13\0\1\u02f0\106\0\1\u02f1"+
    "\12\0\1\u02f2\33\0\1\u02f3\15\0\1\u02f4\74\0\1\u02f5"+
    "\10\0\1\u02f6\77\0\1\u02f7\16\0\1\u02f8\45\0\1\u02f9"+
    "\104\0\1\u02fa\74\0\1\u02fb\2\0\1\u02fc\57\0\1\u02fa"+
    "\110\0\1\u02fd\121\0\1\u02fe\62\0\1\u02ff\73\0\1\u0300"+
    "\66\0\1\u0301\75\0\1\u0302\100\0\1\u02e5\105\0\1\u02e4"+
    "\76\0\1\u0303\60\0\1\u0304\75\0\1\u02e6\123\0\1\u0305"+
    "\67\0\1\u0306\2\0\1\u0307\100\0\1\u0308\105\0\1\u0309"+
    "\100\0\1\u030a\43\0\1\u030b\76\0\1\u030c\110\0\1\u030d"+
    "\113\0\1\u030e\47\0\1\u030f\102\0\1\u0310\75\0\1\u0311"+
    "\10\0\1\u0312\65\0\1\u0313\65\0\1\u0314\3\0\1\u0315"+
    "\4\0\1\u0316\77\0\1\u0317\72\0\1\u0318\115\0\1\u0319"+
    "\22\0\1\u031a\53\0\1\u031b\76\0\1\u031c\57\0\1\u031d"+
    "\70\0\1\u031e\122\0\1\u031f\67\0\1\u0320\67\0\1\u031f"+
    "\102\0\1\u0321\116\0\1\u0322\100\0\1\u0323\57\0\1\u0324"+
    "\104\0\1\u0325\25\0\1\u0326\35\0\1\u0327\35\0\1\u0328"+
    "\67\0\1\u0329\64\0\1\u032a\106\0\1\u032b\52\0\1\u032c"+
    "\5\0\1\u0328\101\0\1\u032d\25\0\1\u0326\40\0\1\u0324"+
    "\112\0\1\u032e\75\0\1\u032f\112\0\1\u0329\63\0\1\u032a"+
    "\100\0\1\u0330\72\0\1\u0331\76\0\1\u0332\62\0\1\u0311"+
    "\12\0\1\u0333\70\0\1\u0317\105\0\1\u0334\51\0\1\u0335"+
    "\10\0\1\u0336\76\0\1\u0337\114\0\1\u0338\22\0\1\u0339"+
    "\53\0\1\u031b\76\0\1\u033a\47\0\1\u033b\123\0\1\u031d"+
    "\106\0\1\u033c\66\0\1\u033d\67\0\1\u033e\77\0\1\u033f"+
    "\127\0\1\u0340\74\0\1\u0341\56\0\1\u0342\77\0\1\u0343"+
    "\122\0\1\u0344\24\0\1\u0345\100\0\1\u0346\73\0\1\u0347"+
    "\126\0\1\u0348\67\0\1\u0349\141\0\1\u01ca\31\0\1\u034a"+
    "\106\0\1\u034b\74\0\1\u034c\77\0\1\u034d\57\0\1\u034e"+
    "\117\0\1\u034f\51\0\1\u0350\121\0\1\u0351\127\0\1\u0352"+
    "\46\0\1\u0353\62\0\1\u0354\64\0\1\u0355\113\0\1\u0356"+
    "\60\0\1\u0357\105\0\1\u0358\76\0\1\u0359\127\0\1\u035a"+
    "\37\0\1\u035b\105\0\1\u035c\73\0\1\u035d\100\0\1\u035e"+
    "\121\0\1\u035f\53\0\1\u0360\135\0\1\u0361\34\0\1\u0362"+
    "\133\0\1\u0363\62\0\1\u0364\60\0\1\u0365\126\0\1\u0366"+
    "\107\0\1\u0367\71\0\1\u0368\67\0\1\u0369\67\0\1\u0360"+
    "\57\0\1\u036a\70\0\1\u036b\132\0\1\u036c\13\0\1\u036d"+
    "\5\0\1\u036e\44\0\1\u036f\52\0\1\u0370\122\0\1\u0371"+
    "\52\0\1\u0372\24\0\1\u0373\122\0\1\u0374\60\0\1\u0375"+
    "\64\0\1\u0376\64\0\1\u0377\110\0\1\u0378\62\0\1\u0379"+
    "\137\0\1\u037a\102\0\1\u0374\26\0\1\u037b\144\0\1\u037a"+
    "\45\0\1\u037c\110\0\1\u037d\72\0\1\u037e\76\0\1\u037f"+
    "\123\0\1\u0380\24\0\1\u0381\104\0\1\u0382\25\0\1\u0383"+
    "\60\0\1\u0384\70\0\1\u0385\21\0\1\u0386\57\0\1\u0387"+
    "\130\0\1\u0388\54\0\1\u0389\66\0\1\u038a\111\0\1\u038b"+
    "\51\0\1\u038c\104\0\1\u038d\67\0\1\u038e\123\0\1\u038f"+
    "\75\0\1\u0389\70\0\1\u0390\107\0\1\u038b\70\0\1\u0391"+
    "\107\0\1\u0392\57\0\1\u0393\72\0\1\u0394\3\0\1\u0395"+
    "\116\0\1\u0396\110\0\1\u0397\43\0\1\u0398\103\0\1\u0399"+
    "\110\0\1\u039a\63\0\1\u039b\6\0\1\u039c\105\0\1\u039d"+
    "\60\0\1\u039e\101\0\1\u039f\123\0\1\u03a0\63\0\1\u03a1"+
    "\110\0\1\u03a2\40\0\1\u03a3\70\0\1\u03a4\124\0\1\u03a5"+
    "\5\0\1\u03a6\41\0\1\u03a7\23\0\1\u03a8\65\0\1\u03a9"+
    "\111\0\1\u03aa\7\0\1\u03ab\41\0\1\u03ac\21\0\1\u03ad"+
    "\53\0\1\u03ae\24\0\1\u03af\120\0\1\u03b0\45\0\1\u03b1"+
    "\73\0\1\u03b2\64\0\1\u03b3\5\0\1\u03b4\107\0\1\u03b0"+
    "\77\0\1\u03b5\74\0\1\u03b6\75\0\1\u03b7\116\0\1\u03b8"+
    "\60\0\1\u03b9\77\0\1\u03ba\32\0\1\u03bb\41\0\1\u03bc"+
    "\36\0\1\u03bd\55\0\1\u03be\110\0\1\u03bf\46\0\1\u03c0"+
    "\110\0\1\u03a1\115\0\1\u03c1\72\0\1\u03c2\57\0\1\u03a3"+
    "\51\0\1\u03c3\77\0\1\u03c4\44\0\1\u03a0\70\0\1\u03c5"+
    "\46\0\1\u03c6\67\0\1\u03c7\110\0\1\u03c8\67\0\1\u03c9"+
    "\31\0\1\u03ca\67\0\1\u03cb\66\0\1\u03cc\105\0\1\u03cb"+
    "\71\0\1\u03cd\103\0\1\u03ce\124\0\1\u03cf\51\0\1\u03d0"+
    "\125\0\1\u03d1\55\0\1\u03d2\5\0\1\u03d3\41\0\1\u03c6"+
    "\70\0\1\u03d4\140\0\1\u03d5\52\0\1\u03d6\113\0\1\u03d7"+
    "\74\0\1\u03d7\47\0\1\u02bc\113\0\1\u03d8\65\0\1\u0280"+
    "\101\0\1\u03d9\111\0\1\u03da\70\0\1\u03db\105\0\1\u03dc"+
    "\74\0\1\u03dd\63\0\1\u0280\100\0\1\u03de\77\0\1\u03df"+
    "\72\0\1\u03dc\115\0\1\u03e0\73\0\1\u03e1\124\0\1\u03e2"+
    "\43\0\1\u03e3\76\0\1\u03e4\73\0\1\u03e3\76\0\1\u03e5"+
    "\72\0\1\u03e6\114\0\1\u03e7\66\0\1\u03e8\75\0\1\u03e9"+
    "\111\0\1\u03ea\73\0\1\u03eb\124\0\1\u03ec\27\0\1\u03ed"+
    "\106\0\1\u03ee\136\0\1\u03ef\44\0\1\u03f0\56\0\1\u03f1"+
    "\120\0\1\u03f2\65\0\1\u03f3\122\0\1\u03f4\111\0\1\u03f5"+
    "\37\0\1\u03f6\65\0\1\u03f7\104\0\1\u03f8\114\0\1\u0358"+
    "\122\0\1\u0378\27\0\1\u035d\146\0\1\u0378\51\0\1\u03f9"+
    "\113\0\1\u03fa\34\0\1\u03fb\104\0\1\u035c\120\0\1\u03fc"+
    "\64\0\1\u03fd\137\0\1\u03fe\71\0\1\u03ff\35\0\1\u0400"+
    "\65\0\1\u0401\123\0\1\u0402\62\0\1\u0403\122\0\1\u0404"+
    "\60\0\1\u0405\57\0\1\u0406\105\0\1\u0407\76\0\1\u0408"+
    "\3\0\1\u0409\75\0\1\u040a\116\0\1\u040b\53\0\1\u040c"+
    "\76\0\1\u040d\114\0\1\u0407\67\0\1\u040e\6\0\1\u0408"+
    "\76\0\1\u040d\105\0\1\u040f\67\0\1\u0410\62\0\1\u0411"+
    "\66\0\1\u0412\75\0\1\u0413\105\0\1\u0414\114\0\1\u0415"+
    "\7\0\1\u0416\50\0\1\u0414\26\0\1\u0417\53\0\1\u0418"+
    "\107\0\1\u0419\75\0\1\u041a\71\0\1\u041b\116\0\1\u041c"+
    "\63\0\1\u041d\2\0\1\u041e\115\0\1\u041f\77\0\1\u0420"+
    "\37\0\1\u0421\124\0\1\u0422\65\0\1\u0423\2\0\1\u0424"+
    "\113\0\1\u0425\102\0\1\u0426\53\0\1\u0427\63\0\1\u0428"+
    "\75\0\1\u0428\110\0\1\u0429\105\0\1\u042a\64\0\1\u042b"+
    "\57\0\1\u042c\77\0\1\u042d\7\0\1\u0428\73\0\1\u042e"+
    "\70\0\1\u042f\104\0\1\u0430\101\0\1\u0431\112\0\1\u0432"+
    "\73\0\1\u0433\56\0\1\u0434\73\0\1\u0435\1\0\1\u0436"+
    "\75\0\1\u0437\3\0\1\u0436\121\0\1\u0434\46\0\1\u0438"+
    "\123\0\1\u0430\76\0\1\u042e\62\0\1\u0439\114\0\1\u043a"+
    "\73\0\1\u043b\65\0\1\u043c\111\0\1\u043d\71\0\1\u043e"+
    "\65\0\1\u043f\75\0\1\u0440\121\0\1\u0441\115\0\1\u0442"+
    "\32\0\1\u0443\104\0\1\u0444\111\0\1\u0445\52\0\1\u0446"+
    "\121\0\1\u0447\76\0\1\u0448\57\0\1\u0449\75\0\1\u0446"+
    "\100\0\1\u044a\76\0\1\u044b\77\0\1\u0449\104\0\1\u044c"+
    "\62\0\1\u044d\112\0\1\u044e\61\0\1\u044f\146\0\1\u0450"+
    "\50\0\1\u0451\25\0\1\u0452\40\0\1\u044c\70\0\1\u044d"+
    "\104\0\1\u044e\72\0\1\u0453\70\0\1\u0454\146\0\1\u0455"+
    "\76\0\1\u0456\77\0\1\u0457\76\0\1\u0458\51\0\1\u0459"+
    "\51\0\1\u045a\127\0\1\u045b\60\0\1\u045c\111\0\1\u045d"+
    "\103\0\1\u045b\43\0\1\u045e\150\0\1\u045f\50\0\1\u0460"+
    "\25\0\1\u0461\52\0\1\u0462\77\0\1\u0463\121\0\1\u0464"+
    "\75\0\1\u0465\34\0\1\u0466\105\0\1\u045c\107\0\1\u045d"+
    "\74\0\1\u0467\60\0\1\u0468\114\0\1\u0468\104\0\1\u0469"+
    "\66\0\1\u046a\66\0\1\u046b\73\0\1\u046c\142\0\1\u046d"+
    "\32\0\1\u046e\121\0\1\u046f\52\0\1\u0470\112\0\1\u0471"+
    "\62\0\1\u0472\76\0\1\u0473\134\0\1\u0474\6\0\1\u0475"+
    "\35\0\1\u0476\72\0\1\u0477\140\0\1\u0478\27\0\1\u0479"+
    "\101\0\1\u0479\100\0\1\u047a\75\0\1\u047b\115\0\1\u047c"+
    "\76\0\1\u047d\61\0\1\u047b\75\0\1\u047d\76\0\1\u047c"+
    "\114\0\1\u047e\60\0\1\u047f\114\0\1\u0480\102\0\1\u0469"+
    "\71\0\1\u046a\103\0\1\u046f\72\0\1\u0473\75\0\1\u0481"+
    "\77\0\1\u0472\76\0\1\u0470\115\0\1\u0482\11\0\1\u0483"+
    "\36\0\1\u0484\105\0\1\u0477\123\0\1\u0478\32\0\1\u0485"+
    "\146\0\1\u0486\26\0\1\u046e\106\0\1\u0487\107\0\1\u0488"+
    "\75\0\1\u0489\57\0\1\u048a\114\0\1\u048b\52\0\1\u048c"+
    "\107\0\1\u048d\116\0\1\u048e\55\0\1\u048f\121\0\1\u0490"+
    "\47\0\1\u0491\73\0\1\u0492\112\0\1\u0493\132\0\1\u0494"+
    "\37\0\1\u0493\106\0\1\u0495\25\0\1\u0496\51\0\1\u0497"+
    "\75\0\1\u0497\62\0\1\u0498\67\0\1\u0499\123\0\1\u0498"+
    "\61\0\1\u049a\71\0\1\u049b\101\0\1\u049c\120\0\1\u049d"+
    "\60\0\1\u049e\73\0\1\u049f\125\0\1\u04a0\111\0\1\u0496"+
    "\35\0\1\u04a1\71\0\1\u04a2\121\0\1\u04a3\51\0\1\u04a4"+
    "\121\0\1\u01e7\75\0\1\u01e7\53\0\1\u04a5\126\0\1\u04a6"+
    "\75\0\1\u04a7\55\0\1\u04a1\106\0\1\u04a8\107\0\1\u04a9"+
    "\66\0\1\u04aa\65\0\1\u04ab\115\0\1\u04ac\105\0\1\u04ad"+
    "\114\0\1\u04ae\26\0\1\u0443\112\0\1\u04af\107\0\1\u04b0"+
    "\75\0\1\u04b1\76\0\1\u04b2\76\0\1\u04b3\57\0\1\u04b4"+
    "\114\0\1\u04b5\100\0\1\u04b2\76\0\1\u04b6\76\0\1\u04b7"+
    "\73\0\1\u0429\106\0\1\u04b8\111\0\1\u04b9\57\0\1\u04ba"+
    "\111\0\1\u04bb\35\0\1\u04bc\77\0\1\u04bd\77\0\1\u04be"+
    "\77\0\1\u04bc\100\0\1\u04bf\72\0\1\u04c0\131\0\1\u04c1"+
    "\111\0\1\u04c2\62\0\1\u04c3\113\0\1\u04c4\54\0\1\u04c5"+
    "\113\0\1\u04c6\40\0\1\u04c7\110\0\1\u04c8\100\0\1\u04c9"+
    "\101\0\1\u04ca\57\0\1\u04cb\76\0\1\u04cc\101\0\1\u04cd"+
    "\130\0\1\u04ce\57\0\1\u04cf\100\0\1\u04d0\73\0\1\u04d1"+
    "\77\0\1\u04d2\70\0\1\u04d3\102\0\1\u04d4\57\0\1\u04d5"+
    "\73\0\1\u04d6\100\0\1\u04d7\124\0\1\u04d8\107\0\1\u04d9"+
    "\60\0\1\u04da\121\0\1\u04db\50\0\1\u04dc\110\0\1\u04d8"+
    "\103\0\1\u04dd\61\0\1\u04da\73\0\1\u04de\130\0\1\u04df"+
    "\70\0\1\u04e0\32\0\1\u04e1\77\0\1\u04e2\146\0\1\u04e3"+
    "\72\0\1\u04e4\44\0\1\u04e5\101\0\1\u04e6\77\0\1\u04e7"+
    "\117\0\1\u04e8\50\0\1\u04e9\135\0\1\u04ea\34\0\1\u04eb"+
    "\141\0\1\u04ea\51\0\1\u04ec\113\0\1\u04e8\45\0\1\u04ed"+
    "\111\0\1\u04ee\115\0\1\u04ef\33\0\1\u04f0\126\0\1\u04f1"+
    "\47\0\1\u04f2\44\0\1\u04f3\42\0\1\u04f4\135\0\1\u04f5"+
    "\34\0\1\u04f6\102\0\1\u04f7\73\0\1\u04f8\140\0\1\u04f9"+
    "\75\0\1\u04fa\53\0\1\u04fb\57\0\1\u04fc\116\0\1\u04fd"+
    "\74\0\1\u04fc\57\0\1\u04f8\106\0\1\u04fe\132\0\1\u04ff"+
    "\35\0\1\u0500\112\0\1\u0501\51\0\1\u0502\114\0\1\u0503"+
    "\115\0\1\u0504\47\0\1\u0505\126\0\1\u0506\53\0\1\u0503"+
    "\73\0\1\u0505\67\0\1\u0507\110\0\1\u0508\70\0\1\u0509"+
    "\110\0\1\u050a\100\0\1\u050b\126\0\1\u050c\77\0\1\u050d"+
    "\33\0\1\u050e\114\0\1\u050f\51\0\1\u0510\114\0\1\u0511"+
    "\62\0\1\u0509\107\0\1\u0512\67\0\1\u0513\113\0\1\u0514"+
    "\70\0\1\u0515\76\0\1\u0516\76\0\1\u0517\64\0\1\u0518"+
    "\76\0\1\u0519\104\0\1\u051a\70\0\1\u051b\104\0\1\u051c"+
    "\140\0\1\u051d\36\0\1\u051e\112\0\1\u051f\106\0\1\u04a0"+
    "\57\0\1\u0512\123\0\1\u0520\52\0\1\u0514\104\0\1\u051a"+
    "\51\0\1\u0521\123\0\1\u0522\123\0\1\u0523\24\0\1\u0524"+
    "\76\0\1\u0525\114\0\1\u0526\76\0\1\u0527\70\0\1\u0528"+
    "\75\0\1\u0529\77\0\1\u052a\111\0\1\u052b\61\0\1\u0528"+
    "\76\0\1\u052c\114\0\1\u052b\77\0\1\u0529\54\0\1\u052d"+
    "\123\0\1\u052e\61\0\1\u052f\101\0\1\u0530\122\0\1\u0531"+
    "\74\0\1\u0532\37\0\1\u0533\122\0\1\u0534\60\0\1\u0535"+
    "\67\0\1\u0536\102\0\1\u0537\101\0\1\u0538\115\0\1\u0539"+
    "\115\0\1\u053a\40\0\1\u053b\122\0\1\u053c\106\0\1\u053d"+
    "\60\0\1\u053e\100\0\1\u053f\113\0\1\u0540\57\0\1\u0541"+
    "\102\0\1\u0542\54\0\1\u0543\70\0\1\u0544\110\0\1\u0545"+
    "\113\0\1\u0546\74\0\1\u0547\63\0\1\u0548\72\0\1\u0549"+
    "\76\0\1\u054a\116\0\1\u054b\75\0\1\u054c\77\0\1\u054d"+
    "\65\0\1\u0548\105\0\1\u0549\76\0\1\u054e\61\0\1\u054f"+
    "\73\0\1\u0550\142\0\1\u0551\46\0\1\u0552\126\0\1\u0553"+
    "\34\0\1\u0554\76\0\1\u0555\70\0\1\u0556\123\0\1\u0557"+
    "\74\0\1\u0558\76\0\1\u0559\75\0\1\u0558\76\0\1\u055a"+
    "\65\0\1\u055b\117\0\1\u055c\64\0\1\u055d\70\0\1\u055e"+
    "\134\0\1\u055f\60\0\1\u0560\75\0\1\u0561\76\0\1\u0562"+
    "\100\0\1\u0563\76\0\1\u0561\114\0\1\u0564\55\0\1\u0560"+
    "\56\0\1\u0565\116\0\1\u055c\64\0\1\u0566\75\0\1\u0567"+
    "\65\0\1\u0568\73\0\1\u0568\112\0\1\u0569\73\0\1\u056a"+
    "\106\0\1\u056b\77\0\1\u056b\55\0\1\u056c\102\0\1\u056d"+
    "\70\0\1\u056e\107\0\1\u056f\77\0\1\u0570\72\0\1\u0571"+
    "\70\0\1\u0572\3\0\1\u0573\114\0\1\u0574\71\0\1\u0575"+
    "\73\0\1\u0575\107\0\1\u0576\63\0\1\u056f\103\0\1\u0577"+
    "\105\0\1\u0571\51\0\1\u0578\1\0\1\u0573\121\0\1\u0579"+
    "\51\0\1\u057a\126\0\1\u056c\65\0\1\u057b\100\0\1\u057c"+
    "\70\0\1\u057d\101\0\1\u057e\131\0\1\u057f\40\0\1\u0580"+
    "\104\0\1\u0581\73\0\1\u0580\77\0\1\u0582\71\0\1\u0583"+
    "\75\0\1\u0583\103\0\1\u0584\121\0\1\u0585\50\0\1\u0586"+
    "\135\0\1\u0587\33\0\1\u0588\73\0\1\u0589\117\0\1\u058a"+
    "\114\0\1\u058b\46\0\1\u058c\70\0\1\u058d\142\0\1\u058e"+
    "\37\0\1\u058f\77\0\1\u0590\101\0\1\u0590\132\0\1\u0591"+
    "\35\0\1\u0592\73\0\1\u054f\72\0\1\u0550\146\0\1\u0593"+
    "\43\0\1\u0594\131\0\1\u0595\51\0\1\u0596\76\0\1\u0597"+
    "\51\0\1\u0598\125\0\1\u0599\54\0\1\u059a\76\0\1\u059b"+
    "\114\0\1\u059c\77\0\1\u059c\54\0\1\u059a\76\0\1\u059b"+
    "\121\0\1\u0543\51\0\1\u059d\150\0\1\u059e\35\0\1\u059f"+
    "\136\0\1\u05a0\37\0\1\u05a1\107\0\1\u05a2\76\0\1\u05a3"+
    "\54\0\1\u05a4\130\0\1\u05a5\43\0\1\u05a6\127\0\1\u05a7"+
    "\71\0\1\u05a3\117\0\1\u05a8\34\0\1\u05a9\116\0\1\u05aa"+
    "\56\0\1\u05ab\102\0\1\u05ac\140\0\1\u05ad\50\0\1\u05ae"+
    "\121\0\1\u05af\74\0\1\u05b0\104\0\1\u05ad\51\0\1\u05ac"+
    "\101\0\1\u05b1\76\0\1\u05b2\72\0\1\u05aa\105\0\1\u05b3"+
    "\56\0\1\u05b4\116\0\1\u05b5\47\0\1\u05b6\117\0\1\u05b7"+
    "\51\0\1\u05b8\77\0\1\u05b9\104\0\1\u05ba\70\0\1\u05bb"+
    "\131\0\1\u05bc\105\0\1\u05bd\63\0\1\u05be\51\0\1\u05bf"+
    "\125\0\1\u05bc\50\0\1\u05c0\73\0\1\u05c1\75\0\1\u05c2"+
    "\76\0\1\u05c3\103\0\1\u05c4\114\0\1\u05c5\77\0\1\u05c5"+
    "\54\0\1\u05c4\125\0\1\u05c6\63\0\1\u05c7\111\0\1\u05c8"+
    "\110\0\1\u05c9\37\0\1\u05ca\102\0\1\u05cb\120\0\1\u05cc"+
    "\67\0\1\u05cd\54\0\1\u05ce\114\0\1\u05cf\100\0\1\u05cf"+
    "\56\0\1\u05d0\75\0\1\u05d1\76\0\1\u05d2\132\0\1\u05cc"+
    "\50\0\1\u05d3\114\0\1\u05d4\70\0\1\u05d5\105\0\1\u05d6"+
    "\60\0\1\u05d6\101\0\1\u05d7\74\0\1\u05d8\77\0\1\u05d9"+
    "\77\0\1\u05da\117\0\1\u05db\74\0\1\u05dc\70\0\1\u05dd"+
    "\77\0\1\u05dd\63\0\1\u05de\73\0\1\u05d8\113\0\1\u05df"+
    "\56\0\1\u05e0\102\0\1\u05e1\110\0\1\u0389\75\0\1\u05e2"+
    "\104\0\1\u05e3\53\0\1\u05e4\144\0\1\u05e5\40\0\1\u05e6"+
    "\101\0\1\u058c\62\0\1\u058d\120\0\1\u05e7\102\0\1\u05e8"+
    "\120\0\1\u05e9\42\0\1\u05e6\127\0\1\u05ea\56\0\1\u05e3"+
    "\77\0\1\u05e0\73\0\1\u05e1\112\0\1\u05eb\74\0\1\u05ec"+
    "\43\0\1\u05ed\135\0\1\u05ee\61\0\1\u05ef\77\0\1\u05f0"+
    "\76\0\1\u05f1\75\0\1\u05f2\57\0\1\u05f3\106\0\1\u05f4"+
    "\100\0\1\u05f5\102\0\1\u05f6\74\0\1\u05f7\65\0\1\u05f8"+
    "\65\0\1\u05f9\104\0\1\u05fa\140\0\1\u05fb\26\0\1\u05fc"+
    "\121\0\1\u05fd\63\0\1\u05fe\65\0\1\u05ff\123\0\1\u0600"+
    "\123\0\1\u0601\24\0\1\u0602\110\0\1\u0603\74\0\1\u0604"+
    "\131\0\1\u0605\42\0\1\u0606\122\0\1\u0607\45\0\1\u0608"+
    "\101\0\1\u0608\116\0\1\u0606\102\0\1\u0609\60\0\1\u060a"+
    "\134\0\1\u060b\40\0\1\u060c\76\0\1\u060d\72\0\1\u060e"+
    "\140\0\1\u060f\34\0\1\u0610\114\0\1\u0611\60\0\1\u0611"+
    "\77\0\1\u0612\114\0\1\u0613\60\0\1\u0614\101\0\1\u0615"+
    "\72\0\1\u0616\114\0\1\u0617\67\0\1\u0615\66\0\1\u0612"+
    "\117\0\1\u0613\55\0\1\u0614\70\0\1\u0618\77\0\1\u0619"+
    "\120\0\1\u061a\65\0\1\u061b\74\0\1\u061c\75\0\1\u061d"+
    "\134\0\1\u061e\75\0\1\u061f\40\0\1\u061c\115\0\1\u0620"+
    "\75\0\1\u061a\63\0\1\u0621\137\0\1\u0622\75\0\1\u0623"+
    "\26\0\1\u0624\75\0\1\u0625\130\0\1\u0626\115\0\1\u0627"+
    "\77\0\1\u0628\67\0\1\u0629\34\0\1\u062a\101\0\1\u062b"+
    "\126\0\1\u0626\65\0\1\u062c\65\0\1\u062d\110\0\1\u062c"+
    "\63\0\1\u062d\77\0\1\u062e\65\0\1\u062f\106\0\1\u0630"+
    "\65\0\1\u0631\114\0\1\u060a\132\0\1\u0632\42\0\1\u0633"+
    "\76\0\1\u0634\105\0\1\u0635\123\0\1\u0636\51\0\1\u0637"+
    "\62\0\1\u0638\112\0\1\u0639\67\0\1\u063a\67\0\1\u063b"+
    "\102\0\1\u063c\72\0\1\u063d\72\0\1\u063e\102\0\1\u063f"+
    "\117\0\1\u0640\73\0\1\u0641\60\0\1\u0642\73\0\1\u0643"+
    "\76\0\1\u0644\101\0\1\u0645\114\0\1\u0642\114\0\1\u0646"+
    "\76\0\1\u0647\61\0\1\u0648\57\0\1\u0649\76\0\1\u064a"+
    "\101\0\1\u064b\136\0\1\u064c\76\0\1\u064d\75\0\1\u064e"+
    "\76\0\1\u064c\76\0\1\u064f\54\0\1\u0650\112\0\1\u0651"+
    "\37\0\1\u0652\120\0\1\u0653\124\0\1\u0654\100\0\1\u0655"+
    "\72\0\1\u064e\53\0\1\u0656\74\0\1\u0657\76\0\1\u0658"+
    "\62\0\1\u064b\136\0\1\u0659\34\0\1\u065a\134\0\1\u065b"+
    "\76\0\1\u065c\52\0\1\u065d\74\0\1\u065e\123\0\1\u065f"+
    "\57\0\1\u0660\115\0\1\u0661\40\0\1\u0662\100\0\1\u0663"+
    "\104\0\1\u0664\73\0\1\u0665\111\0\1\u0666\77\0\1\u0667"+
    "\55\0\1\u0663\77\0\1\u0668\70\0\1\u0669\146\0\1\u066a"+
    "\40\0\1\u066b\110\0\1\u0668\123\0\1\u066c\42\0\1\u066b"+
    "\60\0\1\u066d\101\0\1\u066e\123\0\1\u066f\60\0\1\u0670"+
    "\75\0\1\u0670\72\0\1\u0671\73\0\1\u0671\76\0\1\u0672"+
    "\101\0\1\u0672\142\0\1\u0673\74\0\1\u0674\47\0\1\u0674"+
    "\130\0\1\u0675\33\0\1\u0676\102\0\1\u0677\115\0\1\u0678"+
    "\67\0\1\u0679\106\0\1\u067a\104\0\1\u067b\62\0\1\u0676"+
    "\67\0\1\u067c\114\0\1\u067d\66\0\1\u067e\103\0\1\u067f"+
    "\104\0\1\u0680\52\0\1\u0681\130\0\1\u0682\55\0\1\u0683"+
    "\65\0\1\u0684\101\0\1\u0685\73\0\1\u0686\73\0\1\u0687"+
    "\67\0\1\u0688\120\0\1\u0689\105\0\1\u068a\115\0\1\u068b"+
    "\50\0\1\u068c\77\0\1\u068c\63\0\1\u068d\77\0\1\u068e"+
    "\65\0\1\u068f\110\0\1\u0690\67\0\1\u0691\135\0\1\u0692"+
    "\51\0\1\u0693\60\0\1\u0694\123\0\1\u0695\60\0\1\u0695"+
    "\125\0\1\u0696\75\0\1\u0696\54\0\1\u0697\101\0\1\u0697"+
    "\104\0\1\u0698\55\0\1\u0699\116\0\1\u069a\54\0\1\u069b"+
    "\151\0\1\u069c\22\0\1\u069d\154\0\1\u069e\36\0\1\u0686"+
    "\66\0\1\u0687\70\0\1\u069f\122\0\1\u0689\106\0\1\u068a"+
    "\114\0\1\u06a0\42\0\1\u06a1\71\0\1\u06a2\65\0\1\u06a3"+
    "\110\0\1\u06a4\65\0\1\u06a5\146\0\1\u06a6\31\0\1\u06a7"+
    "\143\0\1\u06a8\70\0\1\u06a9\105\0\1\u06aa\36\0\1\u06ab"+
    "\76\0\1\u06ac\135\0\1\u06ad\36\0\1\u06ac\76\0\1\u06ab"+
    "\72\0\1\u06ae\114\0\1\u0575\124\0\1\u06af\61\0\1\u06b0"+
    "\74\0\1\u06b0\73\0\1\u06b1\60\0\1\u06b2\77\0\1\u06b2"+
    "\112\0\1\u06b3\57\0\1\u06b4\114\0\1\u06b4\53\0\1\u06ae"+
    "\120\0\1\u0575\124\0\1\u06b5\52\0\1\u06b6\76\0\1\u06b7"+
    "\54\0\1\u06b8\143\0\1\u06b9\77\0\1\u06ba\67\0\1\u06bb"+
    "\62\0\1\u06bc\76\0\1\u06bd\113\0\1\u06be\32\0\1\u06bf"+
    "\77\0\1\u06c0\102\0\1\u06c1\73\0\1\u06c1\106\0\1\u06c2"+
    "\105\0\1\u06c3\74\0\1\u06c4\70\0\1\u06c5\110\0\1\u06c6"+
    "\77\0\1\u06c6\65\0\1\u06c7\101\0\1\u06c7\61\0\1\u06c8"+
    "\104\0\1\u06c9\76\0\1\u06ca\76\0\1\u06cb\115\0\1\u06cc"+
    "\50\0\1\u06cd\123\0\1\u06ce\76\0\1\u06cf\76\0\1\u06d0"+
    "\100\0\1\u06d1\50\0\1\u06d2\101\0\1\u06d3\102\0\1\u06d4"+
    "\74\0\1\u06d4\126\0\1\u06d5\53\0\1\u06d6\101\0\1\u06d7"+
    "\73\0\1\u06d7\66\0\1\u06d8\103\0\1\u06d9\114\0\1\u06da"+
    "\77\0\1\u06da\55\0\1\u06d9\120\0\1\u06db\76\0\1\u06dc"+
    "\133\0\1\u06dd\14\0\1\u06de\134\0\1\u06df\44\0\1\u06e0"+
    "\126\0\1\u06e1\64\0\1\u06e0\106\0\1\u06d5\57\0\1\u06d6"+
    "\60\0\1\u06e2\114\0\1\u06e3\132\0\1\u06e4\37\0\1\u06e3"+
    "\134\0\1\u06e5\40\0\1\u06e6\75\0\1\u06e7\77\0\1\u06e8"+
    "\74\0\1\u06e7\103\0\1\u06e8\73\0\1\u06e9\76\0\1\u06ea"+
    "\65\0\1\u06eb\101\0\1\u06eb\107\0\1\u06ea\125\0\1\u06ec"+
    "\36\0\1\u06ed\117\0\1\u06ee\63\0\1\u06ef\101\0\1\u06ef"+
    "\107\0\1\u06ee\113\0\1\u06ec\34\0\1\u06ed\137\0\1\u06f0"+
    "\70\0\1\u06f1\77\0\1\u06f1\53\0\1\u06f2\76\0\1\u06f3"+
    "\101\0\1\u06f4\76\0\1\u06f5\131\0\1\u06f6\76\0\1\u06f7"+
    "\76\0\1\u06f8\76\0\1\u06f9\34\0\1\u06fa\141\0\1\u06fb"+
    "\76\0\1\u06fc\76\0\1\u06fd\76\0\1\u06fe\51\0\1\u06fa"+
    "\107\0\1\u06ff\66\0\1\u0700\121\0\1\u0701\77\0\1\u0701"+
    "\67\0\1\u0702\115\0\1\u0703\20\0\1\u0704\120\0\1\u0705"+
    "\77\0\1\u0706\104\0\1\u06ff\75\0\1\u0707\74\0\1\u0707"+
    "\75\0\1\u0708\74\0\1\u0700\50\0\1\u0709\104\0\1\u070a"+
    "\114\0\1\u070a\51\0\1\u070b\130\0\1\u070c\57\0\1\u070d"+
    "\76\0\1\u070e\76\0\1\u070f\117\0\1\u070c\60\0\1\u070d"+
    "\76\0\1\u070e\76\0\1\u070f\71\0\1\u0710\71\0\1\u0711"+
    "\104\0\1\u0710\73\0\1\u0712\114\0\1\u0712\51\0\1\u0713"+
    "\134\0\1\u0714\75\0\1\u0714\42\0\1\u0715\141\0\1\u0716"+
    "\70\0\1\u0417\104\0\1\u0717\57\0\1\u0718\75\0\1\u0719"+
    "\77\0\1\u071a\123\0\1\u071b\42\0\1\u06e6\56\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[99225];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\1\15\0\1\1\1\0\1\1\34\0\7\11"+
    "\1\1\23\0\2\1\2\0\1\1\56\0\1\1\20\0"+
    "\1\1\13\0\2\1\3\0\1\11\202\0\1\11\1\0"+
    "\1\11\13\0\1\1\1\0\1\11\2\0\1\11\1\0"+
    "\1\11\2\0\1\1\1\11\2\0\2\11\4\0\1\1"+
    "\1\0\1\11\4\0\1\1\20\0\1\1\2\0\1\1"+
    "\3\0\1\11\7\0\1\11\5\0\1\11\30\0\1\1"+
    "\2\0\1\1\2\0\1\11\13\0\1\11\2\0\1\1"+
    "\3\0\1\1\14\0\1\1\10\0\1\1\6\0\1\11"+
    "\7\0\1\11\12\0\2\11\15\0\1\11\2\0\1\11"+
    "\44\0\1\11\25\0\1\1\12\0\1\11\1\1\3\0"+
    "\1\1\12\0\1\1\6\0\1\11\4\0\1\11\1\0"+
    "\1\11\1\0\1\11\15\0\1\11\17\0\1\1\1\11"+
    "\12\0\1\1\7\0\1\1\1\11\24\0\1\1\41\0"+
    "\1\1\4\0\1\11\10\0\2\11\1\0\1\11\33\0"+
    "\3\11\3\0\1\11\17\0\1\11\6\0\2\1\16\0"+
    "\1\11\3\0\1\11\1\0\1\11\3\0\1\11\1\0"+
    "\1\11\1\0\1\11\4\0\1\11\1\0\1\11\1\0"+
    "\3\11\55\0\1\11\3\0\2\11\2\0\1\11\23\0"+
    "\1\11\1\1\2\0\1\11\1\0\1\11\2\0\1\1"+
    "\13\0\1\11\1\0\1\11\25\0\1\11\1\0\1\11"+
    "\14\0\1\11\24\0\1\1\1\11\4\0\1\11\11\0"+
    "\1\1\1\0\1\11\4\0\1\11\4\0\1\1\1\0"+
    "\1\11\7\0\1\1\33\0\2\11\4\0\1\11\32\0"+
    "\2\11\4\0\1\11\1\0\1\11\3\0\1\11\1\0"+
    "\1\11\5\0\1\1\6\0\1\11\2\0\1\11\2\0"+
    "\1\11\2\0\3\11\3\0\1\1\10\0\3\11\3\0"+
    "\1\1\6\0\3\11\3\0\3\11\1\1\2\11\3\0"+
    "\3\11\1\0\3\11\3\0\1\1\21\0\1\11\3\0"+
    "\2\11\7\0\2\11\6\0\1\1\11\0\1\11\11\0"+
    "\1\11\33\0\1\11\1\0\1\11\15\0\1\11\1\0"+
    "\1\11\7\0\1\11\5\0\1\11\3\0\1\11\6\0"+
    "\1\11\1\0\1\11\3\0\1\11\10\0\1\11\1\0"+
    "\1\11\5\0\1\11\15\0\2\11\1\0\1\11\3\0"+
    "\2\1\22\0\1\11\4\0\2\11\5\0\2\11\2\0"+
    "\1\1\4\0\1\11\3\0\1\11\3\0\2\11\6\0"+
    "\1\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\12\0\1\11\2\0\1\11\10\0"+
    "\2\11\2\0\1\11\4\0\1\1\4\0\3\11\6\0"+
    "\1\11\6\0\1\11\1\0\2\11\1\0\1\11\14\0"+
    "\1\11\7\0\2\11\6\0\1\11\2\0\1\11\6\0"+
    "\1\11\1\0\1\11\2\0\2\1\1\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\37\0\1\11\1\1\1\11"+
    "\1\1\1\11\6\0\5\11\4\0\1\11\1\0\1\11"+
    "\11\0\1\11\5\0\2\11\24\0\1\11\10\0\2\11"+
    "\1\0\1\11\12\0\1\11\11\0\1\11\4\0\1\11"+
    "\2\0\1\11\4\0\3\11\1\0\1\11\1\0\1\11"+
    "\14\0\1\11\2\0\2\11\1\0\2\11\1\0\1\11"+
    "\10\0\3\11\23\0\2\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\14\0\1\11\4\0\2\11"+
    "\14\0\4\11\1\0\2\11\5\0\1\11\2\0\1\11"+
    "\2\0\3\11\1\0\6\11\1\0\1\11\10\0\1\11"+
    "\4\0\3\11\5\0\1\11\2\0\1\11\1\0\5\11"+
    "\1\0\1\11\1\0\1\11\7\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1819];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn,value);
        }
    private Symbol symbol(int type){
            return new Symbol(type, yyline, yycolumn);
        }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 266: 
          { return new Symbol(sym.DISGUSTING, yychar, yyline, yytext());
          }
        case 275: break;
        case 18: 
          { return new Symbol(sym.ITS, yychar, yyline, yytext());
          }
        case 276: break;
        case 132: 
          { return new Symbol(sym.WHOSE, yychar, yyline, yytext());
          }
        case 277: break;
        case 12: 
          { return new Symbol(sym.HI, yychar, yyline, yytext());
          }
        case 278: break;
        case 248: 
          { return new Symbol(sym.TWENTIETH, yychar, yyline, yytext());
          }
        case 279: break;
        case 124: 
          { return new Symbol(sym.THEIR, yychar, yyline, yytext());
          }
        case 280: break;
        case 138: 
          { return new Symbol(sym.LOYAL, yychar, yyline, yytext());
          }
        case 281: break;
        case 36: 
          { return new Symbol(sym.WHO, yychar, yyline, yytext());
          }
        case 282: break;
        case 161: 
          { return new Symbol(sym.EASILY, yychar, yyline, yytext());
          }
        case 283: break;
        case 109: 
          { return new Symbol(sym.SILLY, yychar, yyline, yytext());
          }
        case 284: break;
        case 84: 
          { return new Symbol(sym.MOON, yychar, yyline, yytext());
          }
        case 285: break;
        case 133: 
          { return new Symbol(sym.ADULT, yychar, yyline, yytext());
          }
        case 286: break;
        case 272: 
          { return new Symbol(sym.ADVENTUROUS, yychar, yyline, yytext());
          }
        case 287: break;
        case 139: 
          { return new Symbol(sym.DIRTY, yychar, yyline, yytext());
          }
        case 288: break;
        case 68: 
          { return new Symbol(sym.THEY, yychar, yyline, yytext());
          }
        case 289: break;
        case 48: 
          { return new Symbol(sym.BEE, yychar, yyline, yytext());
          }
        case 290: break;
        case 226: 
          { return new Symbol(sym.INSECURE, yychar, yyline, yytext());
          }
        case 291: break;
        case 225: 
          { return new Symbol(sym.ICECREAM, yychar, yyline, yytext());
          }
        case 292: break;
        case 49: 
          { return new Symbol(sym.BED, yychar, yyline, yytext());
          }
        case 293: break;
        case 40: 
          { return new Symbol(sym.ANT, yychar, yyline, yytext());
          }
        case 294: break;
        case 9: 
          { return new Symbol(sym.abrllac, yychar, yyline, yytext());
          }
        case 295: break;
        case 172: 
          { return new Symbol(sym.TWENTY, yychar, yyline, yytext());
          }
        case 296: break;
        case 79: 
          { return new Symbol(sym.MUCH, yychar, yyline, yytext());
          }
        case 297: break;
        case 98: 
          { return new Symbol(sym.NICE, yychar, yyline, yytext());
          }
        case 298: break;
        case 231: 
          { return new Symbol(sym.STRANGER, yychar, yyline, yytext());
          }
        case 299: break;
        case 209: 
          { return new Symbol(sym.TEACHER, yychar, yyline, yytext());
          }
        case 300: break;
        case 16: 
          { return new Symbol(sym.AN, yychar, yyline, yytext());
          }
        case 301: break;
        case 192: 
          { return new Symbol(sym.FIERCE, yychar, yyline, yytext());
          }
        case 302: break;
        case 143: 
          { return new Symbol(sym.CLEAN, yychar, yyline, yytext());
          }
        case 303: break;
        case 67: 
          { return new Symbol(sym.THIS, yychar, yyline, yytext());
          }
        case 304: break;
        case 15: 
          { return new Symbol(sym.AM, yychar, yyline, yytext());
          }
        case 305: break;
        case 81: 
          { return new Symbol(sym.RUDE, yychar, yyline, yytext());
          }
        case 306: break;
        case 182: 
          { return new Symbol(sym.DOCTOR, yychar, yyline, yytext());
          }
        case 307: break;
        case 75: 
          { return new Symbol(sym.WHOM, yychar, yyline, yytext());
          }
        case 308: break;
        case 190: 
          { return new Symbol(sym.BORING, yychar, yyline, yytext());
          }
        case 309: break;
        case 267: 
          { return new Symbol(sym.PASSIONATE, yychar, yyline, yytext());
          }
        case 310: break;
        case 253: 
          { return new Symbol(sym.DELICIOUS, yychar, yyline, yytext());
          }
        case 311: break;
        case 147: 
          { return new Symbol(sym.FIRST, yychar, yyline, yytext());
          }
        case 312: break;
        case 80: 
          { return new Symbol(sym.MANY, yychar, yyline, yytext());
          }
        case 313: break;
        case 103: 
          { return new Symbol(sym.HOUSE, yychar, yyline, yytext());
          }
        case 314: break;
        case 235: 
          { return new Symbol(sym.GORGEOUS, yychar, yyline, yytext());
          }
        case 315: break;
        case 258: 
          { return new Symbol(sym.BUTTERFLY, yychar, yyline, yytext());
          }
        case 316: break;
        case 86: 
          { return new Symbol(sym.DOOR, yychar, yyline, yytext());
          }
        case 317: break;
        case 107: 
          { return new Symbol(sym.EIGHT, yychar, yyline, yytext());
          }
        case 318: break;
        case 247: 
          { return new Symbol(sym.SCIENTIST, yychar, yyline, yytext());
          }
        case 319: break;
        case 5: 
          { return new Symbol(sym.cerrad, yychar, yyline, yytext());
          }
        case 320: break;
        case 50: 
          { return new Symbol(sym.BAD, yychar, yyline, yytext());
          }
        case 321: break;
        case 215: 
          { return new Symbol(sym.CURIOUS, yychar, yyline, yytext());
          }
        case 322: break;
        case 152: 
          { return new Symbol(sym.PHONE, yychar, yyline, yytext());
          }
        case 323: break;
        case 240: 
          { return new Symbol(sym.CREATIVE, yychar, yyline, yytext());
          }
        case 324: break;
        case 220: 
          { return new Symbol(sym.PICTURE, yychar, yyline, yytext());
          }
        case 325: break;
        case 140: 
          { return new Symbol(sym.CHILD, yychar, yyline, yytext());
          }
        case 326: break;
        case 27: 
          { return new Symbol(sym.HAT, yychar, yyline, yytext());
          }
        case 327: break;
        case 171: 
          { return new Symbol(sym.TWELVE, yychar, yyline, yytext());
          }
        case 328: break;
        case 26: 
          { return new Symbol(sym.HER, yychar, yyline, yytext());
          }
        case 329: break;
        case 188: 
          { return new Symbol(sym.CLUMSY, yychar, yyline, yytext());
          }
        case 330: break;
        case 251: 
          { return new Symbol(sym.DISHONEST, yychar, yyline, yytext());
          }
        case 331: break;
        case 157: 
          { return new Symbol(sym.ORANGE, yychar, yyline, yytext());
          }
        case 332: break;
        case 144: 
          { return new Symbol(sym.comm, yychar, yyline, yytext());
          }
        case 333: break;
        case 263: 
          { return new Symbol(sym.OPTIMISTIC, yychar, yyline, yytext());
          }
        case 334: break;
        case 22: 
          { return new Symbol(sym.ONE, yychar, yyline, yytext());
          }
        case 335: break;
        case 115: 
          { return new Symbol(sym.SALAD, yychar, yyline, yytext());
          }
        case 336: break;
        case 125: 
          { return new Symbol(sym.THESE, yychar, yyline, yytext());
          }
        case 337: break;
        case 19: 
          { return new Symbol(sym.YOU, yychar, yyline, yytext());
          }
        case 338: break;
        case 239: 
          { return new Symbol(sym.CAUTIOUS, yychar, yyline, yytext());
          }
        case 339: break;
        case 13: 
          { return new Symbol(sym.HE, yychar, yyline, yytext());
          }
        case 340: break;
        case 71: 
          { return new Symbol(sym.TREE, yychar, yyline, yytext());
          }
        case 341: break;
        case 264: 
          { return new Symbol(sym.UNFAITHFUL, yychar, yyline, yytext());
          }
        case 342: break;
        case 194: 
          { return new Symbol(sym.FRIEND, yychar, yyline, yytext());
          }
        case 343: break;
        case 73: 
          { return new Symbol(sym.WHAT, yychar, yyline, yytext());
          }
        case 344: break;
        case 116: 
          { return new Symbol(sym.SMART, yychar, yyline, yytext());
          }
        case 345: break;
        case 41: 
          { return new Symbol(sym.RED, yychar, yyline, yytext());
          }
        case 346: break;
        case 243: 
          { return new Symbol(sym.IMPATIENT, yychar, yyline, yytext());
          }
        case 347: break;
        case 238: 
          { return new Symbol(sym.CHARMING, yychar, yyline, yytext());
          }
        case 348: break;
        case 186: 
          { return new Symbol(sym.dospum, yychar, yyline, yytext());
          }
        case 349: break;
        case 21: 
          { return new Symbol(sym.OLD, yychar, yyline, yytext());
          }
        case 350: break;
        case 233: 
          { return new Symbol(sym.ATHLETIC, yychar, yyline, yytext());
          }
        case 351: break;
        case 69: 
          { return new Symbol(sym.THAT, yychar, yyline, yytext());
          }
        case 352: break;
        case 43: 
          { return new Symbol(sym.DOG, yychar, yyline, yytext());
          }
        case 353: break;
        case 262: 
          { return new Symbol(sym.INCREDIBLE, yychar, yyline, yytext());
          }
        case 354: break;
        case 112: 
          { return new Symbol(sym.SHINY, yychar, yyline, yytext());
          }
        case 355: break;
        case 114: 
          { return new Symbol(sym.SEVEN, yychar, yyline, yytext());
          }
        case 356: break;
        case 97: 
          { return new Symbol(sym.FAST, yychar, yyline, yytext());
          }
        case 357: break;
        case 252: 
          { return new Symbol(sym.DIFFERENT, yychar, yyline, yytext());
          }
        case 358: break;
        case 217: 
          { return new Symbol(sym.CERTAIN, yychar, yyline, yytext());
          }
        case 359: break;
        case 187: 
          { return new Symbol(sym.CARING, yychar, yyline, yytext());
          }
        case 360: break;
        case 146: 
          { return new Symbol(sym.BRAVE, yychar, yyline, yytext());
          }
        case 361: break;
        case 104: 
          { return new Symbol(sym.HORSE, yychar, yyline, yytext());
          }
        case 362: break;
        case 83: 
          { return new Symbol(sym.LOUD, yychar, yyline, yytext());
          }
        case 363: break;
        case 61: 
          { return new Symbol(sym.SOME, yychar, yyline, yytext());
          }
        case 364: break;
        case 122: 
          { return new Symbol(sym.THIRD, yychar, yyline, yytext());
          }
        case 365: break;
        case 197: 
          { return new Symbol(sym.POLITE, yychar, yyline, yytext());
          }
        case 366: break;
        case 74: 
          { return new Symbol(sym.WHEN, yychar, yyline, yytext());
          }
        case 367: break;
        case 30: 
          { return new Symbol(sym.SHE, yychar, yyline, yytext());
          }
        case 368: break;
        case 254: 
          { return new Symbol(sym.DEPENDENT, yychar, yyline, yytext());
          }
        case 369: break;
        case 92: 
          { return new Symbol(sym.BOTH, yychar, yyline, yytext());
          }
        case 370: break;
        case 191: 
          { return new Symbol(sym.BANANA, yychar, yyline, yytext());
          }
        case 371: break;
        case 268: 
          { return new Symbol(sym.INTERESTING, yychar, yyline, yytext());
          }
        case 372: break;
        case 4: 
          { return new Symbol(sym.punn, yychar, yyline, yytext());
          }
        case 373: break;
        case 52: 
          { return new Symbol(sym.FUN, yychar, yyline, yytext());
          }
        case 374: break;
        case 91: 
          { return new Symbol(sym.BOOK, yychar, yyline, yytext());
          }
        case 375: break;
        case 189: 
          { return new Symbol(sym.CLEVER, yychar, yyline, yytext());
          }
        case 376: break;
        case 32: 
          { return new Symbol(sym.TEN, yychar, yyline, yytext());
          }
        case 377: break;
        case 54: 
          { return new Symbol(sym.PEN, yychar, yyline, yytext());
          }
        case 378: break;
        case 111: 
          { return new Symbol(sym.SHIRT, yychar, yyline, yytext());
          }
        case 379: break;
        case 255: 
          { return new Symbol(sym.CONFIDENT, yychar, yyline, yytext());
          }
        case 380: break;
        case 183: 
          { return new Symbol(sym.GUITAR, yychar, yyline, yytext());
          }
        case 381: break;
        case 17: 
          { return new Symbol(sym.MY, yychar, yyline, yytext());
          }
        case 382: break;
        case 219: 
          { return new Symbol(sym.FOOLISH, yychar, yyline, yytext());
          }
        case 383: break;
        case 164: 
          { return new Symbol(sym.SECOND, yychar, yyline, yytext());
          }
        case 384: break;
        case 38: 
          { return new Symbol(sym.ALL, yychar, yyline, yytext());
          }
        case 385: break;
        case 148: 
          { return new Symbol(sym.FIFTH, yychar, yyline, yytext());
          }
        case 386: break;
        case 214: 
          { return new Symbol(sym.GIRAFFE, yychar, yyline, yytext());
          }
        case 387: break;
        case 241: 
          { return new Symbol(sym.FRIENDLY, yychar, yyline, yytext());
          }
        case 388: break;
        case 53: 
          { return new Symbol(sym.FEW, yychar, yyline, yytext());
          }
        case 389: break;
        case 77: 
          { return new Symbol(sym.WELL, yychar, yyline, yytext());
          }
        case 390: break;
        case 166: 
          { return new Symbol(sym.STRONG, yychar, yyline, yytext());
          }
        case 391: break;
        case 64: 
          { return new Symbol(sym.SHOE, yychar, yyline, yytext());
          }
        case 392: break;
        case 245: 
          { return new Symbol(sym.ENERGETIC, yychar, yyline, yytext());
          }
        case 393: break;
        case 85: 
          { return new Symbol(sym.LAMP, yychar, yyline, yytext());
          }
        case 394: break;
        case 212: 
          { return new Symbol(sym.ANOTHER, yychar, yyline, yytext());
          }
        case 395: break;
        case 121: 
          { return new Symbol(sym.TENTH, yychar, yyline, yytext());
          }
        case 396: break;
        case 37: 
          { return new Symbol(sym.ARE, yychar, yyline, yytext());
          }
        case 397: break;
        case 158: 
          { return new Symbol(sym.HONEST, yychar, yyline, yytext());
          }
        case 398: break;
        case 44: 
          { return new Symbol(sym.COW, yychar, yyline, yytext());
          }
        case 399: break;
        case 106: 
          { return new Symbol(sym.HAPPY, yychar, yyline, yytext());
          }
        case 400: break;
        case 70: 
          { return new Symbol(sym.TALL, yychar, yyline, yytext());
          }
        case 401: break;
        case 58: 
          { return new Symbol(sym.HERO, yychar, yyline, yytext());
          }
        case 402: break;
        case 227: 
          { return new Symbol(sym.ELEPHANT, yychar, yyline, yytext());
          }
        case 403: break;
        case 131: 
          { return new Symbol(sym.WHERE, yychar, yyline, yytext());
          }
        case 404: break;
        case 82: 
          { return new Symbol(sym.LION, yychar, yyline, yytext());
          }
        case 405: break;
        case 176: 
          { return new Symbol(sym.MODEST, yychar, yyline, yytext());
          }
        case 406: break;
        case 169: 
          { return new Symbol(sym.TOMATO, yychar, yyline, yytext());
          }
        case 407: break;
        case 137: 
          { return new Symbol(sym.ROUGH, yychar, yyline, yytext());
          }
        case 408: break;
        case 110: 
          { return new Symbol(sym.SIXTH, yychar, yyline, yytext());
          }
        case 409: break;
        case 167: 
          { return new Symbol(sym.SLOWLY, yychar, yyline, yytext());
          }
        case 410: break;
        case 56: 
          { return new Symbol(sym.YOUR, yychar, yyline, yytext());
          }
        case 411: break;
        case 207: 
          { return new Symbol(sym.SEVENTH, yychar, yyline, yytext());
          }
        case 412: break;
        case 181: 
          { return new Symbol(sym.LAWYER, yychar, yyline, yytext());
          }
        case 413: break;
        case 163: 
          { return new Symbol(sym.SINGER, yychar, yyline, yytext());
          }
        case 414: break;
        case 102: 
          { return new Symbol(sym.OTHER, yychar, yyline, yytext());
          }
        case 415: break;
        case 203: 
          { return new Symbol(sym.ELEGANT, yychar, yyline, yytext());
          }
        case 416: break;
        case 72: 
          { return new Symbol(sym.WISE, yychar, yyline, yytext());
          }
        case 417: break;
        case 273: 
          { return new Symbol(sym.RESPONSIBLE, yychar, yyline, yytext());
          }
        case 418: break;
        case 156: 
          { return new Symbol(sym.QUIET, yychar, yyline, yytext());
          }
        case 419: break;
        case 117: 
          { return new Symbol(sym.SMALL, yychar, yyline, yytext());
          }
        case 420: break;
        case 261: 
          { return new Symbol(sym.FANTASTIC, yychar, yyline, yytext());
          }
        case 421: break;
        case 218: 
          { return new Symbol(sym.puncom, yychar, yyline, yytext());
          }
        case 422: break;
        case 31: 
          { return new Symbol(sym.SAD, yychar, yyline, yytext());
          }
        case 423: break;
        case 57: 
          { return new Symbol(sym.UGLY, yychar, yyline, yytext());
          }
        case 424: break;
        case 201: 
          { return new Symbol(sym.HUNDRED, yychar, yyline, yytext());
          }
        case 425: break;
        case 7: 
          { return new Symbol(sym.abrpar, yychar, yyline, yytext());
          }
        case 426: break;
        case 33: 
          { return new Symbol(sym.THE, yychar, yyline, yytext());
          }
        case 427: break;
        case 265: 
          { return new Symbol(sym.TELEVISION, yychar, yyline, yytext());
          }
        case 428: break;
        case 42: 
          { return new Symbol(sym.RIVER, yychar, yyline, yytext());
          }
        case 429: break;
        case 20: 
          { return new Symbol(sym.OUR, yychar, yyline, yytext());
          }
        case 430: break;
        case 184: 
          { return new Symbol(sym.GENTLE, yychar, yyline, yytext());
          }
        case 431: break;
        case 174: 
          { return new Symbol(sym.ARTIST, yychar, yyline, yytext());
          }
        case 432: break;
        case 246: 
          { return new Symbol(sym.EXCELLENT, yychar, yyline, yytext());
          }
        case 433: break;
        case 204: 
          { return new Symbol(sym.SINCERE, yychar, yyline, yytext());
          }
        case 434: break;
        case 129: 
          { return new Symbol(sym.WITTY, yychar, yyline, yytext());
          }
        case 435: break;
        case 222: 
          { return new Symbol(sym.VARIOUS, yychar, yyline, yytext());
          }
        case 436: break;
        case 88: 
          { return new Symbol(sym.COLD, yychar, yyline, yytext());
          }
        case 437: break;
        case 2: 
          { return new Symbol(sym.I, yychar, yyline, yytext());
          }
        case 438: break;
        case 236: 
          { return new Symbol(sym.GENEROUS, yychar, yyline, yytext());
          }
        case 439: break;
        case 211: 
          { return new Symbol(sym.AMAZING, yychar, yyline, yytext());
          }
        case 440: break;
        case 120: 
          { return new Symbol(sym.TIGER, yychar, yyline, yytext());
          }
        case 441: break;
        case 185: 
          { return new Symbol(sym.GARDEN, yychar, yyline, yytext());
          }
        case 442: break;
        case 6: 
          { return new Symbol(sym.cerrin, yychar, yyline, yytext());
          }
        case 443: break;
        case 256: 
          { return new Symbol(sym.CAREFULLY, yychar, yyline, yytext());
          }
        case 444: break;
        case 142: 
          { return new Symbol(sym.CLOCK, yychar, yyline, yytext());
          }
        case 445: break;
        case 232: 
          { return new Symbol(sym.AIRPLANE, yychar, yyline, yytext());
          }
        case 446: break;
        case 11: 
          { return new Symbol(sym.IT, yychar, yyline, yytext());
          }
        case 447: break;
        case 65: 
          { return new Symbol(sym.SAME, yychar, yyline, yytext());
          }
        case 448: break;
        case 228: 
          { return new Symbol(sym.ELEVENTH, yychar, yyline, yytext());
          }
        case 449: break;
        case 244: 
          { return new Symbol(sym.HUNDREDTH, yychar, yyline, yytext());
          }
        case 450: break;
        case 170: 
          { return new Symbol(sym.THEIRS, yychar, yyline, yytext());
          }
        case 451: break;
        case 28: 
          { return new Symbol(sym.SIX, yychar, yyline, yytext());
          }
        case 452: break;
        case 8: 
          { return new Symbol(sym.cerrpar, yychar, yyline, yytext());
          }
        case 453: break;
        case 51: 
          { return new Symbol(sym.KEY, yychar, yyline, yytext());
          }
        case 454: break;
        case 76: 
          { return new Symbol(sym.WEAK, yychar, yyline, yytext());
          }
        case 455: break;
        case 234: 
          { return new Symbol(sym.ARROGANT, yychar, yyline, yytext());
          }
        case 456: break;
        case 35: 
          { return new Symbol(sym.WHY, yychar, yyline, yytext());
          }
        case 457: break;
        case 224: 
          { return new Symbol(sym.QUICKLY, yychar, yyline, yytext());
          }
        case 458: break;
        case 134: 
          { return new Symbol(sym.ACTOR, yychar, yyline, yytext());
          }
        case 459: break;
        case 127: 
          { return new Symbol(sym.TABLE, yychar, yyline, yytext());
          }
        case 460: break;
        case 29: 
          { return new Symbol(sym.SUN, yychar, yyline, yytext());
          }
        case 461: break;
        case 196: 
          { return new Symbol(sym.POTATO, yychar, yyline, yytext());
          }
        case 462: break;
        case 123: 
          { return new Symbol(sym.THOSE, yychar, yyline, yytext());
          }
        case 463: break;
        case 141: 
          { return new Symbol(sym.CHAIR, yychar, yyline, yytext());
          }
        case 464: break;
        case 100: 
          { return new Symbol(sym.NAME, yychar, yyline, yytext());
          }
        case 465: break;
        case 25: 
          { return new Symbol(sym.HOW, yychar, yyline, yytext());
          }
        case 466: break;
        case 237: 
          { return new Symbol(sym.COWARDLY, yychar, yyline, yytext());
          }
        case 467: break;
        case 221: 
          { return new Symbol(sym.PATIENT, yychar, yyline, yytext());
          }
        case 468: break;
        case 154: 
          { return new Symbol(sym.NURSE, yychar, yyline, yytext());
          }
        case 469: break;
        case 269: 
          { return new Symbol(sym.INTELLIGENT, yychar, yyline, yytext());
          }
        case 470: break;
        case 55: 
          { return new Symbol(sym.FISH, yychar, yyline, yytext());
          }
        case 471: break;
        case 260: 
          { return new Symbol(sym.BRILLIANT, yychar, yyline, yytext());
          }
        case 472: break;
        case 229: 
          { return new Symbol(sym.ENGINEER, yychar, yyline, yytext());
          }
        case 473: break;
        case 179: 
          { return new Symbol(sym.LOUDLY, yychar, yyline, yytext());
          }
        case 474: break;
        case 90: 
          { return new Symbol(sym.CALM, yychar, yyline, yytext());
          }
        case 475: break;
        case 149: 
          { return new Symbol(sym.FUNNY, yychar, yyline, yytext());
          }
        case 476: break;
        case 198: 
          { return new Symbol(sym.PENCIL , yychar, yyline, yytext());
          }
        case 477: break;
        case 153: 
          { return new Symbol(sym.NINTH, yychar, yyline, yytext());
          }
        case 478: break;
        case 59: 
          { return new Symbol(sym.HERE, yychar, yyline, yytext());
          }
        case 479: break;
        case 60: 
          { return new Symbol(sym.HARD, yychar, yyline, yytext());
          }
        case 480: break;
        case 118: 
          { return new Symbol(sym.SNAKE, yychar, yyline, yytext());
          }
        case 481: break;
        case 160: 
          { return new Symbol(sym.EIGHTH, yychar, yyline, yytext());
          }
        case 482: break;
        case 93: 
          { return new Symbol(sym.BALL, yychar, yyline, yytext());
          }
        case 483: break;
        case 274: 
          { return new Symbol(sym.PESSIMISTIC, yychar, yyline, yytext());
          }
        case 484: break;
        case 99: 
          { return new Symbol(sym.NINE, yychar, yyline, yytext());
          }
        case 485: break;
        case 1: 
          { /*Ignore*/
          }
        case 486: break;
        case 95: 
          { return new Symbol(sym.FIVE, yychar, yyline, yytext());
          }
        case 487: break;
        case 193: 
          { return new Symbol(sym.FOURTH, yychar, yyline, yytext());
          }
        case 488: break;
        case 165: 
          { return new Symbol(sym.STUPID, yychar, yyline, yytext());
          }
        case 489: break;
        case 175: 
          { return new Symbol(sym.ALWAYS, yychar, yyline, yytext());
          }
        case 490: break;
        case 78: 
          { return new Symbol(sym.MINE, yychar, yyline, yytext());
          }
        case 491: break;
        case 130: 
          { return new Symbol(sym.WHICH, yychar, yyline, yytext());
          }
        case 492: break;
        case 105: 
          { return new Symbol(sym.HELLO, yychar, yyline, yytext());
          }
        case 493: break;
        case 213: 
          { return new Symbol(sym.ANXIOUS, yychar, yyline, yytext());
          }
        case 494: break;
        case 24: 
          { return new Symbol(sym.HOT, yychar, yyline, yytext());
          }
        case 495: break;
        case 3: 
          { return new Symbol(sym.A, yychar, yyline, yytext());
          }
        case 496: break;
        case 210: 
          { return new Symbol(sym.TWELFTH, yychar, yyline, yytext());
          }
        case 497: break;
        case 178: 
          { return new Symbol(sym.RABBIT, yychar, yyline, yytext());
          }
        case 498: break;
        case 136: 
          { return new Symbol(sym.MUSIC, yychar, yyline, yytext());
          }
        case 499: break;
        case 14: 
          { return new Symbol(sym.WE, yychar, yyline, yytext());
          }
        case 500: break;
        case 47: 
          { return new Symbol(sym.BIG, yychar, yyline, yytext());
          }
        case 501: break;
        case 199: 
          { return new Symbol(sym.PARENT, yychar, yyline, yytext());
          }
        case 502: break;
        case 242: 
          { return new Symbol(sym.NEIGHBOR, yychar, yyline, yytext());
          }
        case 503: break;
        case 270: 
          { return new Symbol(sym.INDIFFERENT, yychar, yyline, yytext());
          }
        case 504: break;
        case 202: 
          { return new Symbol(sym.HAPPILY, yychar, yyline, yytext());
          }
        case 505: break;
        case 168: 
          { return new Symbol(sym.SPIDER, yychar, yyline, yytext());
          }
        case 506: break;
        case 162: 
          { return new Symbol(sym.ELEVEN, yychar, yyline, yytext());
          }
        case 507: break;
        case 119: 
          { return new Symbol(sym.TIRED, yychar, yyline, yytext());
          }
        case 508: break;
        case 151: 
          { return new Symbol(sym.PIZZA, yychar, yyline, yytext());
          }
        case 509: break;
        case 96: 
          { return new Symbol(sym.FOUR, yychar, yyline, yytext());
          }
        case 510: break;
        case 126: 
          { return new Symbol(sym.THREE, yychar, yyline, yytext());
          }
        case 511: break;
        case 150: 
          { return new Symbol(sym.PILOT, yychar, yyline, yytext());
          }
        case 512: break;
        case 145: 
          { return new Symbol(sym.BEACH, yychar, yyline, yytext());
          }
        case 513: break;
        case 108: 
          { return new Symbol(sym.EVERY, yychar, yyline, yytext());
          }
        case 514: break;
        case 45: 
          { return new Symbol(sym.CAT, yychar, yyline, yytext());
          }
        case 515: break;
        case 208: 
          { return new Symbol(sym.STUDENT, yychar, yyline, yytext());
          }
        case 516: break;
        case 206: 
          { return new Symbol(sym.SEVERAL, yychar, yyline, yytext());
          }
        case 517: break;
        case 257: 
          { return new Symbol(sym.BOOKSHELF, yychar, yyline, yytext());
          }
        case 518: break;
        case 128: 
          { return new Symbol(sym.TRAIN, yychar, yyline, yytext());
          }
        case 519: break;
        case 101: 
          { return new Symbol(sym.YOURS, yychar, yyline, yytext());
          }
        case 520: break;
        case 113: 
          { return new Symbol(sym.SHORT, yychar, yyline, yytext());
          }
        case 521: break;
        case 271: 
          { return new Symbol(sym.INDEPENDENT, yychar, yyline, yytext());
          }
        case 522: break;
        case 66: 
          { return new Symbol(sym.SLOW, yychar, yyline, yytext());
          }
        case 523: break;
        case 250: 
          { return new Symbol(sym.REPULSIVE, yychar, yyline, yytext());
          }
        case 524: break;
        case 10: 
          { return new Symbol(sym.cerrllac, yychar, yyline, yytext());
          }
        case 525: break;
        case 216: 
          { return new Symbol(sym.CHICKEN, yychar, yyline, yytext());
          }
        case 526: break;
        case 195: 
          { return new Symbol(sym.FLOWER, yychar, yyline, yytext());
          }
        case 527: break;
        case 94: 
          { return new Symbol(sym.KIND, yychar, yyline, yytext());
          }
        case 528: break;
        case 34: 
          { return new Symbol(sym.TWO, yychar, yyline, yytext());
          }
        case 529: break;
        case 39: 
          { return new Symbol(sym.ANY, yychar, yyline, yytext());
          }
        case 530: break;
        case 87: 
          { return new Symbol(sym.DULL, yychar, yyline, yytext());
          }
        case 531: break;
        case 135: 
          { return new Symbol(sym.APPLE, yychar, yyline, yytext());
          }
        case 532: break;
        case 230: 
          { return new Symbol(sym.EXCITING, yychar, yyline, yytext());
          }
        case 533: break;
        case 180: 
          { return new Symbol(sym.LOVELY, yychar, yyline, yytext());
          }
        case 534: break;
        case 223: 
          { return new Symbol(sym.QUIETLY, yychar, yyline, yytext());
          }
        case 535: break;
        case 62: 
          { return new Symbol(sym.SOFT, yychar, yyline, yytext());
          }
        case 536: break;
        case 200: 
          { return new Symbol(sym.HOSTILE, yychar, yyline, yytext());
          }
        case 537: break;
        case 177: 
          { return new Symbol(sym.MONKEY, yychar, yyline, yytext());
          }
        case 538: break;
        case 173: 
          { return new Symbol(sym.COMPUTER, yychar, yyline, yytext());
          }
        case 539: break;
        case 159: 
          { return new Symbol(sym.HUMBLE, yychar, yyline, yytext());
          }
        case 540: break;
        case 155: 
          { return new Symbol(sym.NEVER, yychar, yyline, yytext());
          }
        case 541: break;
        case 259: 
          { return new Symbol(sym.BEAUTIFUL, yychar, yyline, yytext());
          }
        case 542: break;
        case 89: 
          { return new Symbol(sym.CUTE, yychar, yyline, yytext());
          }
        case 543: break;
        case 63: 
          { return new Symbol(sym.SUCH, yychar, yyline, yytext());
          }
        case 544: break;
        case 205: 
          { return new Symbol(sym.SELFISH, yychar, yyline, yytext());
          }
        case 545: break;
        case 249: 
          { return new Symbol(sym.WONDERFUL, yychar, yyline, yytext());
          }
        case 546: break;
        case 23: 
          { return new Symbol(sym.HIS, yychar, yyline, yytext());
          }
        case 547: break;
        case 46: 
          { return new Symbol(sym.CAR, yychar, yyline, yytext());
          }
        case 548: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
