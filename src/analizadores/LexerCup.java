/* The following code was generated by JFlex 1.4.3 on 23/05/23 12:47 AM */

package analizadores;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 23/05/23 12:47 AM from the specification file
 * <tt>C:/Users/audyc/Documents/NetBeansProjects/ProyectoTraductor/src/analizadores/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  3,  0,  0,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    53, 58,  0,  0,  0,  0,  0, 22, 60, 61,  0,  0,  3, 64, 57,  0, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 54,  0,  0,  0,  0, 59, 
     0, 19, 35, 33, 29, 25, 40, 32, 10,  4,  1, 38, 27, 46, 45, 28, 
    42, 55, 24, 13, 18, 39, 48, 16, 52,  6, 50, 62,  0, 63,  0,  1, 
     0, 21, 37, 34, 31, 11, 41, 30, 12,  5,  1, 36, 26, 20, 43,  7, 
    44, 56, 23, 14, 15,  8, 47, 17, 51,  9, 49,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\14\0\1\3\1\0\1\3\27\0"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\0"+
    "\1\13\13\0\2\14\2\0\1\15\40\0\1\16\10\0"+
    "\1\17\5\0\2\20\3\0\1\21\106\0\1\22\1\17"+
    "\4\0\1\23\1\0\1\24\1\0\1\25\1\26\1\23"+
    "\1\27\1\0\1\30\1\0\1\31\3\0\1\31\10\0"+
    "\2\32\2\0\1\33\2\0\1\34\12\0\1\35\2\0"+
    "\1\36\2\0\1\37\6\0\1\40\2\0\1\41\2\0"+
    "\1\41\7\0\1\36\5\0\1\35\1\0\1\42\3\0"+
    "\1\43\2\0\1\44\5\0\1\45\13\0\1\46\11\0"+
    "\1\47\2\50\4\0\1\51\20\0\1\52\7\0\1\53"+
    "\24\0\1\54\5\0\1\55\17\0\1\56\1\57\2\0"+
    "\1\60\11\0\1\61\3\0\1\62\1\0\1\63\3\0"+
    "\1\64\1\0\1\65\2\0\1\66\1\0\1\67\1\0"+
    "\1\70\1\71\24\0\1\72\1\73\1\74\22\0\1\75"+
    "\12\0\1\76\1\77\4\0\1\76\2\0\1\100\2\0"+
    "\1\101\5\0\1\101\3\0\1\102\2\0\1\103\17\0"+
    "\1\104\1\105\1\0\1\106\1\0\1\107\1\0\1\110"+
    "\2\0\1\111\3\0\1\112\2\0\1\113\2\0\1\114"+
    "\1\115\1\116\2\0\1\114\2\0\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\3\0\1\125\1\0\1\126\1\127"+
    "\1\130\1\0\1\122\12\0\1\111\17\0\1\131\7\0"+
    "\1\132\3\0\1\133\2\0\1\134\1\135\1\0\1\136"+
    "\5\0\1\137\1\140\1\141\22\0\1\142\1\143\1\0"+
    "\1\144\2\0\1\145\4\0\1\146\1\147\1\0\1\150"+
    "\1\0\1\151\5\0\1\152\5\0\1\144\2\0\1\153"+
    "\1\154\4\0\1\155\15\0\1\156\2\0\1\157\16\0"+
    "\1\160\1\161\1\160\1\162\3\0\1\163\1\164\1\165"+
    "\4\0\1\166\1\0\1\167\11\0\1\170\4\0\1\171"+
    "\6\0\1\172\1\173\1\174\7\0\1\54\2\0\1\175"+
    "\1\176\13\0\1\177\1\200\17\0\1\201\1\202\1\203"+
    "\1\204\1\0\1\205\1\206\1\0\1\207\1\210\1\211"+
    "\1\212\3\0\1\213\5\0\1\214\1\215\11\0\1\216"+
    "\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[812];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"+
    "\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7"+
    "\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e\0\u07df"+
    "\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965\0\u09a6\0\u09e7"+
    "\0\u0a28\0\u0a69\0\u0aaa\0\u0aaa\0\u0aaa\0\u0aaa\0\u0aaa\0\u0aaa"+
    "\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0c71"+
    "\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38\0\u0e79"+
    "\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u1081"+
    "\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289"+
    "\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491"+
    "\0\u14d2\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658\0\u1699"+
    "\0\u16da\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1"+
    "\0\u18e2\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9"+
    "\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u0aaa"+
    "\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78"+
    "\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080"+
    "\0\u20c1\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206\0\u2247\0\u2288"+
    "\0\u22c9\0\u230a\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f\0\u2490"+
    "\0\u24d1\0\u2512\0\u2553\0\u2594\0\u25d5\0\u2616\0\u2657\0\u2698"+
    "\0\u26d9\0\u271a\0\u275b\0\u279c\0\u27dd\0\u281e\0\u285f\0\u28a0"+
    "\0\u28e1\0\u2922\0\u2963\0\u29a4\0\u29e5\0\u2a26\0\u2a67\0\u2aa8"+
    "\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0"+
    "\0\u2cf1\0\u2d32\0\u2d73\0\u2db4\0\u2df5\0\u2e36\0\u0aaa\0\u0aaa"+
    "\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a\0\u2f7b\0\u2fbc\0\u0aaa\0\u2ffd"+
    "\0\u0aaa\0\u0aaa\0\u303e\0\u0aaa\0\u307f\0\u0aaa\0\u30c0\0\u3101"+
    "\0\u3142\0\u3183\0\u31c4\0\u3205\0\u3246\0\u3287\0\u32c8\0\u3309"+
    "\0\u334a\0\u338b\0\u33cc\0\u340d\0\u344e\0\u348f\0\u34d0\0\u3511"+
    "\0\u0aaa\0\u3552\0\u3593\0\u0aaa\0\u35d4\0\u3615\0\u3656\0\u3697"+
    "\0\u36d8\0\u3719\0\u375a\0\u379b\0\u37dc\0\u381d\0\u385e\0\u389f"+
    "\0\u38e0\0\u3921\0\u3962\0\u39a3\0\u0aaa\0\u39e4\0\u3a25\0\u3a66"+
    "\0\u3aa7\0\u3ae8\0\u3b29\0\u0aaa\0\u3b6a\0\u3bab\0\u3bec\0\u3c2d"+
    "\0\u3c6e\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u3db3\0\u3df4\0\u3e35"+
    "\0\u3e76\0\u3eb7\0\u3ef8\0\u3f39\0\u3f7a\0\u3fbb\0\u3ffc\0\u403d"+
    "\0\u407e\0\u0aaa\0\u40bf\0\u4100\0\u4141\0\u0aaa\0\u4182\0\u41c3"+
    "\0\u0aaa\0\u4204\0\u4245\0\u4286\0\u42c7\0\u4308\0\u0aaa\0\u4349"+
    "\0\u438a\0\u43cb\0\u440c\0\u444d\0\u448e\0\u44cf\0\u4510\0\u4551"+
    "\0\u4592\0\u45d3\0\u0aaa\0\u4614\0\u4655\0\u4696\0\u46d7\0\u4718"+
    "\0\u4759\0\u479a\0\u47db\0\u481c\0\u0aaa\0\u485d\0\u489e\0\u48df"+
    "\0\u4920\0\u4961\0\u49a2\0\u0aaa\0\u49e3\0\u4a24\0\u4a65\0\u4aa6"+
    "\0\u4ae7\0\u4b28\0\u4b69\0\u4baa\0\u4beb\0\u4c2c\0\u4c6d\0\u4cae"+
    "\0\u4cef\0\u4d30\0\u4d71\0\u4db2\0\u0aaa\0\u4df3\0\u4e34\0\u4e75"+
    "\0\u4eb6\0\u4ef7\0\u4f38\0\u4f79\0\u0aaa\0\u4fba\0\u4ffb\0\u503c"+
    "\0\u507d\0\u50be\0\u50ff\0\u5140\0\u5181\0\u51c2\0\u5203\0\u5244"+
    "\0\u5285\0\u52c6\0\u5307\0\u5348\0\u5389\0\u53ca\0\u540b\0\u544c"+
    "\0\u548d\0\u54ce\0\u550f\0\u5550\0\u5591\0\u55d2\0\u5613\0\u0aaa"+
    "\0\u5654\0\u5695\0\u56d6\0\u5717\0\u5758\0\u5799\0\u57da\0\u581b"+
    "\0\u585c\0\u589d\0\u58de\0\u591f\0\u5960\0\u59a1\0\u59e2\0\u0aaa"+
    "\0\u0aaa\0\u5a23\0\u5a64\0\u0aaa\0\u5aa5\0\u5ae6\0\u5b27\0\u5b68"+
    "\0\u5ba9\0\u5bea\0\u5c2b\0\u5c6c\0\u5cad\0\u0aaa\0\u5cee\0\u5d2f"+
    "\0\u5d70\0\u0aaa\0\u5db1\0\u0aaa\0\u5df2\0\u5e33\0\u5e74\0\u0aaa"+
    "\0\u5eb5\0\u0aaa\0\u5ef6\0\u5f37\0\u0aaa\0\u5f78\0\u0aaa\0\u5fb9"+
    "\0\u0aaa\0\u0aaa\0\u5ffa\0\u603b\0\u607c\0\u60bd\0\u60fe\0\u613f"+
    "\0\u6180\0\u61c1\0\u6202\0\u6243\0\u6284\0\u62c5\0\u6306\0\u6347"+
    "\0\u6388\0\u63c9\0\u640a\0\u644b\0\u648c\0\u64cd\0\u0aaa\0\u0aaa"+
    "\0\u0aaa\0\u650e\0\u654f\0\u6590\0\u65d1\0\u6612\0\u6653\0\u6694"+
    "\0\u66d5\0\u6716\0\u6757\0\u6798\0\u67d9\0\u681a\0\u685b\0\u689c"+
    "\0\u68dd\0\u691e\0\u695f\0\u0aaa\0\u69a0\0\u69e1\0\u6a22\0\u6a63"+
    "\0\u6aa4\0\u6ae5\0\u6b26\0\u6b67\0\u6ba8\0\u6be9\0\u6c2a\0\u0aaa"+
    "\0\u6c6b\0\u6cac\0\u6ced\0\u6d2e\0\u6d6f\0\u6db0\0\u6df1\0\u0aaa"+
    "\0\u6e32\0\u6e73\0\u6eb4\0\u6ef5\0\u6f36\0\u6f77\0\u6fb8\0\u6ff9"+
    "\0\u703a\0\u707b\0\u70bc\0\u70fd\0\u0aaa\0\u713e\0\u717f\0\u0aaa"+
    "\0\u71c0\0\u7201\0\u7242\0\u7283\0\u72c4\0\u7305\0\u7346\0\u7387"+
    "\0\u73c8\0\u7409\0\u744a\0\u748b\0\u74cc\0\u750d\0\u754e\0\u0aaa"+
    "\0\u0aaa\0\u758f\0\u0aaa\0\u75d0\0\u0aaa\0\u7611\0\u0aaa\0\u7652"+
    "\0\u7693\0\u76d4\0\u7715\0\u7756\0\u7797\0\u0aaa\0\u77d8\0\u7819"+
    "\0\u0aaa\0\u785a\0\u789b\0\u78dc\0\u0aaa\0\u0aaa\0\u791d\0\u795e"+
    "\0\u799f\0\u79e0\0\u7a21\0\u0aaa\0\u0aaa\0\u0aaa\0\u7a62\0\u0aaa"+
    "\0\u0aaa\0\u7aa3\0\u7ae4\0\u7b25\0\u0aaa\0\u7b66\0\u0aaa\0\u0aaa"+
    "\0\u0aaa\0\u7ba7\0\u7be8\0\u7c29\0\u7c6a\0\u7cab\0\u7cec\0\u7d2d"+
    "\0\u7d6e\0\u7daf\0\u7df0\0\u7e31\0\u7e72\0\u7eb3\0\u7ef4\0\u7f35"+
    "\0\u7f76\0\u7fb7\0\u7ff8\0\u8039\0\u807a\0\u80bb\0\u80fc\0\u813d"+
    "\0\u817e\0\u81bf\0\u8200\0\u8241\0\u8282\0\u0aaa\0\u82c3\0\u8304"+
    "\0\u8345\0\u8386\0\u83c7\0\u8408\0\u8449\0\u0aaa\0\u848a\0\u84cb"+
    "\0\u850c\0\u0aaa\0\u854d\0\u858e\0\u0aaa\0\u0aaa\0\u85cf\0\u0aaa"+
    "\0\u8610\0\u8651\0\u8692\0\u86d3\0\u8714\0\u0aaa\0\u0aaa\0\u0aaa"+
    "\0\u8755\0\u8796\0\u87d7\0\u8818\0\u8859\0\u889a\0\u88db\0\u891c"+
    "\0\u895d\0\u899e\0\u89df\0\u8a20\0\u8a61\0\u8aa2\0\u8ae3\0\u8b24"+
    "\0\u8b65\0\u8ba6\0\u0aaa\0\u0aaa\0\u8be7\0\u8c28\0\u8c69\0\u8caa"+
    "\0\u0aaa\0\u8ceb\0\u8d2c\0\u8d6d\0\u8dae\0\u0aaa\0\u0aaa\0\u8def"+
    "\0\u0aaa\0\u8e30\0\u0aaa\0\u8e71\0\u8eb2\0\u8ef3\0\u8f34\0\u8f75"+
    "\0\u0aaa\0\u8fb6\0\u8ff7\0\u9038\0\u9079\0\u90ba\0\u90fb\0\u913c"+
    "\0\u917d\0\u0aaa\0\u0aaa\0\u91be\0\u91ff\0\u9240\0\u9281\0\u0aaa"+
    "\0\u92c2\0\u9303\0\u9344\0\u9385\0\u93c6\0\u9407\0\u9448\0\u9489"+
    "\0\u94ca\0\u950b\0\u954c\0\u958d\0\u95ce\0\u0aaa\0\u960f\0\u9650"+
    "\0\u0aaa\0\u9691\0\u96d2\0\u9713\0\u9754\0\u9795\0\u97d6\0\u9817"+
    "\0\u9858\0\u9899\0\u98da\0\u991b\0\u995c\0\u999d\0\u99de\0\u9a1f"+
    "\0\u0aaa\0\u9a60\0\u0aaa\0\u9aa1\0\u9ae2\0\u9b23\0\u0aaa\0\u0aaa"+
    "\0\u0aaa\0\u9b64\0\u9ba5\0\u9be6\0\u9c27\0\u0aaa\0\u9c68\0\u0aaa"+
    "\0\u9ca9\0\u9cea\0\u9d2b\0\u9d6c\0\u9dad\0\u9dee\0\u9e2f\0\u9e70"+
    "\0\u9eb1\0\u0aaa\0\u9ef2\0\u9f33\0\u9f74\0\u9fb5\0\u0aaa\0\u9ff6"+
    "\0\ua037\0\ua078\0\ua0b9\0\ua0fa\0\ua13b\0\u0aaa\0\u0aaa\0\u0aaa"+
    "\0\ua17c\0\ua1bd\0\ua1fe\0\ua23f\0\ua280\0\ua2c1\0\ua302\0\u0aaa"+
    "\0\ua343\0\ua384\0\u0aaa\0\u0aaa\0\ua3c5\0\ua406\0\ua447\0\ua488"+
    "\0\ua4c9\0\ua50a\0\ua54b\0\ua58c\0\ua5cd\0\ua60e\0\ua64f\0\u0aaa"+
    "\0\u0aaa\0\ua690\0\ua6d1\0\ua712\0\ua753\0\ua794\0\ua7d5\0\ua816"+
    "\0\ua857\0\ua898\0\ua8d9\0\ua91a\0\ua95b\0\ua99c\0\ua9dd\0\uaa1e"+
    "\0\u0aaa\0\u0aaa\0\u0aaa\0\u0aaa\0\uaa5f\0\u0aaa\0\u0aaa\0\uaaa0"+
    "\0\u0aaa\0\u0aaa\0\u0aaa\0\u0aaa\0\uaae1\0\uab22\0\uab63\0\u0aaa"+
    "\0\uaba4\0\uabe5\0\uac26\0\uac67\0\uaca8\0\u0aaa\0\u0aaa\0\uace9"+
    "\0\uad2a\0\uad6b\0\uadac\0\uaded\0\uae2e\0\uae6f\0\uaeb0\0\uaef1"+
    "\0\uaf32\0\uaf73\0\uafb4\0\uaff5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[812];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\0\1\2\1\3\1\4\1\5\1\6\1\0\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\0\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\0\1\33\1\0\1\34"+
    "\1\35\1\36\1\0\1\37\2\0\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\4\0\1\2"+
    "\1\0\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\3\0\1\2\61\0\1\2\32\0"+
    "\1\63\2\0\1\64\3\0\1\65\24\0\1\66\1\0"+
    "\1\67\42\0\1\63\6\0\1\65\24\0\1\66\34\0"+
    "\1\70\24\0\1\71\54\0\1\72\6\0\1\73\12\0"+
    "\1\74\20\0\1\75\34\0\1\76\75\0\1\77\1\100"+
    "\1\0\1\101\1\102\2\0\1\103\7\0\1\104\1\0"+
    "\1\105\3\0\1\106\2\0\1\107\12\0\1\110\36\0"+
    "\1\111\17\0\1\112\4\0\1\113\24\0\1\114\3\0"+
    "\1\115\22\0\1\100\1\0\1\101\1\102\2\0\1\103"+
    "\11\0\1\105\57\0\1\116\1\117\1\0\1\120\1\121"+
    "\2\0\1\122\1\123\6\0\1\124\1\125\1\126\3\0"+
    "\1\127\1\130\1\131\1\132\12\0\1\133\6\0\1\134"+
    "\27\0\1\117\1\0\1\120\1\121\2\0\1\122\1\123"+
    "\7\0\1\125\1\126\4\0\1\130\61\0\1\135\1\136"+
    "\4\0\1\137\3\0\1\140\1\0\1\141\60\0\1\142"+
    "\2\0\1\143\1\144\1\145\14\0\1\146\2\0\1\147"+
    "\53\0\1\142\3\0\1\144\1\145\76\0\1\150\1\135"+
    "\1\136\3\0\1\151\1\137\1\0\1\152\1\0\1\140"+
    "\1\0\1\141\1\153\1\154\73\0\1\155\2\0\1\156"+
    "\1\157\1\0\1\160\1\161\3\0\1\162\13\0\1\163"+
    "\1\0\1\164\1\165\27\0\1\166\2\0\1\167\1\170"+
    "\13\0\1\171\77\0\1\155\2\0\1\156\2\0\1\172"+
    "\20\0\1\163\40\0\1\173\100\0\1\173\15\0\1\174"+
    "\53\0\1\175\1\111\15\0\1\176\1\0\1\112\4\0"+
    "\1\113\1\177\23\0\1\114\1\200\2\0\1\115\1\201"+
    "\23\0\1\202\100\0\1\202\24\0\1\203\54\0\1\72"+
    "\6\0\1\73\2\0\1\204\7\0\1\74\1\205\13\0"+
    "\1\206\3\0\1\75\1\0\1\207\30\0\1\210\1\0"+
    "\1\211\3\0\1\212\15\0\1\213\2\0\1\214\51\0"+
    "\1\215\1\0\1\216\3\0\1\212\74\0\1\217\2\0"+
    "\1\220\1\221\1\222\6\0\1\223\1\0\1\224\3\0"+
    "\1\225\2\0\1\226\53\0\1\227\3\0\1\221\1\222"+
    "\10\0\1\224\57\0\1\230\1\231\1\0\1\232\3\0"+
    "\1\233\13\0\1\234\1\235\1\236\2\0\1\237\51\0"+
    "\1\231\1\0\1\232\3\0\1\233\13\0\1\234\55\0"+
    "\1\240\1\241\1\0\1\242\1\243\2\0\1\244\7\0"+
    "\1\245\1\0\1\246\3\0\1\247\1\250\1\251\1\252"+
    "\12\0\1\253\36\0\1\241\1\0\1\242\1\243\2\0"+
    "\1\244\11\0\1\246\4\0\1\250\60\0\1\254\1\255"+
    "\1\256\14\0\1\257\54\0\1\260\5\0\1\261\11\0"+
    "\1\262\66\0\1\255\1\256\70\0\1\263\1\260\5\0"+
    "\1\261\7\0\1\264\1\0\1\262\3\0\1\265\53\0"+
    "\1\266\1\166\1\170\1\0\1\167\1\170\11\0\1\267"+
    "\1\0\1\171\21\0\1\270\56\0\1\271\76\0\1\272"+
    "\1\0\1\271\63\0\1\273\36\0\1\274\41\0\1\275"+
    "\271\0\1\276\16\0\1\277\77\0\1\277\107\0\1\300"+
    "\73\0\1\301\22\0\1\302\60\0\1\303\16\0\1\304"+
    "\47\0\1\305\137\0\1\306\60\0\1\307\65\0\1\310"+
    "\123\0\1\311\54\0\1\312\75\0\1\313\105\0\1\314"+
    "\101\0\1\314\72\0\1\315\10\0\1\316\132\0\1\317"+
    "\54\0\1\320\2\0\1\321\120\0\1\322\102\0\1\323"+
    "\54\0\1\324\2\0\1\325\65\0\1\316\26\0\1\326"+
    "\106\0\1\327\61\0\1\330\60\0\1\331\75\0\1\332"+
    "\100\0\1\333\127\0\1\334\122\0\1\335\77\0\1\336"+
    "\41\0\1\337\116\0\1\340\10\0\1\341\67\0\1\342"+
    "\14\0\1\343\34\0\1\344\143\0\1\345\47\0\1\346"+
    "\77\0\1\347\115\0\1\350\16\0\1\351\27\0\1\352"+
    "\125\0\1\353\122\0\1\354\63\0\1\355\13\0\1\341"+
    "\46\0\1\356\130\0\1\357\32\0\1\360\1\0\1\361"+
    "\3\0\1\362\11\0\1\363\1\0\1\364\60\0\1\365"+
    "\3\0\1\366\117\0\1\367\12\0\1\370\46\0\1\371"+
    "\140\0\1\372\31\0\1\373\1\0\1\374\14\0\1\375"+
    "\5\0\1\376\2\0\1\377\76\0\1\u0100\53\0\1\u0101"+
    "\1\0\1\u0102\1\0\1\374\1\0\1\u0103\11\0\1\u0104"+
    "\106\0\1\u0105\122\0\1\u0106\27\0\1\u0107\16\0\1\u0108"+
    "\4\0\1\u0109\1\u010a\2\0\1\u010b\75\0\1\u010c\2\0"+
    "\1\365\77\0\1\u010d\7\0\1\u010e\66\0\1\u010f\124\0"+
    "\1\u0110\50\0\1\u0111\66\0\1\u0112\116\0\1\u0112\70\0"+
    "\1\u0113\10\0\1\u0114\66\0\1\u0115\12\0\1\u0116\124\0"+
    "\1\u0117\30\0\1\u0118\1\0\1\u0119\75\0\1\u0119\25\0"+
    "\1\u011a\67\0\1\u011b\130\0\1\u011c\67\0\1\u011d\111\0"+
    "\1\u011e\46\0\1\u0113\10\0\1\u0116\105\0\1\u011f\76\0"+
    "\1\u011f\103\0\1\u0120\55\0\1\u0121\114\0\1\u0122\100\0"+
    "\1\u0123\110\0\1\u0124\47\0\1\u0125\46\0\1\u0126\70\0"+
    "\1\u0127\10\0\1\u0128\32\0\1\u0129\123\0\1\311\73\0"+
    "\1\307\101\0\1\312\120\0\1\u012a\65\0\1\u012b\74\0"+
    "\1\u012c\101\0\1\u012d\105\0\1\u012b\111\0\1\u012e\45\0"+
    "\1\u012f\17\0\1\u012b\66\0\1\u0130\5\0\1\u0131\71\0"+
    "\1\u0132\104\0\1\u0133\76\0\1\u0134\75\0\1\u0135\5\0"+
    "\1\u0136\67\0\1\u0135\7\0\1\u0137\101\0\1\u0138\103\0"+
    "\1\u0139\22\0\1\u013a\46\0\1\u013b\5\0\1\u0131\106\0"+
    "\1\u013c\76\0\1\u013c\51\0\1\u013d\7\0\1\u013e\106\0"+
    "\1\u013f\100\0\1\u0140\76\0\1\u0141\100\0\1\u0142\77\0"+
    "\1\u0143\11\0\1\u0144\74\0\1\u0145\17\0\1\u0146\7\0"+
    "\1\u0147\47\0\1\u0148\21\0\1\u0149\5\0\1\u014a\31\0"+
    "\1\u014b\143\0\1\u014c\46\0\1\u014d\134\0\1\u014e\76\0"+
    "\1\u014f\45\0\1\u014d\67\0\1\u0150\125\0\1\u0151\113\0"+
    "\1\u0152\106\0\1\u0153\57\0\1\u0154\117\0\1\u0155\34\0"+
    "\1\u0156\146\0\1\u0155\76\0\1\u0157\104\0\1\u0158\45\0"+
    "\1\u0159\131\0\1\u015a\101\0\1\u015b\102\0\1\u015c\75\0"+
    "\1\u015d\100\0\1\u015e\64\0\1\u015f\66\0\1\u0160\101\0"+
    "\1\u0161\55\0\1\u0162\77\0\1\u0163\101\0\1\u0164\173\0"+
    "\1\u0165\13\0\1\u0166\114\0\1\u0167\102\0\1\u0168\77\0"+
    "\1\u0169\77\0\1\u016a\101\0\1\u016b\63\0\1\u016c\114\0"+
    "\1\u016d\67\0\1\u016e\121\0\1\u016f\54\0\1\u0170\117\0"+
    "\1\u0171\120\0\1\u0172\102\0\1\u0173\55\0\1\u0170\102\0"+
    "\1\u0174\62\0\1\u0175\120\0\1\u0176\57\0\1\u0177\71\0"+
    "\1\u0178\131\0\1\u0179\20\0\1\u017a\50\0\1\u017b\56\0"+
    "\1\u017c\5\0\1\u017d\107\0\1\u017e\75\0\1\u017f\74\0"+
    "\1\u0180\101\0\1\u0181\73\0\1\u0182\104\0\1\u0183\116\0"+
    "\1\u0184\76\0\1\u0185\2\0\1\u0186\61\0\1\u0184\121\0"+
    "\1\u0187\75\0\1\u0188\70\0\1\u0189\77\0\1\u018a\111\0"+
    "\1\u0180\61\0\1\u0181\116\0\1\u018b\2\0\1\u018c\64\0"+
    "\1\u018d\77\0\1\u018e\10\0\1\u018f\67\0\1\u0190\67\0"+
    "\1\u0191\3\0\1\u0192\4\0\1\u0193\101\0\1\u0194\74\0"+
    "\1\u0195\117\0\1\u0196\20\0\1\u0197\57\0\1\u0198\100\0"+
    "\1\u0199\61\0\1\u019a\124\0\1\u019b\102\0\1\u019c\61\0"+
    "\1\u019d\106\0\1\u019e\24\0\1\u019f\40\0\1\u01a0\40\0"+
    "\1\u01a1\54\0\1\u01a2\110\0\1\u01a3\54\0\1\u01a4\5\0"+
    "\1\u01a1\103\0\1\u01a5\23\0\1\u019f\44\0\1\u019d\114\0"+
    "\1\u01a2\102\0\1\u01a6\60\0\1\u018e\12\0\1\u01a7\72\0"+
    "\1\u0194\107\0\1\u01a8\53\0\1\u01a9\10\0\1\u01aa\100\0"+
    "\1\u01ab\116\0\1\u01ac\21\0\1\u01ad\56\0\1\u0198\100\0"+
    "\1\u01ae\76\0\1\u019a\71\0\1\u01af\137\0\1\u01b0\44\0"+
    "\1\u01b1\140\0\1\u0116\36\0\1\u01b2\70\0\1\u01b3\104\0"+
    "\1\u01b4\103\0\1\u01b5\140\0\1\u01b6\31\0\1\u01b7\101\0"+
    "\1\u01b8\75\0\1\u01b9\101\0\1\u01ba\72\0\1\u01bb\134\0"+
    "\1\u01bc\17\0\1\u01bd\50\0\1\u01be\54\0\1\u01bf\24\0"+
    "\1\u01c0\106\0\1\u01c1\54\0\1\u01c2\122\0\1\u01c3\74\0"+
    "\1\u01c4\100\0\1\u01c5\120\0\1\u01c6\34\0\1\u01c7\77\0"+
    "\1\u01c8\145\0\1\u01c9\45\0\1\u01ca\136\0\1\u01cb\63\0"+
    "\1\u01cc\45\0\1\u01cd\23\0\1\u01ce\67\0\1\u01cf\66\0"+
    "\1\u01d0\21\0\1\u01d1\102\0\1\u01d2\62\0\1\u01d3\107\0"+
    "\1\u01d4\113\0\1\u01cc\115\0\1\u01d5\33\0\1\u01d6\46\0"+
    "\1\u01cb\70\0\1\u01d7\50\0\1\u01d8\74\0\1\u01d9\147\0"+
    "\1\u01da\101\0\1\u01db\67\0\1\u01dc\43\0\1\u01d8\134\0"+
    "\1\u01dd\47\0\1\u01de\105\0\1\u01df\107\0\1\u01e0\65\0"+
    "\1\u01e1\101\0\1\u01e2\74\0\1\u01e0\114\0\1\u01e3\124\0"+
    "\1\u01e4\47\0\1\u01e5\75\0\1\u01e6\102\0\1\u01e7\77\0"+
    "\1\u01e8\110\0\1\u01e9\125\0\1\u01ea\100\0\1\u01eb\76\0"+
    "\1\u01ec\40\0\1\u01ed\3\0\1\u01ee\74\0\1\u01ef\100\0"+
    "\1\u01f0\107\0\1\u01f1\6\0\1\u01ed\100\0\1\u01f0\100\0"+
    "\1\u01f2\100\0\1\u01b7\55\0\1\u01b9\104\0\1\u01b8\73\0"+
    "\1\u01f3\77\0\1\u01f4\107\0\1\u01f5\116\0\1\u01f6\7\0"+
    "\1\u01f7\52\0\1\u01f5\26\0\1\u01f8\136\0\1\u01f9\27\0"+
    "\1\u01fa\2\0\1\u01fb\61\0\1\u01fc\115\0\1\u01fd\2\0"+
    "\1\u01fe\76\0\1\u01ff\65\0\1\u0200\77\0\1\u0200\112\0"+
    "\1\u0201\57\0\1\u0202\7\0\1\u0200\75\0\1\u0203\114\0"+
    "\1\u0204\60\0\1\u0205\75\0\1\u0206\1\0\1\u0207\77\0"+
    "\1\u0208\3\0\1\u0207\123\0\1\u0205\75\0\1\u0203\77\0"+
    "\1\u0209\67\0\1\u020a\113\0\1\u020b\73\0\1\u020c\66\0"+
    "\1\u020d\76\0\1\u020e\106\0\1\u020f\113\0\1\u0210\60\0"+
    "\1\u0211\102\0\1\u0211\137\0\1\u0212\54\0\1\u0213\23\0"+
    "\1\u0214\44\0\1\u0215\113\0\1\u0216\123\0\1\u0217\53\0"+
    "\1\u0218\24\0\1\u0219\55\0\1\u021a\101\0\1\u021b\67\0"+
    "\1\u0215\111\0\1\u0216\61\0\1\u021c\123\0\1\u021d\54\0"+
    "\1\u021e\114\0\1\u021f\64\0\1\u0220\100\0\1\u0221\136\0"+
    "\1\u0222\5\0\1\u0223\40\0\1\u0224\74\0\1\u0225\100\0"+
    "\1\u0226\77\0\1\u0227\117\0\1\u0228\100\0\1\u0229\63\0"+
    "\1\u0227\77\0\1\u0229\100\0\1\u0228\116\0\1\u022a\104\0"+
    "\1\u021d\74\0\1\u0221\77\0\1\u022b\101\0\1\u0220\100\0"+
    "\1\u021e\117\0\1\u022c\7\0\1\u022d\42\0\1\u022e\107\0"+
    "\1\u0225\61\0\1\u021c\73\0\1\u022f\104\0\1\u0230\75\0"+
    "\1\u0231\121\0\1\u0232\65\0\1\u0233\76\0\1\u0234\72\0"+
    "\1\u0235\116\0\1\u0236\111\0\1\u0237\70\0\1\u0238\106\0"+
    "\1\u0239\55\0\1\u020e\114\0\1\u023a\111\0\1\u023b\77\0"+
    "\1\u023c\100\0\1\u023d\101\0\1\u023e\100\0\1\u023f\75\0"+
    "\1\u0201\63\0\1\u0240\127\0\1\u0241\77\0\1\u0242\52\0"+
    "\1\u0243\103\0\1\u0244\72\0\1\u0245\120\0\1\u0246\126\0"+
    "\1\u0247\47\0\1\u0248\102\0\1\u0246\75\0\1\u0249\124\0"+
    "\1\u024a\101\0\1\u024b\52\0\1\u024c\124\0\1\u024d\36\0"+
    "\1\u024e\46\0\1\u024f\42\0\1\u0250\101\0\1\u0251\74\0"+
    "\1\u0252\116\0\1\u0252\71\0\1\u0253\73\0\1\u0254\105\0"+
    "\1\u0255\70\0\1\u0256\105\0\1\u0255\75\0\1\u0256\103\0"+
    "\1\u0257\72\0\1\u0258\112\0\1\u0259\102\0\1\u025a\66\0"+
    "\1\u025b\116\0\1\u025c\71\0\1\u025d\64\0\1\u0258\123\0"+
    "\1\u025e\62\0\1\u025e\101\0\1\u025f\113\0\1\u0260\63\0"+
    "\1\u025f\116\0\1\u0260\57\0\1\u0261\125\0\1\u0262\63\0"+
    "\1\u0263\103\0\1\u0264\124\0\1\u0265\76\0\1\u0266\65\0"+
    "\1\u0267\62\0\1\u0268\117\0\1\u0269\105\0\1\u026a\72\0"+
    "\1\u026b\102\0\1\u026c\102\0\1\u026d\77\0\1\u026e\57\0"+
    "\1\u026f\120\0\1\u0270\77\0\1\u0271\77\0\1\u0272\63\0"+
    "\1\u0273\75\0\1\u0274\142\0\1\u0275\100\0\1\u0276\32\0"+
    "\1\u0277\125\0\1\u0278\105\0\1\u0279\66\0\1\u027a\72\0"+
    "\1\u027b\116\0\1\u0279\66\0\1\u027c\77\0\1\u027d\67\0"+
    "\1\u027e\75\0\1\u027e\110\0\1\u027f\101\0\1\u0280\74\0"+
    "\1\u0281\72\0\1\u0282\3\0\1\u0283\116\0\1\u0284\101\0"+
    "\1\u0285\65\0\1\u027f\105\0\1\u0286\107\0\1\u0281\53\0"+
    "\1\u0287\1\0\1\u0283\145\0\1\u0288\43\0\1\u0289\77\0"+
    "\1\u0289\130\0\1\u028a\46\0\1\u028b\116\0\1\u028c\124\0"+
    "\1\u028d\35\0\1\u0273\74\0\1\u0274\147\0\1\u028e\100\0"+
    "\1\u028f\27\0\1\u0290\127\0\1\u0291\56\0\1\u0292\100\0"+
    "\1\u0293\75\0\1\u0292\100\0\1\u0293\121\0\1\u0294\56\0"+
    "\1\u0295\77\0\1\u0296\123\0\1\u0297\125\0\1\u0298\43\0"+
    "\1\u0299\65\0\1\u029a\101\0\1\u029b\100\0\1\u029c\142\0"+
    "\1\u029d\41\0\1\u029e\74\0\1\u029f\116\0\1\u02a0\66\0"+
    "\1\u02a1\104\0\1\u02a2\71\0\1\u02a3\77\0\1\u02a4\106\0"+
    "\1\u02a5\102\0\1\u02a6\101\0\1\u02a7\101\0\1\u02a8\111\0"+
    "\1\u02a9\101\0\1\u02a9\62\0\1\u02a6\76\0\1\u02aa\137\0"+
    "\1\u02ab\63\0\1\u02ac\101\0\1\u02ad\100\0\1\u02ae\77\0"+
    "\1\u02af\76\0\1\u02b0\66\0\1\u02b1\67\0\1\u02b2\100\0"+
    "\1\u02b3\110\0\1\u02b4\67\0\1\u02b5\100\0\1\u02b6\143\0"+
    "\1\u02b7\70\0\1\u02b8\47\0\1\u02b9\103\0\1\u02b9\124\0"+
    "\1\u02ba\62\0\1\u02bb\100\0\1\u02bc\134\0\1\u02bd\40\0"+
    "\1\u02be\117\0\1\u02bf\62\0\1\u02c0\117\0\1\u02bf\57\0"+
    "\1\u02c0\102\0\1\u02c1\77\0\1\u02c2\136\0\1\u02c3\77\0"+
    "\1\u02c4\42\0\1\u02c1\117\0\1\u02c5\105\0\1\u02c6\47\0"+
    "\1\u02c7\122\0\1\u02c8\101\0\1\u02c8\110\0\1\u02c6\62\0"+
    "\1\u02bb\100\0\1\u02c9\133\0\1\u02ca\54\0\1\u02cb\62\0"+
    "\1\u02cc\74\0\1\u02cd\125\0\1\u02ce\57\0\1\u02cf\100\0"+
    "\1\u02d0\142\0\1\u02d1\76\0\1\u02d2\100\0\1\u02d3\60\0"+
    "\1\u02d4\77\0\1\u02d5\123\0\1\u02d2\54\0\1\u02d6\122\0"+
    "\1\u02d7\40\0\1\u02d8\136\0\1\u02d9\77\0\1\u02da\61\0"+
    "\1\u02db\71\0\1\u02dc\75\0\1\u02dd\77\0\1\u02de\77\0"+
    "\1\u02de\74\0\1\u02df\75\0\1\u02df\100\0\1\u02e0\103\0"+
    "\1\u02e0\117\0\1\u02e1\67\0\1\u02e2\117\0\1\u02e3\107\0"+
    "\1\u02e4\55\0\1\u02e5\116\0\1\u02e6\103\0\1\u02e7\65\0"+
    "\1\u02e8\67\0\1\u02e9\103\0\1\u02ea\72\0\1\u02eb\122\0"+
    "\1\u02ec\115\0\1\u02ed\44\0\1\u02ee\71\0\1\u02ef\137\0"+
    "\1\u02f0\53\0\1\u02f1\65\0\1\u02f2\103\0\1\u02eb\126\0"+
    "\1\u02ec\115\0\1\u02f3\76\0\1\u02f4\35\0\1\u02f5\137\0"+
    "\1\u02f6\104\0\1\u02f7\54\0\1\u02f8\111\0\1\u02f9\76\0"+
    "\1\u02f9\75\0\1\u02fa\77\0\1\u02fb\76\0\1\u02f8\102\0"+
    "\1\u02fc\56\0\1\u02fd\137\0\1\u02fe\64\0\1\u02ff\51\0"+
    "\1\u0300\101\0\1\u0301\127\0\1\u0302\51\0\1\u0303\106\0"+
    "\1\u0304\117\0\1\u0305\52\0\1\u0306\125\0\1\u0307\102\0"+
    "\1\u0308\61\0\1\u0309\76\0\1\u0309\105\0\1\u030a\75\0"+
    "\1\u030b\116\0\1\u030c\101\0\1\u030c\57\0\1\u030b\154\0"+
    "\1\u030d\34\0\1\u030a\75\0\1\u030e\77\0\1\u030f\77\0"+
    "\1\u030f\102\0\1\u0310\67\0\1\u0311\103\0\1\u0311\140\0"+
    "\1\u0312\61\0\1\u0313\101\0\1\u0313\115\0\1\u0312\71\0"+
    "\1\u0314\101\0\1\u0314\66\0\1\u0315\123\0\1\u0316\100\0"+
    "\1\u0317\40\0\1\u0318\142\0\1\u0319\100\0\1\u031a\54\0"+
    "\1\u0318\136\0\1\u031b\46\0\1\u031c\143\0\1\u031d\36\0"+
    "\1\u031e\61\0\1\u031f\121\0\1\u031e\62\0\1\u031f\66\0"+
    "\1\u0320\74\0\1\u0321\174\0\1\u0322\5\0\1\u0323\143\0"+
    "\1\u0324\130\0\1\u0325\42\0\1\u01f8\106\0\1\u0326\130\0"+
    "\1\u0327\31\0\1\u0328\50\0\1\u0329\2\0\22\u0329\1\0"+
    "\36\u0329\2\0\2\u0329\40\0\1\u032a\51\0\2\u0329\1\0"+
    "\22\u0329\1\0\36\u0329\2\0\2\u0329\41\0\1\u032b\124\0"+
    "\1\u032c\45\0\1\u030e\56\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[45110];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\1\14\0\1\1\1\0\1\1\27\0\7\11"+
    "\1\0\1\1\13\0\2\1\2\0\1\1\40\0\1\1"+
    "\10\0\1\1\5\0\2\1\3\0\1\11\106\0\2\11"+
    "\4\0\1\1\1\0\1\11\1\0\2\11\1\1\1\11"+
    "\1\0\1\11\1\0\1\1\3\0\1\1\10\0\2\1"+
    "\2\0\1\11\2\0\1\11\12\0\1\1\2\0\1\1"+
    "\2\0\1\11\6\0\1\11\2\0\1\1\2\0\1\1"+
    "\7\0\1\1\5\0\1\1\1\0\1\11\3\0\1\11"+
    "\2\0\1\11\5\0\1\11\13\0\1\11\11\0\1\11"+
    "\2\1\4\0\1\11\20\0\1\11\7\0\1\11\24\0"+
    "\1\1\5\0\1\11\17\0\2\11\2\0\1\11\11\0"+
    "\1\11\3\0\1\11\1\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\2\11\24\0"+
    "\3\11\22\0\1\11\12\0\1\1\1\11\4\0\1\1"+
    "\2\0\1\11\2\0\1\1\5\0\1\1\3\0\1\11"+
    "\2\0\1\11\17\0\2\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\1\1\3\0\1\11\2\0\1\11"+
    "\2\0\1\1\2\11\2\0\1\1\2\0\3\11\1\1"+
    "\2\11\3\0\1\11\1\0\3\11\1\0\1\1\12\0"+
    "\1\1\17\0\1\11\7\0\1\11\3\0\1\11\2\0"+
    "\2\11\1\0\1\11\5\0\3\11\22\0\2\11\1\0"+
    "\1\1\2\0\1\11\4\0\2\11\1\0\1\11\1\0"+
    "\1\11\5\0\1\11\5\0\1\1\2\0\2\11\4\0"+
    "\1\11\15\0\1\11\2\0\1\11\16\0\1\1\1\11"+
    "\1\1\1\11\3\0\3\11\4\0\1\11\1\0\1\11"+
    "\11\0\1\11\4\0\1\11\6\0\3\11\7\0\1\11"+
    "\2\0\2\11\13\0\2\11\17\0\4\11\1\0\2\11"+
    "\1\0\4\11\3\0\1\11\5\0\2\11\11\0\1\1"+
    "\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[812];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn,value);
        }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
        }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 135: 
          { return new Symbol(sym.CAREFULLY, yychar, yyline, yytext());
          }
        case 143: break;
        case 120: 
          { return new Symbol(sym.CERTAIN, yychar, yyline, yytext());
          }
        case 144: break;
        case 109: 
          { return new Symbol(sym.dospum, yychar, yyline, yytext());
          }
        case 145: break;
        case 56: 
          { return new Symbol(sym.WHOM, yychar, yyline, yytext());
          }
        case 146: break;
        case 28: 
          { return new Symbol(sym.SHE, yychar, yyline, yytext());
          }
        case 147: break;
        case 10: 
          { return new Symbol(sym.cerrllac, yychar, yyline, yytext());
          }
        case 148: break;
        case 122: 
          { return new Symbol(sym.VARIOUS, yychar, yyline, yytext());
          }
        case 149: break;
        case 49: 
          { return new Symbol(sym.THIS, yychar, yyline, yytext());
          }
        case 150: break;
        case 137: 
          { return new Symbol(sym.BEAUTIFUL, yychar, yyline, yytext());
          }
        case 151: break;
        case 90: 
          { return new Symbol(sym.comm, yychar, yyline, yytext());
          }
        case 152: break;
        case 33: 
          { return new Symbol(sym.WHO, yychar, yyline, yytext());
          }
        case 153: break;
        case 70: 
          { return new Symbol(sym.HOUSE, yychar, yyline, yytext());
          }
        case 154: break;
        case 99: 
          { return new Symbol(sym.EASILY, yychar, yyline, yytext());
          }
        case 155: break;
        case 95: 
          { return new Symbol(sym.PHONE, yychar, yyline, yytext());
          }
        case 156: break;
        case 94: 
          { return new Symbol(sym.FUNNY, yychar, yyline, yytext());
          }
        case 157: break;
        case 64: 
          { return new Symbol(sym.FIVE, yychar, yyline, yytext());
          }
        case 158: break;
        case 96: 
          { return new Symbol(sym.NINTH, yychar, yyline, yytext());
          }
        case 159: break;
        case 73: 
          { return new Symbol(sym.EIGHT, yychar, yyline, yytext());
          }
        case 160: break;
        case 46: 
          { return new Symbol(sym.SOME, yychar, yyline, yytext());
          }
        case 161: break;
        case 30: 
          { return new Symbol(sym.THE, yychar, yyline, yytext());
          }
        case 162: break;
        case 41: 
          { return new Symbol(sym.BIG, yychar, yyline, yytext());
          }
        case 163: break;
        case 71: 
          { return new Symbol(sym.HELLO, yychar, yyline, yytext());
          }
        case 164: break;
        case 75: 
          { return new Symbol(sym.SIXTH, yychar, yyline, yytext());
          }
        case 165: break;
        case 40: 
          { return new Symbol(sym.CAR, yychar, yyline, yytext());
          }
        case 166: break;
        case 106: 
          { return new Symbol(sym.ALWAYS, yychar, yyline, yytext());
          }
        case 167: break;
        case 8: 
          { return new Symbol(sym.cerrpar, yychar, yyline, yytext());
          }
        case 168: break;
        case 16: 
          { return new Symbol(sym.AN, yychar, yyline, yytext());
          }
        case 169: break;
        case 1: 
          { /*Ignore*/
          }
        case 170: break;
        case 9: 
          { return new Symbol(sym.abrllac, yychar, yyline, yytext());
          }
        case 171: break;
        case 91: 
          { return new Symbol(sym.BRAVE, yychar, yyline, yytext());
          }
        case 172: break;
        case 17: 
          { return new Symbol(sym.MY, yychar, yyline, yytext());
          }
        case 173: break;
        case 35: 
          { return new Symbol(sym.ALL, yychar, yyline, yytext());
          }
        case 174: break;
        case 130: 
          { return new Symbol(sym.EXCELLENT, yychar, yyline, yytext());
          }
        case 175: break;
        case 22: 
          { return new Symbol(sym.ONE, yychar, yyline, yytext());
          }
        case 176: break;
        case 54: 
          { return new Symbol(sym.WHAT, yychar, yyline, yytext());
          }
        case 177: break;
        case 36: 
          { return new Symbol(sym.ANY, yychar, yyline, yytext());
          }
        case 178: break;
        case 53: 
          { return new Symbol(sym.TREE, yychar, yyline, yytext());
          }
        case 179: break;
        case 51: 
          { return new Symbol(sym.THAT, yychar, yyline, yytext());
          }
        case 180: break;
        case 72: 
          { return new Symbol(sym.HAPPY, yychar, yyline, yytext());
          }
        case 181: break;
        case 113: 
          { return new Symbol(sym.HAPPILY, yychar, yyline, yytext());
          }
        case 182: break;
        case 142: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 183: break;
        case 116: 
          { return new Symbol(sym.SEVENTH, yychar, yyline, yytext());
          }
        case 184: break;
        case 138: 
          { return new Symbol(sym.FANTASTIC, yychar, yyline, yytext());
          }
        case 185: break;
        case 108: 
          { return new Symbol(sym.LOVELY, yychar, yyline, yytext());
          }
        case 186: break;
        case 107: 
          { return new Symbol(sym.LOUDLY, yychar, yyline, yytext());
          }
        case 187: break;
        case 126: 
          { return new Symbol(sym.EXCITING, yychar, yyline, yytext());
          }
        case 188: break;
        case 111: 
          { return new Symbol(sym.FLOWER, yychar, yyline, yytext());
          }
        case 189: break;
        case 26: 
          { return new Symbol(sym.SIX, yychar, yyline, yytext());
          }
        case 190: break;
        case 52: 
          { return new Symbol(sym.TALL, yychar, yyline, yytext());
          }
        case 191: break;
        case 3: 
          { return new Symbol(sym.A, yychar, yyline, yytext());
          }
        case 192: break;
        case 132: 
          { return new Symbol(sym.WONDERFUL, yychar, yyline, yytext());
          }
        case 193: break;
        case 128: 
          { return new Symbol(sym.CHARMING, yychar, yyline, yytext());
          }
        case 194: break;
        case 6: 
          { return new Symbol(sym.cerrin, yychar, yyline, yytext());
          }
        case 195: break;
        case 43: 
          { return new Symbol(sym.PEN, yychar, yyline, yytext());
          }
        case 196: break;
        case 60: 
          { return new Symbol(sym.MANY, yychar, yyline, yytext());
          }
        case 197: break;
        case 114: 
          { return new Symbol(sym.ELEGANT, yychar, yyline, yytext());
          }
        case 198: break;
        case 21: 
          { return new Symbol(sym.OLD, yychar, yyline, yytext());
          }
        case 199: break;
        case 139: 
          { return new Symbol(sym.INCREDIBLE, yychar, yyline, yytext());
          }
        case 200: break;
        case 62: 
          { return new Symbol(sym.BOOK, yychar, yyline, yytext());
          }
        case 201: break;
        case 87: 
          { return new Symbol(sym.WHERE, yychar, yyline, yytext());
          }
        case 202: break;
        case 112: 
          { return new Symbol(sym.HUNDRED, yychar, yyline, yytext());
          }
        case 203: break;
        case 125: 
          { return new Symbol(sym.ELEVENTH, yychar, yyline, yytext());
          }
        case 204: break;
        case 100: 
          { return new Symbol(sym.ELEVEN, yychar, yyline, yytext());
          }
        case 205: break;
        case 84: 
          { return new Symbol(sym.THREE, yychar, yyline, yytext());
          }
        case 206: break;
        case 140: 
          { return new Symbol(sym.INTERESTING, yychar, yyline, yytext());
          }
        case 207: break;
        case 105: 
          { return new Symbol(sym.TWENTY, yychar, yyline, yytext());
          }
        case 208: break;
        case 104: 
          { return new Symbol(sym.TWELVE, yychar, yyline, yytext());
          }
        case 209: break;
        case 102: 
          { return new Symbol(sym.SLOWLY, yychar, yyline, yytext());
          }
        case 210: break;
        case 93: 
          { return new Symbol(sym.FIFTH, yychar, yyline, yytext());
          }
        case 211: break;
        case 44: 
          { return new Symbol(sym.YOUR, yychar, yyline, yytext());
          }
        case 212: break;
        case 136: 
          { return new Symbol(sym.BOOKSHELF, yychar, yyline, yytext());
          }
        case 213: break;
        case 123: 
          { return new Symbol(sym.QUIETLY, yychar, yyline, yytext());
          }
        case 214: break;
        case 117: 
          { return new Symbol(sym.TWELFTH, yychar, yyline, yytext());
          }
        case 215: break;
        case 20: 
          { return new Symbol(sym.OUR, yychar, yyline, yytext());
          }
        case 216: break;
        case 45: 
          { return new Symbol(sym.HERE, yychar, yyline, yytext());
          }
        case 217: break;
        case 2: 
          { return new Symbol(sym.I, yychar, yyline, yytext());
          }
        case 218: break;
        case 121: 
          { return new Symbol(sym.puncom, yychar, yyline, yytext());
          }
        case 219: break;
        case 7: 
          { return new Symbol(sym.abrpar, yychar, yyline, yytext());
          }
        case 220: break;
        case 14: 
          { return new Symbol(sym.WE, yychar, yyline, yytext());
          }
        case 221: break;
        case 74: 
          { return new Symbol(sym.EVERY, yychar, yyline, yytext());
          }
        case 222: break;
        case 24: 
          { return new Symbol(sym.HOW, yychar, yyline, yytext());
          }
        case 223: break;
        case 5: 
          { return new Symbol(sym.cerrad, yychar, yyline, yytext());
          }
        case 224: break;
        case 101: 
          { return new Symbol(sym.SECOND, yychar, yyline, yytext());
          }
        case 225: break;
        case 98: 
          { return new Symbol(sym.EIGHTH, yychar, yyline, yytext());
          }
        case 226: break;
        case 92: 
          { return new Symbol(sym.FIRST, yychar, yyline, yytext());
          }
        case 227: break;
        case 77: 
          { return new Symbol(sym.SMART, yychar, yyline, yytext());
          }
        case 228: break;
        case 88: 
          { return new Symbol(sym.WHOSE, yychar, yyline, yytext());
          }
        case 229: break;
        case 12: 
          { return new Symbol(sym.HI, yychar, yyline, yytext());
          }
        case 230: break;
        case 13: 
          { return new Symbol(sym.HE, yychar, yyline, yytext());
          }
        case 231: break;
        case 134: 
          { return new Symbol(sym.DELICIOUS, yychar, yyline, yytext());
          }
        case 232: break;
        case 39: 
          { return new Symbol(sym.CAT, yychar, yyline, yytext());
          }
        case 233: break;
        case 129: 
          { return new Symbol(sym.HUNDREDTH, yychar, yyline, yytext());
          }
        case 234: break;
        case 25: 
          { return new Symbol(sym.HER, yychar, yyline, yytext());
          }
        case 235: break;
        case 97: 
          { return new Symbol(sym.NEVER, yychar, yyline, yytext());
          }
        case 236: break;
        case 57: 
          { return new Symbol(sym.WELL, yychar, yyline, yytext());
          }
        case 237: break;
        case 55: 
          { return new Symbol(sym.WHEN, yychar, yyline, yytext());
          }
        case 238: break;
        case 19: 
          { return new Symbol(sym.YOU, yychar, yyline, yytext());
          }
        case 239: break;
        case 50: 
          { return new Symbol(sym.THEY, yychar, yyline, yytext());
          }
        case 240: break;
        case 29: 
          { return new Symbol(sym.TEN, yychar, yyline, yytext());
          }
        case 241: break;
        case 48: 
          { return new Symbol(sym.SAME, yychar, yyline, yytext());
          }
        case 242: break;
        case 76: 
          { return new Symbol(sym.SEVEN, yychar, yyline, yytext());
          }
        case 243: break;
        case 42: 
          { return new Symbol(sym.FEW, yychar, yyline, yytext());
          }
        case 244: break;
        case 32: 
          { return new Symbol(sym.WHY, yychar, yyline, yytext());
          }
        case 245: break;
        case 82: 
          { return new Symbol(sym.THEIR, yychar, yyline, yytext());
          }
        case 246: break;
        case 61: 
          { return new Symbol(sym.COLD, yychar, yyline, yytext());
          }
        case 247: break;
        case 31: 
          { return new Symbol(sym.TWO, yychar, yyline, yytext());
          }
        case 248: break;
        case 124: 
          { return new Symbol(sym.QUICKLY, yychar, yyline, yytext());
          }
        case 249: break;
        case 67: 
          { return new Symbol(sym.NAME, yychar, yyline, yytext());
          }
        case 250: break;
        case 65: 
          { return new Symbol(sym.FOUR, yychar, yyline, yytext());
          }
        case 251: break;
        case 86: 
          { return new Symbol(sym.WHICH, yychar, yyline, yytext());
          }
        case 252: break;
        case 133: 
          { return new Symbol(sym.DIFFERENT, yychar, yyline, yytext());
          }
        case 253: break;
        case 80: 
          { return new Symbol(sym.THIRD, yychar, yyline, yytext());
          }
        case 254: break;
        case 115: 
          { return new Symbol(sym.SEVERAL, yychar, yyline, yytext());
          }
        case 255: break;
        case 81: 
          { return new Symbol(sym.THOSE, yychar, yyline, yytext());
          }
        case 256: break;
        case 103: 
          { return new Symbol(sym.THEIRS, yychar, yyline, yytext());
          }
        case 257: break;
        case 27: 
          { return new Symbol(sym.SUN, yychar, yyline, yytext());
          }
        case 258: break;
        case 66: 
          { return new Symbol(sym.NINE, yychar, yyline, yytext());
          }
        case 259: break;
        case 69: 
          { return new Symbol(sym.OTHER, yychar, yyline, yytext());
          }
        case 260: break;
        case 58: 
          { return new Symbol(sym.MINE, yychar, yyline, yytext());
          }
        case 261: break;
        case 141: 
          { return new Symbol(sym.INTELLIGENT, yychar, yyline, yytext());
          }
        case 262: break;
        case 131: 
          { return new Symbol(sym.TWENTIETH, yychar, yyline, yytext());
          }
        case 263: break;
        case 78: 
          { return new Symbol(sym.SMALL, yychar, yyline, yytext());
          }
        case 264: break;
        case 119: 
          { return new Symbol(sym.ANOTHER, yychar, yyline, yytext());
          }
        case 265: break;
        case 118: 
          { return new Symbol(sym.AMAZING, yychar, yyline, yytext());
          }
        case 266: break;
        case 85: 
          { return new Symbol(sym.TABLE, yychar, yyline, yytext());
          }
        case 267: break;
        case 47: 
          { return new Symbol(sym.SUCH, yychar, yyline, yytext());
          }
        case 268: break;
        case 79: 
          { return new Symbol(sym.TENTH, yychar, yyline, yytext());
          }
        case 269: break;
        case 83: 
          { return new Symbol(sym.THESE, yychar, yyline, yytext());
          }
        case 270: break;
        case 11: 
          { return new Symbol(sym.IT, yychar, yyline, yytext());
          }
        case 271: break;
        case 4: 
          { return new Symbol(sym.punn, yychar, yyline, yytext());
          }
        case 272: break;
        case 15: 
          { return new Symbol(sym.AM, yychar, yyline, yytext());
          }
        case 273: break;
        case 59: 
          { return new Symbol(sym.MUCH, yychar, yyline, yytext());
          }
        case 274: break;
        case 68: 
          { return new Symbol(sym.YOURS, yychar, yyline, yytext());
          }
        case 275: break;
        case 34: 
          { return new Symbol(sym.ARE, yychar, yyline, yytext());
          }
        case 276: break;
        case 18: 
          { return new Symbol(sym.ITS, yychar, yyline, yytext());
          }
        case 277: break;
        case 23: 
          { return new Symbol(sym.HIS, yychar, yyline, yytext());
          }
        case 278: break;
        case 110: 
          { return new Symbol(sym.FOURTH, yychar, yyline, yytext());
          }
        case 279: break;
        case 37: 
          { return new Symbol(sym.RED, yychar, yyline, yytext());
          }
        case 280: break;
        case 127: 
          { return new Symbol(sym.COMPUTER, yychar, yyline, yytext());
          }
        case 281: break;
        case 63: 
          { return new Symbol(sym.BOTH, yychar, yyline, yytext());
          }
        case 282: break;
        case 38: 
          { return new Symbol(sym.DOG, yychar, yyline, yytext());
          }
        case 283: break;
        case 89: 
          { return new Symbol(sym.CHAIR, yychar, yyline, yytext());
          }
        case 284: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
