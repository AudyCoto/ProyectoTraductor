/* The following code was generated by JFlex 1.4.3 on 2/06/23 11:32 PM */

package analizadores;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/06/23 11:32 PM from the specification file
 * <tt>C:/Users/audyc/Documents/NetBeansProjects/ProyectoTraductor/src/analizadores/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    54, 59,  0,  0,  0,  0,  0, 20, 61, 62,  0,  0,  1,  0, 58,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 55,  0,  0,  0,  0, 60, 
     0, 17, 36, 37, 35, 23, 29, 31,  8,  2, 57, 40, 28, 25, 44, 30, 
    42, 52, 22, 11, 16, 24, 48, 14, 51,  4, 49, 63,  0, 64,  0,  0, 
     0, 19, 33, 38, 32,  9, 27, 34, 10,  3, 56, 39, 26, 18, 43,  5, 
    41, 53, 21, 12, 13,  6, 46, 15, 50,  7, 45,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 47,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\15\0\1\3\1\0\1\3\34\0"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\20\0\1\15\3\0\2\16\2\0\1\17\56\0"+
    "\1\20\20\0\1\21\13\0\2\22\3\0\1\23\1\24"+
    "\27\0\1\23\153\0\1\25\1\0\1\21\13\0\1\26"+
    "\1\0\1\27\2\0\1\30\1\0\1\31\2\0\1\26"+
    "\1\32\1\33\2\0\1\34\1\35\4\0\1\36\1\0"+
    "\1\37\4\0\1\36\21\0\1\40\2\0\1\40\3\0"+
    "\1\41\7\0\1\42\6\0\1\43\27\0\1\44\2\0"+
    "\1\45\2\0\1\46\13\0\1\47\2\0\1\50\3\0"+
    "\1\50\14\0\1\45\10\0\1\44\6\0\1\51\10\0"+
    "\1\52\11\0\1\53\1\54\16\0\1\55\2\0\1\56"+
    "\50\0\1\57\1\60\22\0\1\57\26\0\1\61\4\0"+
    "\1\62\4\0\1\63\1\0\1\64\1\0\1\65\25\0"+
    "\1\66\12\0\1\67\1\70\3\0\1\70\14\0\1\66"+
    "\5\0\1\71\10\0\1\72\1\73\14\0\1\72\41\0"+
    "\1\74\4\0\1\75\10\0\1\76\1\77\1\0\1\100"+
    "\34\0\1\101\1\102\1\103\3\0\1\104\16\0\1\105"+
    "\11\0\2\106\14\0\1\107\3\0\1\110\1\0\1\111"+
    "\1\112\3\0\1\113\1\0\1\114\1\0\1\115\4\0"+
    "\1\116\1\0\1\117\1\0\1\120\1\121\1\122\55\0"+
    "\1\123\3\0\1\124\1\0\1\125\2\0\1\126\26\0"+
    "\1\127\3\0\1\130\1\131\3\0\1\132\3\0\1\133"+
    "\1\0\1\134\1\0\1\135\5\0\1\131\10\0\1\134"+
    "\30\0\1\136\2\0\1\137\1\140\4\0\1\141\7\0"+
    "\1\142\12\0\1\137\2\0\1\143\1\0\1\144\15\0"+
    "\1\145\23\0\1\146\27\0\1\147\1\150\4\0\1\151"+
    "\32\0\2\152\1\153\4\0\1\154\1\0\1\155\3\0"+
    "\1\156\1\0\1\157\5\0\1\160\6\0\1\161\1\162"+
    "\2\0\1\163\2\0\1\164\2\0\1\165\1\166\1\167"+
    "\3\0\1\170\10\0\1\171\1\172\1\173\3\0\1\170"+
    "\6\0\1\174\1\175\1\176\3\0\1\177\1\200\1\201"+
    "\1\202\1\203\1\204\3\0\1\205\1\206\1\207\1\0"+
    "\1\210\1\211\1\212\3\0\1\202\22\0\1\213\3\0"+
    "\1\214\1\215\6\0\1\216\1\0\1\217\6\0\1\160"+
    "\15\0\1\220\3\0\1\221\1\222\2\0\1\223\36\0"+
    "\1\224\11\0\1\225\2\0\1\226\20\0\1\227\1\0"+
    "\1\230\16\0\1\231\1\0\1\232\6\0\1\233\1\0"+
    "\1\234\1\0\1\235\5\0\1\236\13\0\1\237\1\240"+
    "\1\0\1\241\3\0\2\242\24\0\1\243\4\0\1\244"+
    "\1\245\5\0\1\246\1\247\2\0\1\250\4\0\1\251"+
    "\3\0\1\252\3\0\1\253\1\254\6\0\1\255\2\0"+
    "\1\256\1\257\2\0\1\260\1\0\1\261\1\0\1\262"+
    "\1\0\1\263\12\0\1\264\3\0\1\265\7\0\1\266"+
    "\1\267\1\270\2\0\1\271\4\0\1\250\5\0\1\272"+
    "\1\273\1\274\1\275\1\0\1\276\1\0\1\277\1\300"+
    "\1\0\1\277\6\0\1\301\1\0\1\302\1\303\6\0"+
    "\1\304\1\305\3\0\1\306\2\0\1\307\23\0\1\310"+
    "\10\0\1\311\1\312\5\0\1\313\1\314\1\0\1\315"+
    "\2\0\1\316\41\0\1\317\1\320\1\321\1\320\1\322"+
    "\6\0\1\323\1\324\1\325\1\326\1\327\4\0\1\330"+
    "\1\0\1\331\11\0\1\332\5\0\1\333\1\334\13\0"+
    "\1\335\5\0\1\336\1\337\31\0\1\340\1\341\1\0"+
    "\1\342\12\0\1\343\1\344\2\0\1\345\4\0\1\346"+
    "\1\347\1\350\2\0\1\351\1\352\12\0\1\353\2\0"+
    "\1\74\2\0\1\354\1\355\1\0\1\356\1\357\1\0"+
    "\1\360\10\0\1\361\1\362\1\363\13\0\1\364\2\0"+
    "\1\365\1\366\22\0\1\367\1\0\1\370\1\0\1\371"+
    "\1\0\1\372\5\0\1\373\1\374\14\0\1\375\1\376"+
    "\1\377\1\u0100\1\0\1\u0101\1\u0102\5\0\1\u0103\2\0"+
    "\1\u0104\1\0\1\u0105\2\0\1\u0106\1\u0107\1\u0108\1\u0109"+
    "\1\u010a\1\u010b\1\0\1\u010c\1\u010d\1\u010e\10\0\1\u010f"+
    "\4\0\1\u0110\1\u0111\1\u0112\5\0\1\u0113\2\0\1\u0114"+
    "\1\0\1\u0115\1\u0116\1\u0117\1\u0118\1\0\1\u0119\1\u011a"+
    "\1\0\1\u011b\7\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[1852];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"+
    "\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7"+
    "\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e\0\u07df"+
    "\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965\0\u09a6\0\u09e7"+
    "\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef"+
    "\0\u0c30\0\u0c30\0\u0c30\0\u0c30\0\u0c30\0\u0c30\0\u0c30\0\u0c30"+
    "\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38"+
    "\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040"+
    "\0\u1081\0\u0c30\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207"+
    "\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f"+
    "\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617"+
    "\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f"+
    "\0\u1860\0\u18a1\0\u18e2\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27"+
    "\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f"+
    "\0\u1c70\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37"+
    "\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f"+
    "\0\u2080\0\u20c1\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206\0\u2247"+
    "\0\u2288\0\u22c9\0\u230a\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f"+
    "\0\u2490\0\u24d1\0\u2512\0\u2553\0\u2594\0\u25d5\0\u2616\0\u2657"+
    "\0\u2698\0\u26d9\0\u271a\0\u0c30\0\u275b\0\u279c\0\u27dd\0\u281e"+
    "\0\u285f\0\u28a0\0\u28e1\0\u2922\0\u2963\0\u29a4\0\u29e5\0\u2a26"+
    "\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac\0\u2bed\0\u2c2e"+
    "\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32\0\u2d73\0\u2db4\0\u2df5\0\u2e36"+
    "\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a\0\u2f7b\0\u2fbc\0\u2ffd\0\u303e"+
    "\0\u307f\0\u30c0\0\u3101\0\u3142\0\u3183\0\u31c4\0\u3205\0\u3246"+
    "\0\u3287\0\u32c8\0\u3309\0\u334a\0\u338b\0\u33cc\0\u340d\0\u344e"+
    "\0\u348f\0\u34d0\0\u3511\0\u3552\0\u3593\0\u35d4\0\u3615\0\u3656"+
    "\0\u3697\0\u36d8\0\u3719\0\u375a\0\u379b\0\u37dc\0\u381d\0\u385e"+
    "\0\u389f\0\u38e0\0\u3921\0\u3962\0\u39a3\0\u39e4\0\u3a25\0\u3a66"+
    "\0\u3aa7\0\u3ae8\0\u3b29\0\u3b6a\0\u3bab\0\u3bec\0\u3c2d\0\u3c6e"+
    "\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u3db3\0\u3df4\0\u3e35\0\u3e76"+
    "\0\u3eb7\0\u3ef8\0\u3f39\0\u3f7a\0\u3fbb\0\u3ffc\0\u403d\0\u407e"+
    "\0\u40bf\0\u4100\0\u4141\0\u4182\0\u41c3\0\u4204\0\u4245\0\u4286"+
    "\0\u42c7\0\u4308\0\u4349\0\u438a\0\u43cb\0\u440c\0\u444d\0\u448e"+
    "\0\u44cf\0\u4510\0\u4551\0\u4592\0\u45d3\0\u4614\0\u4655\0\u4696"+
    "\0\u46d7\0\u4718\0\u4759\0\u479a\0\u47db\0\u481c\0\u485d\0\u0c30"+
    "\0\u489e\0\u0c30\0\u48df\0\u4920\0\u4961\0\u49a2\0\u49e3\0\u4a24"+
    "\0\u4a65\0\u4aa6\0\u4ae7\0\u4b28\0\u4b69\0\u4baa\0\u4beb\0\u0c30"+
    "\0\u4c2c\0\u4c6d\0\u0c30\0\u4cae\0\u0c30\0\u4cef\0\u4d30\0\u4d71"+
    "\0\u0c30\0\u0c30\0\u4db2\0\u4df3\0\u0c30\0\u0c30\0\u4e34\0\u4e75"+
    "\0\u4eb6\0\u4ef7\0\u4f38\0\u4f79\0\u0c30\0\u4fba\0\u4ffb\0\u503c"+
    "\0\u507d\0\u50be\0\u50ff\0\u5140\0\u5181\0\u51c2\0\u5203\0\u5244"+
    "\0\u5285\0\u52c6\0\u5307\0\u5348\0\u5389\0\u53ca\0\u540b\0\u544c"+
    "\0\u548d\0\u54ce\0\u550f\0\u5550\0\u5591\0\u55d2\0\u5613\0\u5654"+
    "\0\u5695\0\u56d6\0\u0c30\0\u5717\0\u5758\0\u5799\0\u57da\0\u581b"+
    "\0\u585c\0\u589d\0\u0c30\0\u58de\0\u591f\0\u5960\0\u59a1\0\u59e2"+
    "\0\u5a23\0\u0c30\0\u5a64\0\u5aa5\0\u5ae6\0\u5b27\0\u5b68\0\u5ba9"+
    "\0\u5bea\0\u5c2b\0\u5c6c\0\u5cad\0\u5cee\0\u5d2f\0\u5d70\0\u5db1"+
    "\0\u5df2\0\u5e33\0\u5e74\0\u5eb5\0\u5ef6\0\u5f37\0\u5f78\0\u5fb9"+
    "\0\u5ffa\0\u603b\0\u607c\0\u60bd\0\u60fe\0\u613f\0\u6180\0\u0c30"+
    "\0\u61c1\0\u6202\0\u6243\0\u6284\0\u62c5\0\u6306\0\u6347\0\u6388"+
    "\0\u63c9\0\u640a\0\u644b\0\u0c30\0\u648c\0\u64cd\0\u650e\0\u654f"+
    "\0\u6590\0\u65d1\0\u6612\0\u6653\0\u6694\0\u66d5\0\u6716\0\u6757"+
    "\0\u6798\0\u67d9\0\u681a\0\u685b\0\u689c\0\u68dd\0\u691e\0\u695f"+
    "\0\u69a0\0\u69e1\0\u6a22\0\u6a63\0\u6aa4\0\u6ae5\0\u6b26\0\u6b67"+
    "\0\u6ba8\0\u6be9\0\u6c2a\0\u6c6b\0\u6cac\0\u6ced\0\u6d2e\0\u0c30"+
    "\0\u6d6f\0\u6db0\0\u6df1\0\u6e32\0\u6e73\0\u6eb4\0\u6ef5\0\u6f36"+
    "\0\u0c30\0\u6f77\0\u6fb8\0\u6ff9\0\u703a\0\u707b\0\u70bc\0\u70fd"+
    "\0\u713e\0\u717f\0\u0c30\0\u0c30\0\u71c0\0\u7201\0\u7242\0\u7283"+
    "\0\u72c4\0\u7305\0\u7346\0\u7387\0\u73c8\0\u7409\0\u744a\0\u748b"+
    "\0\u74cc\0\u750d\0\u0c30\0\u754e\0\u758f\0\u0c30\0\u75d0\0\u7611"+
    "\0\u7652\0\u7693\0\u76d4\0\u7715\0\u7756\0\u7797\0\u77d8\0\u7819"+
    "\0\u785a\0\u789b\0\u78dc\0\u791d\0\u795e\0\u799f\0\u79e0\0\u7a21"+
    "\0\u7a62\0\u7aa3\0\u7ae4\0\u7b25\0\u7b66\0\u7ba7\0\u7be8\0\u7c29"+
    "\0\u7c6a\0\u7cab\0\u7cec\0\u7d2d\0\u7d6e\0\u7daf\0\u7df0\0\u7e31"+
    "\0\u7e72\0\u7eb3\0\u7ef4\0\u7f35\0\u7f76\0\u7fb7\0\u7ff8\0\u0c30"+
    "\0\u8039\0\u807a\0\u80bb\0\u80fc\0\u813d\0\u817e\0\u81bf\0\u8200"+
    "\0\u8241\0\u8282\0\u82c3\0\u8304\0\u8345\0\u8386\0\u83c7\0\u8408"+
    "\0\u8449\0\u848a\0\u84cb\0\u850c\0\u854d\0\u858e\0\u85cf\0\u8610"+
    "\0\u8651\0\u8692\0\u86d3\0\u8714\0\u8755\0\u8796\0\u87d7\0\u8818"+
    "\0\u8859\0\u889a\0\u88db\0\u891c\0\u895d\0\u899e\0\u89df\0\u8a20"+
    "\0\u8a61\0\u0c30\0\u8aa2\0\u8ae3\0\u8b24\0\u8b65\0\u0c30\0\u8ba6"+
    "\0\u8be7\0\u8c28\0\u8c69\0\u0c30\0\u8caa\0\u0c30\0\u8ceb\0\u0c30"+
    "\0\u8d2c\0\u8d6d\0\u8dae\0\u8def\0\u8e30\0\u8e71\0\u8eb2\0\u8ef3"+
    "\0\u8f34\0\u8f75\0\u8fb6\0\u8ff7\0\u9038\0\u9079\0\u90ba\0\u90fb"+
    "\0\u913c\0\u917d\0\u91be\0\u91ff\0\u9240\0\u9281\0\u92c2\0\u9303"+
    "\0\u9344\0\u9385\0\u93c6\0\u9407\0\u9448\0\u9489\0\u94ca\0\u950b"+
    "\0\u0c30\0\u954c\0\u958d\0\u95ce\0\u960f\0\u9650\0\u9691\0\u96d2"+
    "\0\u9713\0\u9754\0\u9795\0\u97d6\0\u9817\0\u9858\0\u9899\0\u98da"+
    "\0\u991b\0\u995c\0\u999d\0\u99de\0\u9a1f\0\u9a60\0\u9aa1\0\u9ae2"+
    "\0\u0c30\0\u9b23\0\u9b64\0\u9ba5\0\u9be6\0\u9c27\0\u9c68\0\u9ca9"+
    "\0\u9cea\0\u9d2b\0\u0c30\0\u9d6c\0\u9dad\0\u9dee\0\u9e2f\0\u9e70"+
    "\0\u9eb1\0\u9ef2\0\u9f33\0\u9f74\0\u9fb5\0\u9ff6\0\ua037\0\ua078"+
    "\0\ua0b9\0\ua0fa\0\ua13b\0\ua17c\0\ua1bd\0\ua1fe\0\ua23f\0\ua280"+
    "\0\ua2c1\0\ua302\0\ua343\0\ua384\0\ua3c5\0\ua406\0\ua447\0\ua488"+
    "\0\ua4c9\0\ua50a\0\ua54b\0\ua58c\0\ua5cd\0\ua60e\0\ua64f\0\ua690"+
    "\0\ua6d1\0\ua712\0\ua753\0\ua794\0\ua7d5\0\ua816\0\ua857\0\ua898"+
    "\0\ua8d9\0\ua91a\0\ua95b\0\ua99c\0\ua9dd\0\uaa1e\0\u0c30\0\uaa5f"+
    "\0\uaaa0\0\uaae1\0\uab22\0\uab63\0\uaba4\0\uabe5\0\uac26\0\u0c30"+
    "\0\u0c30\0\uac67\0\u0c30\0\uaca8\0\uace9\0\uad2a\0\uad6b\0\uadac"+
    "\0\uaded\0\uae2e\0\uae6f\0\uaeb0\0\uaef1\0\uaf32\0\uaf73\0\uafb4"+
    "\0\uaff5\0\ub036\0\ub077\0\ub0b8\0\ub0f9\0\ub13a\0\ub17b\0\ub1bc"+
    "\0\ub1fd\0\ub23e\0\ub27f\0\ub2c0\0\ub301\0\ub342\0\ub383\0\u0c30"+
    "\0\u0c30\0\u0c30\0\ub3c4\0\ub405\0\ub446\0\u0c30\0\ub487\0\ub4c8"+
    "\0\ub509\0\ub54a\0\ub58b\0\ub5cc\0\ub60d\0\ub64e\0\ub68f\0\ub6d0"+
    "\0\ub711\0\ub752\0\ub793\0\ub7d4\0\u0c30\0\ub815\0\ub856\0\ub897"+
    "\0\ub8d8\0\ub919\0\ub95a\0\ub99b\0\ub9dc\0\uba1d\0\uba5e\0\uba9f"+
    "\0\ubae0\0\ubb21\0\ubb62\0\ubba3\0\ubbe4\0\ubc25\0\ubc66\0\ubca7"+
    "\0\ubce8\0\ubd29\0\ubd6a\0\ubdab\0\u0c30\0\ubdec\0\ube2d\0\ube6e"+
    "\0\u0c30\0\ubeaf\0\u0c30\0\u0c30\0\ubef0\0\ubf31\0\ubf72\0\u0c30"+
    "\0\ubfb3\0\u0c30\0\ubff4\0\u0c30\0\uc035\0\uc076\0\uc0b7\0\uc0f8"+
    "\0\u0c30\0\uc139\0\u0c30\0\uc17a\0\u0c30\0\u0c30\0\u0c30\0\uc1bb"+
    "\0\uc1fc\0\uc23d\0\uc27e\0\uc2bf\0\uc300\0\uc341\0\uc382\0\uc3c3"+
    "\0\uc404\0\uc445\0\uc486\0\uc4c7\0\uc508\0\uc549\0\uc58a\0\uc5cb"+
    "\0\uc60c\0\uc64d\0\uc68e\0\uc6cf\0\uc710\0\uc751\0\uc792\0\uc7d3"+
    "\0\uc814\0\uc855\0\uc896\0\uc8d7\0\uc918\0\uc959\0\uc99a\0\uc9db"+
    "\0\uca1c\0\uca5d\0\uca9e\0\ucadf\0\ucb20\0\ucb61\0\ucba2\0\ucbe3"+
    "\0\ucc24\0\ucc65\0\ucca6\0\ucce7\0\u0c30\0\ucd28\0\ucd69\0\ucdaa"+
    "\0\u0c30\0\ucdeb\0\u0c30\0\uce2c\0\uce6d\0\u0c30\0\uceae\0\uceef"+
    "\0\ucf30\0\ucf71\0\ucfb2\0\ucff3\0\ud034\0\ud075\0\ud0b6\0\ud0f7"+
    "\0\ud138\0\ud179\0\ud1ba\0\ud1fb\0\ud23c\0\ud27d\0\ud2be\0\ud2ff"+
    "\0\ud340\0\ud381\0\ud3c2\0\ud403\0\u0c30\0\ud444\0\ud485\0\ud4c6"+
    "\0\u0c30\0\ud507\0\ud548\0\ud589\0\ud5ca\0\u0c30\0\ud60b\0\ud64c"+
    "\0\ud68d\0\u0c30\0\ud6ce\0\ud70f\0\ud750\0\u0c30\0\ud791\0\ud7d2"+
    "\0\ud813\0\ud854\0\ud895\0\ud8d6\0\ud917\0\ud958\0\ud999\0\ud9da"+
    "\0\uda1b\0\uda5c\0\uda9d\0\udade\0\udb1f\0\udb60\0\udba1\0\udbe2"+
    "\0\udc23\0\udc64\0\udca5\0\udce6\0\udd27\0\udd68\0\udda9\0\uddea"+
    "\0\ude2b\0\ude6c\0\udead\0\udeee\0\udf2f\0\udf70\0\udfb1\0\udff2"+
    "\0\ue033\0\ue074\0\ue0b5\0\ue0f6\0\ue137\0\u0c30\0\ue178\0\ue1b9"+
    "\0\ue1fa\0\u0c30\0\ue23b\0\ue27c\0\ue2bd\0\ue2fe\0\u0c30\0\ue33f"+
    "\0\ue380\0\ue3c1\0\ue402\0\ue443\0\ue484\0\ue4c5\0\u0c30\0\ue506"+
    "\0\ue547\0\ue588\0\ue5c9\0\ue60a\0\ue64b\0\ue68c\0\ue6cd\0\ue70e"+
    "\0\ue74f\0\ue790\0\ue7d1\0\ue812\0\u0c30\0\ue853\0\u0c30\0\ue894"+
    "\0\ue8d5\0\ue916\0\ue957\0\ue998\0\ue9d9\0\uea1a\0\uea5b\0\uea9c"+
    "\0\ueadd\0\ueb1e\0\ueb5f\0\ueba0\0\u0c30\0\uebe1\0\uec22\0\uec63"+
    "\0\ueca4\0\uece5\0\ued26\0\ued67\0\ueda8\0\uede9\0\uee2a\0\uee6b"+
    "\0\ueeac\0\ueeed\0\uef2e\0\uef6f\0\uefb0\0\ueff1\0\uf032\0\uf073"+
    "\0\u0c30\0\uf0b4\0\uf0f5\0\uf136\0\uf177\0\uf1b8\0\uf1f9\0\uf23a"+
    "\0\uf27b\0\uf2bc\0\uf2fd\0\uf33e\0\uf37f\0\uf3c0\0\uf401\0\uf442"+
    "\0\uf483\0\uf4c4\0\uf505\0\uf546\0\uf587\0\uf5c8\0\uf609\0\uf64a"+
    "\0\u0c30\0\u0c30\0\uf68b\0\uf6cc\0\uf70d\0\uf74e\0\u0c30\0\uf78f"+
    "\0\uf7d0\0\uf811\0\uf852\0\uf893\0\uf8d4\0\uf915\0\uf956\0\uf997"+
    "\0\uf9d8\0\ufa19\0\ufa5a\0\ufa9b\0\ufadc\0\ufb1d\0\ufb5e\0\ufb9f"+
    "\0\ufbe0\0\ufc21\0\ufc62\0\ufca3\0\ufce4\0\ufd25\0\ufd66\0\ufda7"+
    "\0\ufde8\0\ufe29\0\ufe6a\0\u0c30\0\ufeab\0\ufeec\0\uff2d\0\uff6e"+
    "\0\u0c30\0\uffaf\0\u0c30\0\ufff0\1\61\1\162\0\u0c30\1\263"+
    "\0\u0c30\1\364\1\u0135\1\u0176\1\u01b7\1\u01f8\1\u0239\1\u027a"+
    "\1\u02bb\1\u02fc\1\u033d\1\u037e\1\u03bf\0\u0c30\0\u0c30\1\u0400"+
    "\1\u0441\0\u0c30\1\u0482\1\u04c3\0\u0c30\1\u0504\1\u0545\0\u0c30"+
    "\0\u0c30\0\u0c30\1\u0586\1\u05c7\1\u0608\1\u0649\1\u068a\1\u06cb"+
    "\1\u070c\1\u074d\1\u078e\1\u07cf\1\u0810\1\u0851\0\u0c30\0\u0c30"+
    "\0\u0c30\1\u0892\1\u08d3\1\u0914\1\u0955\1\u0996\1\u09d7\1\u0a18"+
    "\1\u0a59\1\u0a9a\1\u0adb\0\u0c30\0\u0c30\0\u0c30\1\u0b1c\1\u0b5d"+
    "\1\u0b9e\0\u0c30\0\u0c30\0\u0c30\1\u0bdf\0\u0c30\0\u0c30\1\u0c20"+
    "\1\u0c61\1\u0ca2\0\u0c30\0\u0c30\0\u0c30\1\u0ce3\0\u0c30\0\u0c30"+
    "\0\u0c30\1\u0d24\1\u0d65\1\u0da6\1\u0de7\1\u0e28\1\u0e69\1\u0eaa"+
    "\1\u0eeb\1\u0f2c\1\u0f6d\1\u0fae\1\u0fef\1\u1030\1\u1071\1\u10b2"+
    "\1\u10f3\1\u1134\1\u1175\1\u11b6\1\u11f7\1\u1238\1\u1279\0\u0c30"+
    "\1\u12ba\1\u12fb\1\u133c\0\u0c30\0\u0c30\1\u137d\1\u13be\1\u13ff"+
    "\1\u1440\1\u1481\1\u14c2\0\u0c30\1\u1503\0\u0c30\1\u1544\1\u1585"+
    "\1\u15c6\1\u1607\1\u1648\1\u1689\1\u16ca\1\u170b\1\u174c\1\u178d"+
    "\1\u17ce\1\u180f\1\u1850\1\u1891\1\u18d2\1\u1913\1\u1954\1\u1995"+
    "\1\u19d6\1\u1a17\0\u0c30\1\u1a58\1\u1a99\1\u1ada\0\u0c30\0\u0c30"+
    "\1\u1b1b\1\u1b5c\0\u0c30\1\u1b9d\1\u1bde\1\u1c1f\1\u1c60\1\u1ca1"+
    "\1\u1ce2\1\u1d23\1\u1d64\1\u1da5\1\u1de6\1\u1e27\1\u1e68\1\u1ea9"+
    "\1\u1eea\1\u1f2b\1\u1f6c\1\u1fad\1\u1fee\1\u202f\1\u2070\1\u20b1"+
    "\1\u20f2\1\u2133\1\u2174\1\u21b5\1\u21f6\1\u2237\1\u2278\1\u22b9"+
    "\1\u22fa\0\u0c30\1\u233b\1\u237c\1\u23bd\1\u23fe\1\u243f\1\u2480"+
    "\1\u24c1\1\u2502\1\u2543\0\u0c30\1\u2584\1\u25c5\0\u0c30\1\u2606"+
    "\1\u2647\1\u2688\1\u26c9\1\u270a\1\u274b\1\u278c\1\u27cd\1\u280e"+
    "\1\u284f\1\u2890\1\u28d1\1\u2912\1\u2953\1\u2994\1\u29d5\0\u0c30"+
    "\1\u2a16\0\u0c30\1\u2a57\1\u2a98\1\u2ad9\1\u2b1a\1\u2b5b\1\u2b9c"+
    "\1\u2bdd\1\u2c1e\1\u2c5f\1\u2ca0\1\u2ce1\1\u2d22\1\u2d63\1\u2da4"+
    "\0\u0c30\1\u2de5\0\u0c30\1\u2e26\1\u2e67\1\u2ea8\1\u2ee9\1\u2f2a"+
    "\1\u2f6b\0\u0c30\1\u2fac\0\u0c30\1\u2fed\0\u0c30\1\u302e\1\u306f"+
    "\1\u30b0\1\u30f1\1\u3132\0\u0c30\1\u3173\1\u31b4\1\u31f5\1\u3236"+
    "\1\u3277\1\u32b8\1\u32f9\1\u333a\1\u337b\1\u33bc\1\u33fd\0\u0c30"+
    "\0\u0c30\1\u343e\0\u0c30\1\u347f\1\u34c0\1\u3501\1\u3542\1\u3583"+
    "\1\u35c4\1\u3605\1\u3646\1\u3687\1\u36c8\1\u3709\1\u374a\1\u378b"+
    "\1\u37cc\1\u380d\1\u384e\1\u388f\1\u38d0\1\u3911\1\u3952\1\u3993"+
    "\1\u39d4\1\u3a15\1\u3a56\1\u3a97\0\u0c30\1\u3ad8\1\u3b19\1\u3b5a"+
    "\1\u3b9b\0\u0c30\0\u0c30\1\u3bdc\1\u3c1d\1\u3c5e\1\u3c9f\1\u3ce0"+
    "\0\u0c30\0\u0c30\1\u3d21\1\u3d62\1\u3da3\1\u3de4\1\u3e25\1\u3e66"+
    "\1\u3ea7\0\u0c30\1\u3ee8\1\u3f29\1\u3f6a\0\u0c30\1\u3fab\1\u3fec"+
    "\1\u402d\0\u0c30\0\u0c30\1\u406e\1\u40af\1\u40f0\1\u4131\1\u4172"+
    "\1\u41b3\0\u0c30\1\u41f4\1\u4235\0\u0c30\0\u0c30\1\u4276\1\u42b7"+
    "\0\u0c30\1\u42f8\0\u0c30\1\u4339\0\u0c30\1\u437a\0\u0c30\1\u43bb"+
    "\1\u43fc\1\u443d\1\u447e\1\u44bf\1\u4500\1\u4541\1\u4582\1\u45c3"+
    "\1\u4604\0\u0c30\1\u4645\1\u4686\1\u46c7\0\u0c30\1\u4708\1\u4749"+
    "\1\u478a\1\u47cb\1\u480c\1\u484d\1\u488e\0\u0c30\0\u0c30\0\u0c30"+
    "\1\u48cf\1\u4910\0\u0c30\1\u4951\1\u4992\1\u49d3\1\u4a14\1\u4a55"+
    "\1\u4a96\1\u4ad7\1\u4b18\1\u4b59\1\u4b9a\0\u0c30\0\u0c30\0\u0c30"+
    "\0\u0c30\1\u4bdb\0\u0c30\1\u4c1c\1\u4c5d\0\u0c30\1\u4c9e\1\u4cdf"+
    "\1\u4d20\1\u4d61\1\u4da2\1\u4de3\1\u4e24\1\u4e65\0\u0c30\1\u4ea6"+
    "\0\u0c30\0\u0c30\1\u4ee7\1\u4f28\1\u4f69\1\u4faa\1\u4feb\1\u502c"+
    "\0\u0c30\0\u0c30\1\u506d\1\u50ae\1\u50ef\0\u0c30\1\u5130\1\u5171"+
    "\0\u0c30\1\u51b2\1\u51f3\1\u5234\1\u5275\1\u52b6\1\u52f7\1\u5338"+
    "\1\u5379\1\u53ba\1\u53fb\1\u543c\1\u547d\1\u54be\1\u54ff\1\u5540"+
    "\1\u5581\1\u55c2\1\u5603\1\u5644\0\u0c30\1\u5685\1\u56c6\1\u5707"+
    "\1\u5748\1\u5789\1\u57ca\1\u580b\1\u584c\0\u0c30\0\u0c30\1\u588d"+
    "\1\u58ce\1\u590f\1\u5950\1\u5991\0\u0c30\0\u0c30\1\u59d2\0\u0c30"+
    "\1\u5a13\1\u5a54\0\u0c30\1\u5a95\1\u5ad6\1\u5b17\1\u5b58\1\u5b99"+
    "\1\u5bda\1\u5c1b\1\u5c5c\1\u5c9d\1\u5cde\1\u5d1f\1\u5d60\1\u5da1"+
    "\1\u5de2\1\u5e23\1\u5e64\1\u5ea5\1\u5ee6\1\u5f27\1\u5f68\1\u5fa9"+
    "\1\u5fea\1\u602b\1\u606c\1\u60ad\1\u60ee\1\u612f\1\u6170\1\u61b1"+
    "\1\u61f2\1\u6233\1\u6274\1\u62b5\0\u0c30\1\u62f6\0\u0c30\1\u6337"+
    "\0\u0c30\1\u6378\1\u63b9\1\u63fa\1\u643b\1\u647c\1\u64bd\0\u0c30"+
    "\0\u0c30\0\u0c30\0\u0c30\0\u0c30\1\u64fe\1\u653f\1\u6580\1\u65c1"+
    "\0\u0c30\1\u6602\0\u0c30\1\u6643\1\u6684\1\u66c5\1\u6706\1\u6747"+
    "\1\u6788\1\u67c9\1\u680a\1\u684b\0\u0c30\1\u688c\1\u68cd\1\u690e"+
    "\1\u694f\1\u6990\0\u0c30\0\u0c30\1\u69d1\1\u6a12\1\u6a53\1\u6a94"+
    "\1\u6ad5\1\u6b16\1\u6b57\1\u6b98\1\u6bd9\1\u6c1a\1\u6c5b\0\u0c30"+
    "\1\u6c9c\1\u6cdd\1\u6d1e\1\u6d5f\1\u6da0\0\u0c30\0\u0c30\1\u6de1"+
    "\1\u6e22\1\u6e63\1\u6ea4\1\u6ee5\1\u6f26\1\u6f67\1\u6fa8\1\u6fe9"+
    "\1\u702a\1\u706b\1\u70ac\1\u70ed\1\u712e\1\u716f\1\u71b0\1\u71f1"+
    "\1\u7232\1\u7273\1\u72b4\1\u72f5\1\u7336\1\u7377\1\u73b8\1\u73f9"+
    "\0\u0c30\0\u0c30\1\u743a\0\u0c30\1\u747b\1\u74bc\1\u74fd\1\u753e"+
    "\1\u757f\1\u75c0\1\u7601\1\u7642\1\u7683\1\u76c4\0\u0c30\0\u0c30"+
    "\1\u7705\1\u7746\0\u0c30\1\u7787\1\u77c8\1\u7809\1\u784a\0\u0c30"+
    "\0\u0c30\0\u0c30\1\u788b\1\u78cc\0\u0c30\0\u0c30\1\u790d\1\u794e"+
    "\1\u798f\1\u79d0\1\u7a11\1\u7a52\1\u7a93\1\u7ad4\1\u7b15\1\u7b56"+
    "\0\u0c30\1\u7b97\1\u7bd8\0\u0c30\1\u7c19\1\u7c5a\0\u0c30\0\u0c30"+
    "\1\u7c9b\0\u0c30\0\u0c30\1\u7cdc\0\u0c30\1\u7d1d\1\u7d5e\1\u7d9f"+
    "\1\u7de0\1\u7e21\1\u7e62\1\u7ea3\1\u7ee4\0\u0c30\0\u0c30\0\u0c30"+
    "\1\u7f25\1\u7f66\1\u7fa7\1\u7fe8\1\u8029\1\u806a\1\u80ab\1\u80ec"+
    "\1\u812d\1\u816e\1\u81af\0\u0c30\1\u81f0\1\u8231\0\u0c30\0\u0c30"+
    "\1\u8272\1\u82b3\1\u82f4\1\u8335\1\u8376\1\u83b7\1\u83f8\1\u8439"+
    "\1\u847a\1\u84bb\1\u84fc\1\u853d\1\u857e\1\u85bf\1\u8600\1\u8641"+
    "\1\u8682\1\u86c3\0\u0c30\1\u8704\0\u0c30\1\u8745\0\u0c30\1\u8786"+
    "\0\u0c30\1\u87c7\1\u8808\1\u8849\1\u888a\1\u88cb\0\u0c30\0\u0c30"+
    "\1\u890c\1\u894d\1\u898e\1\u89cf\1\u8a10\1\u8a51\1\u8a92\1\u8ad3"+
    "\1\u8b14\1\u8b55\1\u8b96\1\u8bd7\0\u0c30\0\u0c30\0\u0c30\0\u0c30"+
    "\1\u8c18\0\u0c30\0\u0c30\1\u8c59\1\u8c9a\1\u8cdb\1\u8d1c\1\u8d5d"+
    "\0\u0c30\1\u8d9e\1\u8ddf\0\u0c30\1\u8e20\0\u0c30\1\u8e61\1\u8ea2"+
    "\0\u0c30\0\u0c30\0\u0c30\0\u0c30\0\u0c30\0\u0c30\1\u8ee3\0\u0c30"+
    "\0\u0c30\0\u0c30\1\u8f24\1\u8f65\1\u8fa6\1\u8fe7\1\u9028\1\u9069"+
    "\1\u90aa\1\u90eb\0\u0c30\1\u912c\1\u916d\1\u91ae\1\u91ef\0\u0c30"+
    "\0\u0c30\0\u0c30\1\u9230\1\u9271\1\u92b2\1\u92f3\1\u9334\0\u0c30"+
    "\1\u9375\1\u93b6\0\u0c30\1\u93f7\0\u0c30\0\u0c30\0\u0c30\0\u0c30"+
    "\1\u9438\0\u0c30\0\u0c30\1\u9479\0\u0c30\1\u94ba\1\u94fb\1\u953c"+
    "\1\u957d\1\u95be\1\u95ff\1\u9640";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1852];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\0\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\0\1\55\1\0"+
    "\1\56\3\0\1\57\1\60\1\2\3\0\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\0\1\2\64\0"+
    "\1\2\25\0\2\70\1\71\2\0\1\72\1\0\1\73"+
    "\1\0\1\74\4\0\1\75\13\0\1\76\1\77\4\0"+
    "\1\100\1\101\40\0\1\70\1\71\4\0\1\73\1\0"+
    "\1\74\21\0\1\77\4\0\1\100\32\0\1\102\30\0"+
    "\1\103\50\0\1\104\6\0\1\105\7\0\1\106\4\0"+
    "\1\107\16\0\1\110\1\0\1\111\41\0\1\112\25\0"+
    "\1\113\10\0\1\114\32\0\1\115\75\0\1\116\1\117"+
    "\1\0\1\120\1\121\2\0\1\122\7\0\1\123\1\0"+
    "\1\124\3\0\1\125\1\126\5\0\1\127\45\0\1\130"+
    "\17\0\1\131\6\0\1\132\20\0\1\133\2\0\1\134"+
    "\3\0\1\135\21\0\1\117\1\0\1\120\1\121\2\0"+
    "\1\122\11\0\1\124\57\0\1\136\1\137\1\0\1\140"+
    "\1\141\1\0\1\142\1\143\1\144\2\0\1\145\2\0"+
    "\1\146\1\147\1\150\1\151\3\0\1\152\1\153\1\154"+
    "\1\155\1\0\1\156\1\0\1\157\6\0\1\160\1\161"+
    "\2\0\1\162\1\163\1\164\1\165\27\0\1\137\1\0"+
    "\1\140\1\141\2\0\1\143\1\144\2\0\1\145\4\0"+
    "\1\150\1\151\6\0\1\155\13\0\1\161\2\0\1\162"+
    "\1\0\1\164\30\0\1\166\1\0\1\167\3\0\1\170"+
    "\1\171\4\0\1\172\3\0\1\173\1\0\1\174\55\0"+
    "\1\175\1\176\1\0\1\177\2\0\1\200\1\201\1\202"+
    "\6\0\1\203\1\0\1\204\3\0\1\205\6\0\1\206"+
    "\45\0\1\176\1\0\1\177\3\0\1\201\1\202\10\0"+
    "\1\204\57\0\1\207\1\166\1\0\1\167\2\0\1\210"+
    "\1\170\1\171\3\0\1\211\1\172\1\0\1\212\1\0"+
    "\1\173\1\0\1\174\1\213\1\214\6\0\1\215\44\0"+
    "\1\216\1\217\11\0\1\220\2\0\1\221\1\0\1\222"+
    "\2\0\1\223\1\224\2\0\1\225\1\226\1\0\1\227"+
    "\3\0\1\230\2\0\1\231\1\0\1\232\1\233\2\0"+
    "\1\234\1\235\1\236\1\237\27\0\1\240\1\0\1\241"+
    "\1\242\1\243\1\0\1\244\11\0\1\245\60\0\1\217"+
    "\11\0\1\220\4\0\1\222\2\0\1\223\4\0\1\246"+
    "\5\0\1\247\5\0\1\233\2\0\1\234\1\0\1\236"+
    "\32\0\1\250\1\251\2\0\1\252\11\0\1\253\33\0"+
    "\1\254\23\0\1\255\1\256\1\0\1\250\1\251\2\0"+
    "\1\252\7\0\1\257\1\0\1\253\3\0\1\260\1\261"+
    "\5\0\1\262\44\0\1\263\1\130\15\0\1\264\1\0"+
    "\1\131\6\0\1\132\1\0\1\265\16\0\1\133\1\266"+
    "\1\0\1\134\1\0\1\267\1\0\1\135\1\270\30\0"+
    "\2\112\22\0\1\271\2\0\1\113\10\0\1\114\1\272"+
    "\26\0\1\273\1\240\1\274\1\275\1\242\1\243\1\0"+
    "\1\244\7\0\1\276\1\0\1\245\3\0\1\244\1\277"+
    "\5\0\1\300\45\0\1\301\1\0\1\302\1\303\14\0"+
    "\1\304\60\0\1\305\1\0\1\306\1\307\2\0\1\310"+
    "\11\0\1\311\1\0\1\312\4\0\1\313\50\0\1\314"+
    "\1\301\1\0\1\302\13\0\1\315\1\0\1\304\12\0"+
    "\1\316\44\0\1\317\1\305\1\0\1\306\1\307\2\0"+
    "\1\310\7\0\1\320\1\0\1\311\1\0\1\312\1\321"+
    "\1\322\1\323\1\0\1\313\1\0\1\324\1\0\1\325"+
    "\50\0\1\104\6\0\1\105\2\0\1\326\4\0\1\106"+
    "\1\327\1\0\1\330\1\0\1\107\1\0\1\331\14\0"+
    "\1\110\1\332\1\111\1\333\26\0\1\334\1\335\1\0"+
    "\1\336\1\337\2\0\1\340\7\0\1\341\1\0\1\342"+
    "\3\0\1\343\1\344\5\0\1\345\45\0\1\346\1\0"+
    "\1\347\1\350\2\0\1\351\72\0\1\352\1\0\1\353"+
    "\1\354\2\0\1\355\11\0\1\356\1\0\1\357\56\0"+
    "\1\335\1\0\1\336\1\337\2\0\1\340\11\0\1\342"+
    "\57\0\1\360\1\361\1\0\1\362\1\350\2\0\1\351"+
    "\15\0\1\363\1\364\5\0\1\365\44\0\1\366\1\352"+
    "\1\0\1\353\1\354\2\0\1\355\7\0\1\367\1\0"+
    "\1\356\1\0\1\357\1\370\1\371\1\372\5\0\1\373"+
    "\47\0\1\374\1\375\1\0\1\376\1\377\1\u0100\6\0"+
    "\1\u0101\1\0\1\u0102\1\0\1\u0103\1\u0104\1\u0105\1\u0106"+
    "\1\0\1\u0107\1\0\1\u0108\1\0\1\u0109\47\0\1\u010a"+
    "\1\375\2\0\1\377\1\u0100\10\0\1\u0102\1\0\1\u0103"+
    "\4\0\1\u0107\51\0\1\u010b\5\0\1\u010c\71\0\1\u010d"+
    "\1\u010b\5\0\1\u010c\15\0\1\u010e\54\0\1\u010f\1\0"+
    "\1\u0110\1\u0111\2\0\1\u0112\1\u0113\10\0\1\u0114\57\0"+
    "\1\u0115\1\u010f\1\0\1\u0110\2\0\1\u0116\1\u0117\1\u0113"+
    "\6\0\1\u0118\1\0\1\u0114\3\0\1\u0119\6\0\1\u011a"+
    "\45\0\1\u011b\2\0\1\u011c\2\0\1\u011d\11\0\1\u011e"+
    "\57\0\1\u011f\1\u011b\2\0\1\u011c\2\0\1\u011d\7\0"+
    "\1\u0120\1\0\1\u011e\3\0\1\u0121\1\u0122\73\0\1\u0123"+
    "\76\0\1\u0124\1\0\1\u0123\63\0\1\u0125\21\0\1\u0126"+
    "\56\0\1\u0127\207\0\1\u0128\77\0\1\u0128\136\0\1\u0129"+
    "\51\0\1\u012a\130\0\1\u012b\55\0\1\u012c\62\0\1\u012d"+
    "\103\0\1\u012e\1\u012f\22\0\1\u0130\5\0\1\u0131\45\0"+
    "\1\u0132\4\0\1\u0133\22\0\1\u0134\1\0\1\u0135\41\0"+
    "\1\u0136\122\0\1\u0137\75\0\1\u0138\65\0\1\u0139\111\0"+
    "\1\u013a\115\0\1\u013b\55\0\1\u013c\74\0\1\u013d\121\0"+
    "\1\u013e\101\0\1\u013f\53\0\1\u0140\105\0\1\u0141\15\0"+
    "\1\u0142\63\0\1\u0141\5\0\1\u0142\64\0\1\u0143\5\0"+
    "\1\u0144\1\u0145\1\0\1\u0146\5\0\1\u0147\25\0\1\u0148"+
    "\47\0\1\u0149\30\0\1\u014a\52\0\1\u014b\4\0\1\u014c"+
    "\66\0\1\u014d\5\0\1\u014e\23\0\1\u014f\43\0\1\u014d"+
    "\7\0\1\u0150\23\0\1\u0151\55\0\1\u0152\5\0\1\u0153"+
    "\75\0\1\u0154\22\0\1\u0155\37\0\1\u0156\2\0\1\u0146"+
    "\1\0\1\u0145\5\0\1\u0157\1\0\1\u0158\23\0\1\u0159"+
    "\66\0\1\u015a\52\0\1\u015b\75\0\1\u015c\100\0\1\u015d"+
    "\30\0\1\u015e\25\0\1\u015f\21\0\1\u0160\135\0\1\u0161"+
    "\66\0\1\u0162\17\0\1\u0163\6\0\1\u0164\47\0\1\u0165"+
    "\20\0\1\u0166\6\0\1\u0167\40\0\1\u0168\10\0\1\u0169"+
    "\113\0\1\u016a\4\0\1\u016b\27\0\1\u016c\33\0\1\u016d"+
    "\74\0\1\u016e\13\0\1\u016f\7\0\1\u0170\25\0\1\u0171"+
    "\1\0\1\u0172\3\0\1\u0173\75\0\1\u0174\16\0\1\u0175"+
    "\101\0\1\u0176\1\0\1\u0177\101\0\1\u0178\2\0\1\u0179"+
    "\6\0\1\u017a\60\0\1\u017b\77\0\1\u017c\7\0\1\u017d"+
    "\5\0\1\u017a\74\0\1\u017e\10\0\1\u017f\12\0\1\u0180"+
    "\65\0\1\u0181\6\0\1\u016b\45\0\1\u0182\64\0\1\u0183"+
    "\131\0\1\u0184\73\0\1\u0185\3\0\1\u0186\45\0\1\u0187"+
    "\101\0\1\u0188\100\0\1\u0189\77\0\1\u018a\121\0\1\u018b"+
    "\76\0\1\u018c\104\0\1\u018d\14\0\1\u018e\60\0\1\u018f"+
    "\101\0\1\u0190\6\0\1\u0191\20\0\1\u0192\30\0\1\u0193"+
    "\1\0\1\u0194\3\0\1\u0195\11\0\1\u0196\1\0\1\u0197"+
    "\60\0\1\u0198\3\0\1\u0199\121\0\1\u019a\6\0\1\u019b"+
    "\50\0\1\u019c\11\0\1\u019d\70\0\1\u019e\4\0\1\u019f"+
    "\74\0\1\u01a0\1\u01a1\136\0\1\u01a2\27\0\1\u01a3\1\0"+
    "\1\u01a4\14\0\1\u01a5\5\0\1\u01a6\6\0\1\u01a7\65\0"+
    "\1\u01a8\6\0\1\u01a9\51\0\1\u01aa\1\0\1\u01ab\1\0"+
    "\1\u01a4\1\0\1\u01ac\11\0\1\u01ad\111\0\1\u01ae\76\0"+
    "\1\u01af\67\0\1\u01b0\12\0\1\u01b1\120\0\1\u01b2\52\0"+
    "\1\u01b3\10\0\1\u01b4\43\0\1\u01b5\16\0\1\u01b6\4\0"+
    "\1\u01b7\1\u01b8\6\0\1\u01b9\71\0\1\u01ba\6\0\1\u0198"+
    "\76\0\1\u01bb\7\0\1\u01bc\55\0\1\u01bd\5\0\1\u01be"+
    "\72\0\1\u01bf\12\0\1\u01c0\17\0\1\u01c1\55\0\1\u01c2"+
    "\75\0\1\u01c3\77\0\1\u01c4\65\0\1\u01c5\76\0\1\u01c6"+
    "\113\0\1\u01c7\66\0\1\u01c8\3\0\1\u01c9\7\0\1\u01ca"+
    "\73\0\1\u01cb\5\0\1\u01cc\1\u01c8\72\0\1\u01cd\76\0"+
    "\1\u01ce\12\0\1\u01cf\64\0\1\u01d0\15\0\1\u01d1\52\0"+
    "\1\u01d2\47\0\1\u01d3\52\0\1\u01d4\27\0\1\u01d5\40\0"+
    "\1\u01d6\75\0\1\u01d7\134\0\1\u01d8\101\0\1\u01d9\33\0"+
    "\1\u01da\1\0\1\u01db\5\0\1\u01dc\44\0\1\u01dd\22\0"+
    "\1\u01db\13\0\1\u01dc\15\0\1\u01de\24\0\1\u01df\70\0"+
    "\1\u01e0\65\0\1\u01e1\12\0\1\u01e2\41\0\1\u01e3\31\0"+
    "\1\u01e4\46\0\1\u01e5\137\0\1\u01e6\44\0\1\u01ce\12\0"+
    "\1\u01d1\54\0\1\u01d2\47\0\1\u01e7\30\0\1\u01e8\132\0"+
    "\1\u01e9\54\0\1\u01ea\23\0\1\u01eb\10\0\1\u01ec\70\0"+
    "\1\u01ed\44\0\1\u01ee\153\0\1\u01ef\76\0\1\u01f0\66\0"+
    "\1\u01f1\47\0\1\u01f2\27\0\1\u01eb\6\0\1\u01f3\71\0"+
    "\1\u01f4\65\0\1\u01f5\107\0\1\u01f6\54\0\1\u01f7\114\0"+
    "\1\u01f8\100\0\1\u01f9\7\0\1\u01fa\31\0\1\u01fb\36\0"+
    "\1\u01fc\116\0\1\u01fd\67\0\1\u01fe\101\0\1\u01ff\117\0"+
    "\1\u0200\37\0\1\u0201\72\0\1\u0202\32\0\1\u01e1\12\0"+
    "\1\u01e2\101\0\1\u0203\37\0\1\u0204\31\0\1\u0205\71\0"+
    "\1\u0206\4\0\1\u0207\10\0\1\u0208\31\0\1\u0209\101\0"+
    "\1\u020a\1\u020b\46\0\1\u020c\75\0\1\u020d\44\0\1\u020e"+
    "\2\0\1\u020f\67\0\1\u0210\2\0\1\u0211\10\0\1\u0212"+
    "\5\0\1\u0213\22\0\1\u0214\27\0\1\u0215\1\u0216\145\0"+
    "\1\u0217\44\0\1\u0218\75\0\1\u0219\36\0\1\u021a\30\0"+
    "\1\u021b\102\0\1\u021c\131\0\1\u021d\60\0\1\u021e\12\0"+
    "\1\u021f\53\0\1\u0220\23\0\1\u0221\27\0\1\u0222\33\0"+
    "\1\u0223\12\0\1\u0224\1\u0225\5\0\1\u0226\22\0\1\u0227"+
    "\33\0\1\u0228\40\0\1\u0229\26\0\1\u022a\114\0\1\u0218"+
    "\136\0\1\u022b\62\0\1\u022c\72\0\1\u022d\5\0\1\u022e"+
    "\52\0\1\u022f\111\0\1\u0230\105\0\1\u0138\115\0\1\u013b"+
    "\55\0\1\u0231\107\0\1\u013d\77\0\1\u0232\77\0\1\u0233"+
    "\60\0\1\u0234\17\0\1\u0235\56\0\1\u0236\150\0\1\u0237"+
    "\53\0\1\u0238\77\0\1\u0239\127\0\1\u023a\26\0\1\u023b"+
    "\124\0\1\u023c\7\0\1\u023d\56\0\1\u023e\10\0\1\u023f"+
    "\5\0\1\u0240\61\0\1\u0241\25\0\1\u0242\3\0\1\u0243"+
    "\64\0\1\u0244\100\0\1\u0245\16\0\1\u0246\71\0\1\u0247"+
    "\43\0\1\u0248\7\0\1\u0249\7\0\1\u024a\70\0\1\u024b"+
    "\74\0\1\u024c\11\0\1\u024d\14\0\1\u024e\72\0\1\u024f"+
    "\5\0\1\u0250\12\0\1\u0251\30\0\1\u0252\17\0\1\u0253"+
    "\70\0\1\u0254\12\0\1\u0255\66\0\1\u023e\10\0\1\u023f"+
    "\5\0\1\u0256\52\0\1\u0257\34\0\1\u0242\3\0\1\u0243"+
    "\66\0\1\u0258\15\0\1\u0259\62\0\1\u025a\102\0\1\u025b"+
    "\1\u0242\5\0\1\u025c\72\0\1\u0247\75\0\1\u025d\6\0"+
    "\1\u0250\10\0\1\u025e\26\0\1\u025f\16\0\1\u0260\100\0"+
    "\1\u0261\5\0\1\u024c\13\0\1\u024e\55\0\1\u0262\100\0"+
    "\1\u0263\5\0\1\u0264\7\0\1\u0265\61\0\1\u0266\2\0"+
    "\1\u0267\7\0\1\u0268\20\0\1\u0269\42\0\1\u026a\7\0"+
    "\1\u026b\55\0\1\u026c\16\0\1\u026d\104\0\1\u026e\56\0"+
    "\1\u026f\17\0\1\u0270\75\0\1\u0271\5\0\1\u0272\1\0"+
    "\1\u0273\3\0\1\u0274\52\0\1\u0275\6\0\1\u0271\7\0"+
    "\1\u0276\4\0\1\u0277\57\0\1\u0278\116\0\1\u0279\77\0"+
    "\1\u027a\72\0\1\u027b\5\0\1\u027c\57\0\1\u027d\1\u027e"+
    "\2\0\1\u027f\116\0\1\u0280\1\u0281\5\0\1\u0282\60\0"+
    "\1\u0283\12\0\1\u0284\2\0\1\u0285\17\0\1\u0286\43\0"+
    "\1\u0266\2\0\1\u0287\7\0\1\u0268\20\0\1\u0269\100\0"+
    "\1\u0288\34\0\1\u0289\145\0\1\u028a\30\0\1\u0289\126\0"+
    "\1\u028b\13\0\1\u028c\6\0\1\u028d\40\0\1\u028e\14\0"+
    "\1\u028f\57\0\1\u0290\103\0\1\u0291\36\0\1\u0292\1\0"+
    "\1\u0293\30\0\1\u0294\107\0\1\u0295\1\u0296\7\0\1\u0297"+
    "\107\0\1\u0298\10\0\1\u0299\13\0\1\u029a\55\0\1\u029b"+
    "\56\0\1\u0291\36\0\1\u0292\40\0\1\u029c\4\0\1\u029d"+
    "\5\0\1\u029e\65\0\1\u029f\40\0\1\u02a0\44\0\1\u02a1"+
    "\13\0\1\u02a2\112\0\1\u02a3\4\0\1\u02a4\52\0\1\u02a5"+
    "\56\0\1\u02a6\52\0\1\u02a7\44\0\1\u02a8\123\0\1\u02a9"+
    "\6\0\1\u02aa\55\0\1\u02ab\51\0\1\u02ac\55\0\1\u02ad"+
    "\46\0\1\u02ae\77\0\1\u02af\101\0\1\u02b0\55\0\1\u02b1"+
    "\77\0\1\u02b2\101\0\1\u02b3\120\0\1\u02b4\76\0\1\u02b5"+
    "\124\0\1\u02b6\101\0\1\u02b7\43\0\1\u02b8\100\0\1\u02b9"+
    "\72\0\1\u02ba\5\0\1\u02bb\114\0\1\u02bc\102\0\1\u02bd"+
    "\100\0\1\u02be\53\0\1\u02bf\24\0\1\u02c0\77\0\1\u02c1"+
    "\77\0\1\u02c2\101\0\1\u02c3\63\0\1\u02c4\142\0\1\u02c5"+
    "\30\0\1\u02c6\104\0\1\u02c7\114\0\1\u02c8\102\0\1\u02c9"+
    "\67\0\1\u02ca\101\0\1\u02cb\77\0\1\u02cc\75\0\1\u02cd"+
    "\130\0\1\u02ce\77\0\1\u02cf\45\0\1\u02d0\3\0\1\u02d1"+
    "\121\0\1\u02d2\111\0\1\u02d3\107\0\1\u02d4\66\0\1\u02d3"+
    "\111\0\1\u02d5\56\0\1\u02d1\6\0\1\u02d0\76\0\1\u02d6"+
    "\110\0\1\u02d7\77\0\1\u02d8\55\0\1\u02d9\73\0\1\u02da"+
    "\100\0\1\u02db\114\0\1\u02dc\63\0\1\u02dd\71\0\1\u02de"+
    "\137\0\1\u02df\6\0\1\u02e0\4\0\1\u02e1\47\0\1\u02e2"+
    "\56\0\1\u02e3\102\0\1\u02e4\120\0\1\u02e5\56\0\1\u02e6"+
    "\5\0\1\u02e7\123\0\1\u02e8\103\0\1\u02e9\5\0\1\u02ea"+
    "\53\0\1\u02eb\112\0\1\u02ec\110\0\1\u02ed\3\0\1\u02ee"+
    "\47\0\1\u02ef\74\0\1\u02f0\104\0\1\u02f1\75\0\1\u02f2"+
    "\114\0\1\u02f3\25\0\1\u02f4\52\0\1\u02f5\1\u02f6\104\0"+
    "\1\u02f7\52\0\1\u02f8\104\0\1\u02f9\114\0\1\u02fa\25\0"+
    "\1\u02fb\36\0\1\u02f6\13\0\1\u02fc\113\0\1\u02fd\10\0"+
    "\1\u02fe\34\0\1\u02ff\15\0\1\u0300\76\0\1\u0301\14\0"+
    "\1\u0302\105\0\1\u0303\6\0\1\u0304\55\0\1\u0305\72\0"+
    "\1\u0306\104\0\1\u0307\4\0\1\u0308\57\0\1\u0305\112\0"+
    "\1\u0309\112\0\1\u030a\101\0\1\u030b\71\0\1\u030c\61\0"+
    "\1\u02f2\116\0\1\u030d\5\0\1\u030e\63\0\1\u030f\77\0"+
    "\1\u0310\111\0\1\u02f0\71\0\1\u02f1\107\0\1\u0311\62\0"+
    "\1\u0312\127\0\1\u0313\103\0\1\u0314\104\0\1\u0315\101\0"+
    "\1\u0316\41\0\1\u0317\100\0\1\u0318\112\0\1\u0319\123\0"+
    "\1\u031a\43\0\1\u031b\104\0\1\u031c\77\0\1\u031d\10\0"+
    "\1\u031e\67\0\1\u031f\67\0\1\u0320\3\0\1\u0321\4\0"+
    "\1\u0322\5\0\1\u0323\73\0\1\u0324\74\0\1\u0325\121\0"+
    "\1\u0326\20\0\1\u0327\57\0\1\u0328\100\0\1\u0329\57\0"+
    "\1\u032a\72\0\1\u032b\124\0\1\u032c\71\0\1\u032d\71\0"+
    "\1\u032c\104\0\1\u032e\123\0\1\u032f\105\0\1\u0330\53\0"+
    "\1\u0331\106\0\1\u0332\25\0\1\u0333\37\0\1\u0334\15\0"+
    "\1\u0335\116\0\1\u0336\63\0\1\u0337\114\0\1\u0338\46\0"+
    "\1\u0339\5\0\1\u0335\103\0\1\u033a\25\0\1\u0333\42\0"+
    "\1\u0331\117\0\1\u033b\76\0\1\u033c\116\0\1\u0336\64\0"+
    "\1\u0337\107\0\1\u033d\64\0\1\u033e\100\0\1\u033f\64\0"+
    "\1\u031d\12\0\1\u0340\72\0\1\u0324\107\0\1\u0341\53\0"+
    "\1\u0342\10\0\1\u0343\15\0\1\u0323\62\0\1\u0344\121\0"+
    "\1\u0345\17\0\1\u0346\60\0\1\u0328\100\0\1\u0347\46\0"+
    "\1\u0348\125\0\1\u032a\116\0\1\u0349\62\0\1\u034a\71\0"+
    "\1\u034b\101\0\1\u034c\131\0\1\u034d\77\0\1\u034e\61\0"+
    "\1\u034f\102\0\1\u0350\121\0\1\u0351\26\0\1\u0352\102\0"+
    "\1\u0353\75\0\1\u0354\134\0\1\u0355\123\0\1\u0356\42\0"+
    "\1\u0357\143\0\1\u01d1\33\0\1\u0358\111\0\1\u0359\57\0"+
    "\1\u035a\123\0\1\u035b\73\0\1\u035c\107\0\1\u035d\47\0"+
    "\1\u035e\125\0\1\u035f\102\0\1\u0360\61\0\1\u0361\66\0"+
    "\1\u0362\115\0\1\u0363\62\0\1\u0364\107\0\1\u0365\100\0"+
    "\1\u0366\136\0\1\u0367\34\0\1\u0368\107\0\1\u0369\77\0"+
    "\1\u036a\76\0\1\u036b\102\0\1\u036c\131\0\1\u036d\47\0"+
    "\1\u036e\140\0\1\u036f\35\0\1\u0370\133\0\1\u0371\66\0"+
    "\1\u0372\62\0\1\u0373\133\0\1\u0374\106\0\1\u0375\56\0"+
    "\1\u0376\77\0\1\u036e\110\0\1\u0377\51\0\1\u0378\72\0"+
    "\1\u0379\135\0\1\u037a\12\0\1\u037b\5\0\1\u037c\46\0"+
    "\1\u037d\54\0\1\u037e\134\0\1\u037f\70\0\1\u0380\54\0"+
    "\1\u0381\24\0\1\u0382\55\0\1\u02c7\115\0\1\u0383\106\0"+
    "\1\u0365\100\0\1\u0384\124\0\1\u0385\31\0\1\u036b\76\0"+
    "\1\u0386\106\0\1\u0369\144\0\1\u0385\53\0\1\u0387\121\0"+
    "\1\u0388\103\0\1\u0389\65\0\1\u038a\63\0\1\u038b\66\0"+
    "\1\u038c\112\0\1\u0385\64\0\1\u038d\142\0\1\u038e\54\0"+
    "\1\u038f\65\0\1\u0293\102\0\1\u0390\101\0\1\u0391\74\0"+
    "\1\u0392\121\0\1\u0393\73\0\1\u0394\126\0\1\u0395\42\0"+
    "\1\u0396\100\0\1\u0397\74\0\1\u0398\106\0\1\u0399\135\0"+
    "\1\u0389\30\0\1\u039a\146\0\1\u038e\47\0\1\u039b\122\0"+
    "\1\u039c\64\0\1\u039d\61\0\1\u0293\103\0\1\u039e\113\0"+
    "\1\u039f\72\0\1\u03a0\107\0\1\u0392\71\0\1\u0396\100\0"+
    "\1\u03a1\107\0\1\u03a2\125\0\1\u03a3\42\0\1\u03a4\110\0"+
    "\1\u03a5\106\0\1\u03a6\73\0\1\u03a7\125\0\1\u03a8\26\0"+
    "\1\u03a9\117\0\1\u03aa\102\0\1\u03ab\115\0\1\u03ac\102\0"+
    "\1\u03ad\53\0\1\u03ae\74\0\1\u03af\3\0\1\u03b0\126\0"+
    "\1\u03b1\75\0\1\u03b2\60\0\1\u03b3\6\0\1\u03b4\71\0"+
    "\1\u03b5\117\0\1\u03b6\104\0\1\u03b7\47\0\1\u03b8\27\0"+
    "\1\u03b9\53\0\1\u03ba\116\0\1\u03bb\61\0\1\u03bc\101\0"+
    "\1\u03bd\115\0\1\u03be\51\0\1\u03bf\106\0\1\u03c0\136\0"+
    "\1\u03c1\43\0\1\u03c2\71\0\1\u03c3\112\0\1\u03c4\71\0"+
    "\1\u03c5\37\0\1\u03c6\64\0\1\u03c7\71\0\1\u03c8\107\0"+
    "\1\u03c9\124\0\1\u03ca\32\0\1\u03cb\26\0\1\u03cc\61\0"+
    "\1\u03cd\113\0\1\u03ce\72\0\1\u03cf\55\0\1\u03d0\125\0"+
    "\1\u03d1\105\0\1\u03be\72\0\1\u03cf\72\0\1\u03d2\114\0"+
    "\1\u03c7\65\0\1\u03d3\113\0\1\u03d4\124\0\1\u03d5\50\0"+
    "\1\u03d6\14\0\1\u03d7\53\0\1\u03d8\70\0\1\u03c2\72\0"+
    "\1\u03d9\146\0\1\u03da\53\0\1\u03db\126\0\1\u03dc\67\0"+
    "\1\u03dd\73\0\1\u03de\56\0\1\u03df\72\0\1\u03e0\131\0"+
    "\1\u03e1\10\0\1\u03e2\35\0\1\u03e3\23\0\1\u03e4\67\0"+
    "\1\u03e5\115\0\1\u03e6\13\0\1\u03e7\35\0\1\u03e8\21\0"+
    "\1\u03e9\55\0\1\u03ea\24\0\1\u03eb\71\0\1\u03ec\111\0"+
    "\1\u03ed\64\0\1\u03ee\66\0\1\u03ef\5\0\1\u03f0\111\0"+
    "\1\u03ed\101\0\1\u03f1\76\0\1\u03f2\77\0\1\u03f3\107\0"+
    "\1\u03df\53\0\1\u03f4\144\0\1\u03f5\54\0\1\u03f6\101\0"+
    "\1\u03f7\32\0\1\u03f8\43\0\1\u03f9\36\0\1\u03fa\51\0"+
    "\1\u03fb\114\0\1\u03fc\54\0\1\u03fd\131\0\1\u03fe\71\0"+
    "\1\u03dd\72\0\1\u03ff\46\0\1\u0400\45\0\1\u03dc\67\0"+
    "\1\u0401\103\0\1\u0401\42\0\1\u0402\110\0\1\u0403\140\0"+
    "\1\u0404\46\0\1\u0405\60\0\1\u0406\122\0\1\u0407\67\0"+
    "\1\u0408\132\0\1\u0409\105\0\1\u040a\41\0\1\u040b\67\0"+
    "\1\u040c\106\0\1\u040d\125\0\1\u040e\62\0\1\u040f\141\0"+
    "\1\u0410\73\0\1\u0411\37\0\1\u0412\67\0\1\u0413\125\0"+
    "\1\u0414\64\0\1\u0415\132\0\1\u0416\54\0\1\u0417\61\0"+
    "\1\u0418\107\0\1\u0419\100\0\1\u041a\3\0\1\u041b\77\0"+
    "\1\u041c\126\0\1\u041d\47\0\1\u041e\100\0\1\u041f\116\0"+
    "\1\u0419\71\0\1\u0420\6\0\1\u041a\100\0\1\u041f\110\0"+
    "\1\u0421\70\0\1\u0422\64\0\1\u0423\70\0\1\u0424\77\0"+
    "\1\u0425\107\0\1\u0426\116\0\1\u0427\15\0\1\u0428\44\0"+
    "\1\u0426\34\0\1\u0429\47\0\1\u042a\103\0\1\u042b\106\0"+
    "\1\u042c\77\0\1\u042d\121\0\1\u042e\57\0\1\u042f\4\0"+
    "\1\u0430\101\0\1\u0431\116\0\1\u0432\40\0\1\u0433\134\0"+
    "\1\u0434\61\0\1\u0435\5\0\1\u0436\101\0\1\u0437\115\0"+
    "\1\u0438\55\0\1\u0439\65\0\1\u043a\77\0\1\u043b\112\0"+
    "\1\u043c\115\0\1\u043d\60\0\1\u043e\61\0\1\u043f\101\0"+
    "\1\u0440\7\0\1\u043a\75\0\1\u0441\72\0\1\u0442\106\0"+
    "\1\u0443\103\0\1\u0444\116\0\1\u0445\73\0\1\u0446\60\0"+
    "\1\u0447\75\0\1\u0448\1\0\1\u0449\77\0\1\u044a\3\0"+
    "\1\u0449\127\0\1\u0447\76\0\1\u044b\72\0\1\u044c\54\0"+
    "\1\u044d\125\0\1\u0443\100\0\1\u0441\64\0\1\u044e\102\0"+
    "\1\u044f\115\0\1\u0450\71\0\1\u0451\67\0\1\u0452\77\0"+
    "\1\u0453\131\0\1\u0454\111\0\1\u0455\34\0\1\u0456\100\0"+
    "\1\u0457\106\0\1\u0458\115\0\1\u0459\52\0\1\u045a\123\0"+
    "\1\u045b\100\0\1\u045c\61\0\1\u045d\77\0\1\u045a\102\0"+
    "\1\u045e\100\0\1\u045f\101\0\1\u045d\106\0\1\u0460\64\0"+
    "\1\u0461\114\0\1\u0462\63\0\1\u0463\150\0\1\u0464\52\0"+
    "\1\u0465\25\0\1\u0466\42\0\1\u0460\72\0\1\u0461\106\0"+
    "\1\u0462\74\0\1\u0467\72\0\1\u0468\150\0\1\u0469\100\0"+
    "\1\u046a\101\0\1\u046b\100\0\1\u046c\53\0\1\u046d\53\0"+
    "\1\u046e\141\0\1\u046f\52\0\1\u0470\115\0\1\u0471\106\0"+
    "\1\u046f\42\0\1\u0472\152\0\1\u0473\52\0\1\u0474\25\0"+
    "\1\u0475\44\0\1\u0470\114\0\1\u0471\76\0\1\u0476\102\0"+
    "\1\u0477\120\0\1\u0478\77\0\1\u0479\36\0\1\u047a\116\0"+
    "\1\u047b\62\0\1\u047c\116\0\1\u047c\111\0\1\u047d\65\0"+
    "\1\u047e\70\0\1\u047f\75\0\1\u0480\144\0\1\u0481\34\0"+
    "\1\u0482\126\0\1\u0483\51\0\1\u0484\114\0\1\u0485\64\0"+
    "\1\u0486\100\0\1\u0487\122\0\1\u0488\22\0\1\u0489\37\0"+
    "\1\u048a\74\0\1\u048b\142\0\1\u048c\31\0\1\u048d\103\0"+
    "\1\u048d\102\0\1\u048e\77\0\1\u048f\117\0\1\u0490\100\0"+
    "\1\u0491\63\0\1\u048f\77\0\1\u0491\100\0\1\u0490\116\0"+
    "\1\u0492\62\0\1\u0493\116\0\1\u0494\114\0\1\u047d\63\0"+
    "\1\u047e\115\0\1\u0483\64\0\1\u0487\77\0\1\u0495\101\0"+
    "\1\u0486\100\0\1\u0484\106\0\1\u0496\22\0\1\u0497\40\0"+
    "\1\u0498\107\0\1\u048b\125\0\1\u048c\34\0\1\u0499\150\0"+
    "\1\u049a\30\0\1\u0482\110\0\1\u049b\114\0\1\u049c\76\0"+
    "\1\u049d\57\0\1\u049e\116\0\1\u049f\54\0\1\u04a0\111\0"+
    "\1\u04a1\126\0\1\u04a2\51\0\1\u04a3\124\0\1\u04a4\43\0"+
    "\1\u04a5\105\0\1\u04a6\75\0\1\u04a7\111\0\1\u04a8\110\0"+
    "\1\u04a9\25\0\1\u04aa\45\0\1\u04a8\134\0\1\u04ab\52\0"+
    "\1\u04ac\77\0\1\u04ac\64\0\1\u04ad\116\0\1\u04ad\63\0"+
    "\1\u04ae\73\0\1\u04af\103\0\1\u04b0\126\0\1\u04b1\56\0"+
    "\1\u04b2\75\0\1\u04b3\135\0\1\u04b4\64\0\1\u04b5\121\0"+
    "\1\u04aa\37\0\1\u04b6\73\0\1\u04b7\125\0\1\u04b8\51\0"+
    "\1\u04b9\123\0\1\u01ee\77\0\1\u01ee\55\0\1\u04ba\134\0"+
    "\1\u04bb\76\0\1\u04bc\54\0\1\u04b6\110\0\1\u04bd\114\0"+
    "\1\u04be\65\0\1\u04bf\67\0\1\u04c0\117\0\1\u04c1\110\0"+
    "\1\u04c2\115\0\1\u04c3\30\0\1\u0456\100\0\1\u0457\114\0"+
    "\1\u04c4\114\0\1\u04c5\46\0\1\u04c6\132\0\1\u04c7\111\0"+
    "\1\u04b4\46\0\1\u04c8\114\0\1\u04c9\103\0\1\u04ca\100\0"+
    "\1\u04cb\100\0\1\u04cc\57\0\1\u04cd\135\0\1\u04ce\47\0"+
    "\1\u04cf\75\0\1\u04d0\71\0\1\u04d1\112\0\1\u04d2\72\0"+
    "\1\u04d3\114\0\1\u04d4\130\0\1\u04d5\36\0\1\u04d6\116\0"+
    "\1\u04d7\105\0\1\u04cb\100\0\1\u04d8\100\0\1\u04d9\64\0"+
    "\1\u04cf\125\0\1\u04da\43\0\1\u04d0\111\0\1\u04db\133\0"+
    "\1\u04dc\30\0\1\u04d3\123\0\1\u04dd\71\0\1\u04de\62\0"+
    "\1\u04df\124\0\1\u043c\111\0\1\u04e0\72\0\1\u04e1\104\0"+
    "\1\u04e2\76\0\1\u04e3\106\0\1\u04e4\50\0\1\u04e5\112\0"+
    "\1\u04e6\102\0\1\u04e7\105\0\1\u04e8\75\0\1\u04e9\62\0"+
    "\1\u04ea\123\0\1\u04eb\72\0\1\u04ec\73\0\1\u04ed\106\0"+
    "\1\u04ee\115\0\1\u04ef\41\0\1\u04f0\101\0\1\u04f1\101\0"+
    "\1\u04f2\102\0\1\u04f3\103\0\1\u04f4\71\0\1\u04f5\141\0"+
    "\1\u04f6\105\0\1\u04f7\41\0\1\u04f8\137\0\1\u04f9\36\0"+
    "\1\u04fa\104\0\1\u04fb\75\0\1\u04fc\141\0\1\u04fd\57\0"+
    "\1\u04fe\57\0\1\u04ff\125\0\1\u0500\72\0\1\u0501\54\0"+
    "\1\u04f2\105\0\1\u0502\134\0\1\u0503\107\0\1\u0504\62\0"+
    "\1\u0505\116\0\1\u0506\60\0\1\u0507\73\0\1\u04ff\71\0"+
    "\1\u0508\70\0\1\u04fc\117\0\1\u0509\125\0\1\u050a\37\0"+
    "\1\u050b\112\0\1\u050c\61\0\1\u050d\75\0\1\u050e\102\0"+
    "\1\u050f\136\0\1\u0510\105\0\1\u0511\56\0\1\u0512\103\0"+
    "\1\u0513\72\0\1\u0514\115\0\1\u0510\107\0\1\u0515\56\0"+
    "\1\u0512\75\0\1\u0516\132\0\1\u0517\61\0\1\u0518\45\0"+
    "\1\u0519\101\0\1\u051a\150\0\1\u051b\60\0\1\u051c\62\0"+
    "\1\u051d\103\0\1\u051e\101\0\1\u051f\115\0\1\u0520\111\0"+
    "\1\u0521\45\0\1\u0522\137\0\1\u0523\36\0\1\u0524\143\0"+
    "\1\u0523\53\0\1\u0525\64\0\1\u0526\135\0\1\u0521\56\0"+
    "\1\u0527\102\0\1\u0528\52\0\1\u0529\101\0\1\u052a\45\0"+
    "\1\u052b\44\0\1\u052c\71\0\1\u052d\115\0\1\u052e\72\0"+
    "\1\u052f\100\0\1\u0530\100\0\1\u0531\66\0\1\u0532\100\0"+
    "\1\u0533\106\0\1\u0534\72\0\1\u0535\106\0\1\u0536\142\0"+
    "\1\u0537\45\0\1\u052c\110\0\1\u0538\71\0\1\u052e\106\0"+
    "\1\u0534\53\0\1\u0539\125\0\1\u053a\125\0\1\u053b\26\0"+
    "\1\u053c\100\0\1\u053d\116\0\1\u053e\100\0\1\u053f\72\0"+
    "\1\u0540\77\0\1\u0541\101\0\1\u0542\113\0\1\u0543\63\0"+
    "\1\u0540\100\0\1\u0544\116\0\1\u0543\101\0\1\u0541\56\0"+
    "\1\u0545\131\0\1\u0546\57\0\1\u0547\103\0\1\u0548\130\0"+
    "\1\u0549\77\0\1\u054a\34\0\1\u054b\77\0\1\u054c\125\0"+
    "\1\u054d\62\0\1\u054e\75\0\1\u054f\103\0\1\u0550\121\0"+
    "\1\u0551\101\0\1\u0552\56\0\1\u0553\127\0\1\u0554\70\0"+
    "\1\u0555\77\0\1\u0556\105\0\1\u0557\101\0\1\u0558\72\0"+
    "\1\u0559\114\0\1\u055a\46\0\1\u055b\116\0\1\u055c\62\0"+
    "\1\u055d\72\0\1\u055e\112\0\1\u055f\121\0\1\u0560\74\0"+
    "\1\u0561\63\0\1\u0562\74\0\1\u0563\100\0\1\u0564\123\0"+
    "\1\u0565\76\0\1\u0566\75\0\1\u0563\100\0\1\u0567\105\0"+
    "\1\u0568\64\0\1\u0562\72\0\1\u0569\75\0\1\u056a\144\0"+
    "\1\u056b\50\0\1\u056c\130\0\1\u056d\36\0\1\u056e\100\0"+
    "\1\u056f\72\0\1\u0570\127\0\1\u0571\74\0\1\u0572\100\0"+
    "\1\u0573\77\0\1\u0572\100\0\1\u0574\67\0\1\u0575\124\0"+
    "\1\u0576\63\0\1\u0577\72\0\1\u0578\136\0\1\u0579\65\0"+
    "\1\u057a\102\0\1\u057b\100\0\1\u057c\75\0\1\u057d\100\0"+
    "\1\u057b\115\0\1\u057e\67\0\1\u057a\50\0\1\u057f\130\0"+
    "\1\u0576\56\0\1\u0580\77\0\1\u0581\67\0\1\u0582\75\0"+
    "\1\u0582\114\0\1\u0583\75\0\1\u0584\110\0\1\u0585\101\0"+
    "\1\u0585\57\0\1\u0586\104\0\1\u0587\72\0\1\u0588\111\0"+
    "\1\u0589\101\0\1\u058a\74\0\1\u058b\72\0\1\u058c\3\0"+
    "\1\u058d\116\0\1\u058e\73\0\1\u058f\75\0\1\u058f\111\0"+
    "\1\u0590\65\0\1\u0589\105\0\1\u0591\107\0\1\u058b\53\0"+
    "\1\u0592\1\0\1\u058d\123\0\1\u0593\53\0\1\u0594\134\0"+
    "\1\u0586\63\0\1\u0595\102\0\1\u0596\72\0\1\u0597\103\0"+
    "\1\u0598\133\0\1\u0599\42\0\1\u059a\106\0\1\u059b\75\0"+
    "\1\u059a\101\0\1\u059c\133\0\1\u059d\40\0\1\u059e\77\0"+
    "\1\u059e\126\0\1\u059f\54\0\1\u05a0\103\0\1\u05a1\71\0"+
    "\1\u05a2\75\0\1\u05a3\121\0\1\u05a4\101\0\1\u05a5\65\0"+
    "\1\u05a6\72\0\1\u05a7\124\0\1\u05a8\120\0\1\u05a9\41\0"+
    "\1\u05aa\101\0\1\u05ab\103\0\1\u05ab\134\0\1\u05ac\37\0"+
    "\1\u05ad\75\0\1\u0569\74\0\1\u056a\150\0\1\u05ae\45\0"+
    "\1\u05af\133\0\1\u05b0\53\0\1\u05b1\100\0\1\u05b2\53\0"+
    "\1\u05b3\132\0\1\u05b4\64\0\1\u05b5\115\0\1\u05a8\63\0"+
    "\1\u05a6\64\0\1\u05a7\103\0\1\u05b6\100\0\1\u05b7\116\0"+
    "\1\u05b8\64\0\1\u05b9\103\0\1\u05ba\76\0\1\u05bb\102\0"+
    "\1\u05bc\124\0\1\u05bd\65\0\1\u05be\101\0\1\u05b8\56\0"+
    "\1\u05b6\100\0\1\u05b7\123\0\1\u05b9\64\0\1\u05bf\130\0"+
    "\1\u05c0\63\0\1\u05be\62\0\1\u05bb\103\0\1\u05c1\114\0"+
    "\1\u055d\53\0\1\u05c2\133\0\1\u05c3\76\0\1\u05c4\54\0"+
    "\1\u05c5\76\0\1\u05c6\120\0\1\u05c7\60\0\1\u05c8\104\0"+
    "\1\u05c9\143\0\1\u05ca\77\0\1\u05ca\54\0\1\u05c9\107\0"+
    "\1\u05cb\70\0\1\u05c7\110\0\1\u05cc\46\0\1\u05cd\147\0"+
    "\1\u05ce\41\0\1\u05cf\111\0\1\u05d0\124\0\1\u05d1\54\0"+
    "\1\u05d2\56\0\1\u05d3\135\0\1\u05d4\52\0\1\u05d5\130\0"+
    "\1\u05d6\63\0\1\u05d7\56\0\1\u05d8\120\0\1\u05d9\60\0"+
    "\1\u05da\151\0\1\u05db\37\0\1\u05dc\112\0\1\u05dd\55\0"+
    "\1\u05de\141\0\1\u05df\63\0\1\u05d2\73\0\1\u05d9\61\0"+
    "\1\u05e0\100\0\1\u05e1\124\0\1\u05e2\111\0\1\u05d6\51\0"+
    "\1\u05e3\130\0\1\u05e4\55\0\1\u05e5\123\0\1\u05e6\46\0"+
    "\1\u05e7\121\0\1\u05e8\53\0\1\u05e9\101\0\1\u05ea\106\0"+
    "\1\u05eb\72\0\1\u05ec\134\0\1\u05ed\71\0\1\u05ee\106\0"+
    "\1\u05ef\47\0\1\u05f0\135\0\1\u05ed\44\0\1\u05f1\75\0"+
    "\1\u05f2\77\0\1\u05f3\100\0\1\u05f4\126\0\1\u05f5\57\0"+
    "\1\u05f6\116\0\1\u05f7\101\0\1\u05f7\56\0\1\u05f6\137\0"+
    "\1\u05f8\55\0\1\u05f9\123\0\1\u05fa\43\0\1\u05fb\117\0"+
    "\1\u05fc\60\0\1\u05fd\104\0\1\u05fe\112\0\1\u03cf\77\0"+
    "\1\u05ff\110\0\1\u0600\53\0\1\u0601\146\0\1\u0602\42\0"+
    "\1\u0603\111\0\1\u0604\110\0\1\u0605\116\0\1\u0606\44\0"+
    "\1\u0603\111\0\1\u0607\103\0\1\u0600\102\0\1\u05fd\71\0"+
    "\1\u05fe\112\0\1\u0608\103\0\1\u0609\42\0\1\u060a\122\0"+
    "\1\u060b\102\0\1\u060c\102\0\1\u060d\100\0\1\u060e\76\0"+
    "\1\u060f\57\0\1\u0610\116\0\1\u0611\72\0\1\u0612\102\0"+
    "\1\u0613\102\0\1\u0614\67\0\1\u0615\67\0\1\u0616\106\0"+
    "\1\u0617\142\0\1\u0618\30\0\1\u0619\123\0\1\u061a\65\0"+
    "\1\u061b\67\0\1\u061c\125\0\1\u061d\125\0\1\u061e\26\0"+
    "\1\u061f\130\0\1\u0620\102\0\1\u0621\60\0\1\u0622\76\0"+
    "\1\u0623\116\0\1\u0624\61\0\1\u0625\127\0\1\u0626\44\0"+
    "\1\u0627\103\0\1\u0627\134\0\1\u0628\64\0\1\u0625\66\0"+
    "\1\u0629\136\0\1\u062a\42\0\1\u062b\100\0\1\u062c\74\0"+
    "\1\u062d\142\0\1\u062e\36\0\1\u062f\116\0\1\u0630\62\0"+
    "\1\u0630\101\0\1\u0631\120\0\1\u0632\60\0\1\u0633\103\0"+
    "\1\u0634\74\0\1\u0635\116\0\1\u0636\71\0\1\u0634\70\0"+
    "\1\u0631\124\0\1\u0632\54\0\1\u0633\72\0\1\u0637\101\0"+
    "\1\u0638\122\0\1\u0639\67\0\1\u063a\76\0\1\u063b\77\0"+
    "\1\u063c\122\0\1\u063d\102\0\1\u063e\53\0\1\u063b\117\0"+
    "\1\u063f\77\0\1\u0639\65\0\1\u0640\141\0\1\u0641\77\0"+
    "\1\u0642\30\0\1\u0643\77\0\1\u0644\140\0\1\u0645\111\0"+
    "\1\u0646\101\0\1\u0647\63\0\1\u0645\44\0\1\u0648\103\0"+
    "\1\u0649\122\0\1\u064a\75\0\1\u064b\67\0\1\u064c\112\0"+
    "\1\u064b\65\0\1\u064c\101\0\1\u064d\67\0\1\u064e\110\0"+
    "\1\u064f\67\0\1\u0650\116\0\1\u0629\134\0\1\u0651\44\0"+
    "\1\u0652\100\0\1\u0653\107\0\1\u0654\125\0\1\u0655\53\0"+
    "\1\u0656\61\0\1\u0657\102\0\1\u0658\103\0\1\u0659\115\0"+
    "\1\u065a\66\0\1\u065b\114\0\1\u065c\54\0\1\u0658\103\0"+
    "\1\u065d\114\0\1\u065e\62\0\1\u065e\100\0\1\u065f\75\0"+
    "\1\u0660\100\0\1\u0661\122\0\1\u0662\100\0\1\u0663\77\0"+
    "\1\u065f\62\0\1\u0664\104\0\1\u0665\74\0\1\u0666\74\0"+
    "\1\u0667\104\0\1\u0668\100\0\1\u0669\122\0\1\u066a\100\0"+
    "\1\u066b\70\0\1\u066c\104\0\1\u066d\71\0\1\u066e\71\0"+
    "\1\u066f\125\0\1\u0670\71\0\1\u0671\72\0\1\u0672\114\0"+
    "\1\u0673\100\0\1\u0674\72\0\1\u0675\103\0\1\u0676\57\0"+
    "\1\u0677\100\0\1\u0678\103\0\1\u0679\140\0\1\u067a\100\0"+
    "\1\u067b\77\0\1\u067c\100\0\1\u067a\100\0\1\u067d\61\0"+
    "\1\u067e\74\0\1\u067f\56\0\1\u0680\124\0\1\u0681\124\0"+
    "\1\u0682\102\0\1\u0683\74\0\1\u067c\37\0\1\u0679\121\0"+
    "\1\u0684\73\0\1\u0685\100\0\1\u0686\124\0\1\u0687\36\0"+
    "\1\u0688\72\0\1\u0689\150\0\1\u068a\42\0\1\u068b\112\0"+
    "\1\u0688\125\0\1\u068c\44\0\1\u068b\62\0\1\u068d\103\0"+
    "\1\u068e\131\0\1\u068f\56\0\1\u0690\77\0\1\u0690\74\0"+
    "\1\u0691\75\0\1\u0691\100\0\1\u0692\103\0\1\u0692\144\0"+
    "\1\u0693\101\0\1\u0694\55\0\1\u0695\71\0\1\u0695\67\0"+
    "\1\u0696\104\0\1\u0697\125\0\1\u0698\63\0\1\u0699\113\0"+
    "\1\u069a\101\0\1\u069b\66\0\1\u0696\71\0\1\u069c\117\0"+
    "\1\u069d\67\0\1\u069e\115\0\1\u069f\101\0\1\u06a0\67\0"+
    "\1\u06a1\102\0\1\u06a1\60\0\1\u06a2\116\0\1\u06a3\73\0"+
    "\1\u06a4\67\0\1\u06a5\103\0\1\u06a6\75\0\1\u06a7\75\0"+
    "\1\u06a8\71\0\1\u06a9\122\0\1\u06aa\115\0\1\u06ab\111\0"+
    "\1\u06ac\52\0\1\u06ad\101\0\1\u06ad\65\0\1\u06ae\101\0"+
    "\1\u06af\67\0\1\u06b0\112\0\1\u06b1\71\0\1\u06b2\122\0"+
    "\1\u06b3\70\0\1\u06b4\62\0\1\u06b5\125\0\1\u06b6\62\0"+
    "\1\u06b6\135\0\1\u06b7\77\0\1\u06b7\50\0\1\u06b8\103\0"+
    "\1\u06b8\65\0\1\u06b9\120\0\1\u06ba\101\0\1\u06bb\55\0"+
    "\1\u06bc\153\0\1\u06bd\24\0\1\u06be\156\0\1\u06bf\40\0"+
    "\1\u06a7\70\0\1\u06a8\72\0\1\u06c0\124\0\1\u06aa\111\0"+
    "\1\u06ab\115\0\1\u06c1\61\0\1\u06c2\46\0\1\u06c3\104\0"+
    "\1\u06c4\73\0\1\u06c5\102\0\1\u06c4\114\0\1\u06c6\74\0"+
    "\1\u06c7\100\0\1\u06c8\77\0\1\u06c8\100\0\1\u06c7\101\0"+
    "\1\u06c9\67\0\1\u06ca\150\0\1\u06cb\33\0\1\u06cc\145\0"+
    "\1\u06cd\57\0\1\u06ce\100\0\1\u06cf\54\0\1\u06d0\145\0"+
    "\1\u06d1\40\0\1\u06d2\67\0\1\u06d3\151\0\1\u06d4\55\0"+
    "\1\u06d5\124\0\1\u06d6\100\0\1\u06d7\54\0\1\u06d8\104\0"+
    "\1\u06d9\100\0\1\u06da\53\0\1\u06db\116\0\1\u058f\126\0"+
    "\1\u06dc\64\0\1\u06dd\103\0\1\u06dd\72\0\1\u06de\57\0"+
    "\1\u06df\101\0\1\u06df\116\0\1\u06e0\57\0\1\u06e1\116\0"+
    "\1\u06e1\55\0\1\u06db\122\0\1\u058f\126\0\1\u06e2\40\0"+
    "\1\u06e3\107\0\1\u06e4\76\0\1\u06e5\72\0\1\u06e6\112\0"+
    "\1\u06e7\101\0\1\u06e7\67\0\1\u06e8\103\0\1\u06e8\63\0"+
    "\1\u06e9\106\0\1\u06ea\100\0\1\u06eb\100\0\1\u06ec\121\0"+
    "\1\u06ed\50\0\1\u06ee\125\0\1\u06ef\100\0\1\u06f0\100\0"+
    "\1\u06f1\105\0\1\u06f2\47\0\1\u06f3\103\0\1\u06f4\104\0"+
    "\1\u06f5\76\0\1\u06f5\136\0\1\u06f6\47\0\1\u06f7\103\0"+
    "\1\u06f8\75\0\1\u06f8\70\0\1\u06f9\105\0\1\u06fa\120\0"+
    "\1\u06fb\102\0\1\u06fb\54\0\1\u06fa\126\0\1\u06fc\131\0"+
    "\1\u06fd\16\0\1\u06fe\131\0\1\u06ff\103\0\1\u0700\50\0"+
    "\1\u0701\133\0\1\u0702\63\0\1\u0701\116\0\1\u06f6\53\0"+
    "\1\u06f7\110\0\1\u0703\116\0\1\u0704\77\0\1\u0704\35\0"+
    "\1\u0705\113\0\1\u0706\136\0\1\u0707\42\0\1\u0708\77\0"+
    "\1\u0709\101\0\1\u070a\116\0\1\u070b\54\0\1\u070c\123\0"+
    "\1\u070d\63\0\1\u070e\103\0\1\u0706\134\0\1\u070f\41\0"+
    "\1\u0710\76\0\1\u0709\105\0\1\u070a\100\0\1\u070e\114\0"+
    "\1\u070d\50\0\1\u070c\131\0\1\u070b\60\0\1\u0711\67\0"+
    "\1\u0712\103\0\1\u0712\111\0\1\u0711\75\0\1\u0713\100\0"+
    "\1\u0714\103\0\1\u0715\100\0\1\u0716\133\0\1\u0717\100\0"+
    "\1\u0718\100\0\1\u0719\100\0\1\u071a\36\0\1\u071b\143\0"+
    "\1\u071c\100\0\1\u071d\100\0\1\u071e\100\0\1\u071f\53\0"+
    "\1\u071b\117\0\1\u0720\64\0\1\u0721\121\0\1\u0722\101\0"+
    "\1\u0722\110\0\1\u0723\22\0\1\u0724\122\0\1\u0725\102\0"+
    "\1\u0726\102\0\1\u0727\100\0\1\u0721\111\0\1\u0720\75\0"+
    "\1\u0728\101\0\1\u0729\74\0\1\u0728\44\0\1\u072a\106\0"+
    "\1\u072b\116\0\1\u072b\53\0\1\u072c\140\0\1\u072d\53\0"+
    "\1\u072e\100\0\1\u072f\100\0\1\u0730\122\0\1\u072d\61\0"+
    "\1\u072e\100\0\1\u072f\100\0\1\u0730\66\0\1\u0731\106\0"+
    "\1\u0732\77\0\1\u0732\76\0\1\u0733\116\0\1\u0733\53\0"+
    "\1\u0734\144\0\1\u0735\77\0\1\u0735\36\0\1\u0736\132\0"+
    "\1\u0737\111\0\1\u0429\67\0\1\u0738\72\0\1\u0739\77\0"+
    "\1\u073a\101\0\1\u073b\125\0\1\u073c\44\0\1\u0710\60\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[104065];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\1\15\0\1\1\1\0\1\1\34\0\10\11"+
    "\1\1\20\0\1\11\3\0\2\1\2\0\1\1\56\0"+
    "\1\1\20\0\1\1\13\0\2\1\3\0\1\1\1\11"+
    "\27\0\1\1\153\0\1\11\1\0\1\11\13\0\1\1"+
    "\1\0\1\11\2\0\1\11\1\0\1\11\2\0\1\1"+
    "\2\11\2\0\2\11\4\0\1\1\1\0\1\11\4\0"+
    "\1\1\21\0\1\1\2\0\1\1\3\0\1\11\7\0"+
    "\1\11\6\0\1\11\27\0\1\1\2\0\1\1\2\0"+
    "\1\11\13\0\1\11\2\0\1\1\3\0\1\1\14\0"+
    "\1\1\10\0\1\1\6\0\1\11\10\0\1\11\11\0"+
    "\2\11\16\0\1\11\2\0\1\11\50\0\1\1\1\11"+
    "\22\0\1\1\26\0\1\11\4\0\1\11\4\0\1\11"+
    "\1\0\1\11\1\0\1\11\25\0\1\1\12\0\1\11"+
    "\1\1\3\0\1\1\14\0\1\1\5\0\1\11\10\0"+
    "\1\1\1\11\14\0\1\1\41\0\1\1\4\0\1\11"+
    "\10\0\2\11\1\0\1\11\34\0\3\11\3\0\1\11"+
    "\16\0\1\11\11\0\2\1\14\0\1\11\3\0\1\11"+
    "\1\0\2\11\3\0\1\11\1\0\1\11\1\0\1\11"+
    "\4\0\1\11\1\0\1\11\1\0\3\11\55\0\1\11"+
    "\3\0\1\11\1\0\1\11\2\0\1\11\26\0\1\11"+
    "\3\0\1\11\1\1\3\0\1\11\3\0\1\11\1\0"+
    "\1\1\1\0\1\11\5\0\1\1\10\0\1\1\30\0"+
    "\1\11\2\0\1\1\1\11\4\0\1\11\7\0\1\11"+
    "\12\0\1\1\2\0\1\11\1\0\1\11\15\0\1\11"+
    "\23\0\1\11\27\0\2\11\4\0\1\11\32\0\2\1"+
    "\1\11\4\0\1\11\1\0\1\11\3\0\1\11\1\0"+
    "\1\11\5\0\1\1\6\0\2\11\2\0\1\11\2\0"+
    "\1\11\2\0\3\11\3\0\1\1\10\0\3\11\3\0"+
    "\1\1\6\0\3\11\3\0\3\11\1\1\2\11\3\0"+
    "\3\11\1\0\3\11\3\0\1\1\22\0\1\11\3\0"+
    "\2\11\6\0\1\11\1\0\1\11\6\0\1\1\15\0"+
    "\1\11\3\0\2\11\2\0\1\11\36\0\1\11\11\0"+
    "\1\11\2\0\1\11\20\0\1\11\1\0\1\11\16\0"+
    "\1\11\1\0\1\11\6\0\1\11\1\0\1\11\1\0"+
    "\1\11\5\0\1\11\13\0\2\11\1\0\1\11\3\0"+
    "\2\1\24\0\1\11\4\0\2\11\5\0\2\11\2\0"+
    "\1\1\4\0\1\11\3\0\1\11\3\0\2\11\6\0"+
    "\1\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\12\0\1\11\3\0\1\11\7\0"+
    "\3\11\2\0\1\11\4\0\1\1\5\0\4\11\1\0"+
    "\1\11\1\0\1\1\1\11\1\0\1\1\6\0\1\11"+
    "\1\0\2\11\6\0\2\11\3\0\1\11\2\0\1\11"+
    "\23\0\1\11\10\0\2\11\5\0\2\11\1\0\1\11"+
    "\2\0\1\11\41\0\1\11\1\1\1\11\1\1\1\11"+
    "\6\0\5\11\4\0\1\11\1\0\1\11\11\0\1\11"+
    "\5\0\2\11\13\0\1\11\5\0\2\11\31\0\2\11"+
    "\1\0\1\11\12\0\2\11\2\0\1\11\4\0\3\11"+
    "\2\0\2\11\12\0\1\11\2\0\1\11\2\0\2\11"+
    "\1\0\2\11\1\0\1\11\10\0\3\11\13\0\1\11"+
    "\2\0\2\11\22\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\5\0\2\11\14\0\4\11\1\0\2\11"+
    "\5\0\1\11\2\0\1\11\1\0\1\11\2\0\6\11"+
    "\1\0\3\11\10\0\1\11\4\0\3\11\5\0\1\11"+
    "\2\0\1\11\1\0\4\11\1\0\2\11\1\0\1\11"+
    "\7\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1852];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn,value);
        }
    private Symbol symbol(int type){
            return new Symbol(type, yyline, yycolumn);
        }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 275: 
          { return new Symbol(sym.DISGUSTING, yychar, yyline, yytext());
          }
        case 284: break;
        case 21: 
          { return new Symbol(sym.ITS, yychar, yyline, yytext());
          }
        case 285: break;
        case 138: 
          { return new Symbol(sym.WHOSE, yychar, yyline, yytext());
          }
        case 286: break;
        case 14: 
          { return new Symbol(sym.HI, yychar, yyline, yytext());
          }
        case 287: break;
        case 257: 
          { return new Symbol(sym.TWENTIETH, yychar, yyline, yytext());
          }
        case 288: break;
        case 130: 
          { return new Symbol(sym.THEIR, yychar, yyline, yytext());
          }
        case 289: break;
        case 144: 
          { return new Symbol(sym.LOYAL, yychar, yyline, yytext());
          }
        case 290: break;
        case 40: 
          { return new Symbol(sym.WHO, yychar, yyline, yytext());
          }
        case 291: break;
        case 167: 
          { return new Symbol(sym.EASILY, yychar, yyline, yytext());
          }
        case 292: break;
        case 115: 
          { return new Symbol(sym.SILLY, yychar, yyline, yytext());
          }
        case 293: break;
        case 87: 
          { return new Symbol(sym.MOON, yychar, yyline, yytext());
          }
        case 294: break;
        case 184: 
          { return new Symbol(sym.MYSELF, yychar, yyline, yytext());
          }
        case 295: break;
        case 139: 
          { return new Symbol(sym.ADULT, yychar, yyline, yytext());
          }
        case 296: break;
        case 281: 
          { return new Symbol(sym.ADVENTUROUS, yychar, yyline, yytext());
          }
        case 297: break;
        case 148: 
          { return new Symbol(sym.DIRTY, yychar, yyline, yytext());
          }
        case 298: break;
        case 72: 
          { return new Symbol(sym.THEY, yychar, yyline, yytext());
          }
        case 299: break;
        case 51: 
          { return new Symbol(sym.BEE, yychar, yyline, yytext());
          }
        case 300: break;
        case 234: 
          { return new Symbol(sym.INSECURE, yychar, yyline, yytext());
          }
        case 301: break;
        case 233: 
          { return new Symbol(sym.ICECREAM, yychar, yyline, yytext());
          }
        case 302: break;
        case 52: 
          { return new Symbol(sym.BED, yychar, yyline, yytext());
          }
        case 303: break;
        case 44: 
          { return new Symbol(sym.ANT, yychar, yyline, yytext());
          }
        case 304: break;
        case 9: 
          { return new Symbol(sym.abrllac, yychar, yyline, yytext());
          }
        case 305: break;
        case 178: 
          { return new Symbol(sym.TWENTY, yychar, yyline, yytext());
          }
        case 306: break;
        case 84: 
          { return new Symbol(sym.MUCH, yychar, yyline, yytext());
          }
        case 307: break;
        case 103: 
          { return new Symbol(sym.NICE, yychar, yyline, yytext());
          }
        case 308: break;
        case 240: 
          { return new Symbol(sym.STRANGER, yychar, yyline, yytext());
          }
        case 309: break;
        case 216: 
          { return new Symbol(sym.TEACHER, yychar, yyline, yytext());
          }
        case 310: break;
        case 18: 
          { return new Symbol(sym.AN, yychar, yyline, yytext());
          }
        case 311: break;
        case 189: 
          { return new Symbol(sym.FIERCE, yychar, yyline, yytext());
          }
        case 312: break;
        case 154: 
          { return new Symbol(sym.CLEAN, yychar, yyline, yytext());
          }
        case 313: break;
        case 71: 
          { return new Symbol(sym.THIS, yychar, yyline, yytext());
          }
        case 314: break;
        case 17: 
          { return new Symbol(sym.AM, yychar, yyline, yytext());
          }
        case 315: break;
        case 86: 
          { return new Symbol(sym.RUDE, yychar, yyline, yytext());
          }
        case 316: break;
        case 197: 
          { return new Symbol(sym.DOCTOR, yychar, yyline, yytext());
          }
        case 317: break;
        case 20: 
          { return new Symbol(sym.ME, yychar, yyline, yytext());
          }
        case 318: break;
        case 80: 
          { return new Symbol(sym.WHOM, yychar, yyline, yytext());
          }
        case 319: break;
        case 198: 
          { return new Symbol(sym.BORING, yychar, yyline, yytext());
          }
        case 320: break;
        case 276: 
          { return new Symbol(sym.PASSIONATE, yychar, yyline, yytext());
          }
        case 321: break;
        case 262: 
          { return new Symbol(sym.DELICIOUS, yychar, yyline, yytext());
          }
        case 322: break;
        case 145: 
          { return new Symbol(sym.FIRST, yychar, yyline, yytext());
          }
        case 323: break;
        case 85: 
          { return new Symbol(sym.MANY, yychar, yyline, yytext());
          }
        case 324: break;
        case 108: 
          { return new Symbol(sym.HOUSE, yychar, yyline, yytext());
          }
        case 325: break;
        case 245: 
          { return new Symbol(sym.GORGEOUS, yychar, yyline, yytext());
          }
        case 326: break;
        case 265: 
          { return new Symbol(sym.BUTTERFLY, yychar, yyline, yytext());
          }
        case 327: break;
        case 98: 
          { return new Symbol(sym.DOOR, yychar, yyline, yytext());
          }
        case 328: break;
        case 112: 
          { return new Symbol(sym.EIGHT, yychar, yyline, yytext());
          }
        case 329: break;
        case 256: 
          { return new Symbol(sym.SCIENTIST, yychar, yyline, yytext());
          }
        case 330: break;
        case 5: 
          { return new Symbol(sym.cerrad, yychar, yyline, yytext());
          }
        case 331: break;
        case 53: 
          { return new Symbol(sym.BAD, yychar, yyline, yytext());
          }
        case 332: break;
        case 224: 
          { return new Symbol(sym.CURIOUS, yychar, yyline, yytext());
          }
        case 333: break;
        case 158: 
          { return new Symbol(sym.PHONE, yychar, yyline, yytext());
          }
        case 334: break;
        case 250: 
          { return new Symbol(sym.CREATIVE, yychar, yyline, yytext());
          }
        case 335: break;
        case 228: 
          { return new Symbol(sym.PICTURE, yychar, yyline, yytext());
          }
        case 336: break;
        case 151: 
          { return new Symbol(sym.CHILD, yychar, yyline, yytext());
          }
        case 337: break;
        case 31: 
          { return new Symbol(sym.HAT, yychar, yyline, yytext());
          }
        case 338: break;
        case 177: 
          { return new Symbol(sym.TWELVE, yychar, yyline, yytext());
          }
        case 339: break;
        case 30: 
          { return new Symbol(sym.HER, yychar, yyline, yytext());
          }
        case 340: break;
        case 201: 
          { return new Symbol(sym.CLUMSY, yychar, yyline, yytext());
          }
        case 341: break;
        case 261: 
          { return new Symbol(sym.DISHONEST, yychar, yyline, yytext());
          }
        case 342: break;
        case 163: 
          { return new Symbol(sym.ORANGE, yychar, yyline, yytext());
          }
        case 343: break;
        case 155: 
          { return new Symbol(sym.comm, yychar, yyline, yytext());
          }
        case 344: break;
        case 272: 
          { return new Symbol(sym.OPTIMISTIC, yychar, yyline, yytext());
          }
        case 345: break;
        case 25: 
          { return new Symbol(sym.ONE, yychar, yyline, yytext());
          }
        case 346: break;
        case 121: 
          { return new Symbol(sym.SALAD, yychar, yyline, yytext());
          }
        case 347: break;
        case 131: 
          { return new Symbol(sym.THESE, yychar, yyline, yytext());
          }
        case 348: break;
        case 27: 
          { return new Symbol(sym.HIM, yychar, yyline, yytext());
          }
        case 349: break;
        case 22: 
          { return new Symbol(sym.YOU, yychar, yyline, yytext());
          }
        case 350: break;
        case 249: 
          { return new Symbol(sym.CAUTIOUS, yychar, yyline, yytext());
          }
        case 351: break;
        case 15: 
          { return new Symbol(sym.HE, yychar, yyline, yytext());
          }
        case 352: break;
        case 76: 
          { return new Symbol(sym.TREE, yychar, yyline, yytext());
          }
        case 353: break;
        case 273: 
          { return new Symbol(sym.UNFAITHFUL, yychar, yyline, yytext());
          }
        case 354: break;
        case 191: 
          { return new Symbol(sym.FRIEND, yychar, yyline, yytext());
          }
        case 355: break;
        case 78: 
          { return new Symbol(sym.WHAT, yychar, yyline, yytext());
          }
        case 356: break;
        case 122: 
          { return new Symbol(sym.SMART, yychar, yyline, yytext());
          }
        case 357: break;
        case 45: 
          { return new Symbol(sym.RED, yychar, yyline, yytext());
          }
        case 358: break;
        case 252: 
          { return new Symbol(sym.IMPATIENT, yychar, yyline, yytext());
          }
        case 359: break;
        case 248: 
          { return new Symbol(sym.CHARMING, yychar, yyline, yytext());
          }
        case 360: break;
        case 196: 
          { return new Symbol(sym.dospum, yychar, yyline, yytext());
          }
        case 361: break;
        case 24: 
          { return new Symbol(sym.OLD, yychar, yyline, yytext());
          }
        case 362: break;
        case 242: 
          { return new Symbol(sym.ATHLETIC, yychar, yyline, yytext());
          }
        case 363: break;
        case 74: 
          { return new Symbol(sym.THAT, yychar, yyline, yytext());
          }
        case 364: break;
        case 49: 
          { return new Symbol(sym.DOG, yychar, yyline, yytext());
          }
        case 365: break;
        case 271: 
          { return new Symbol(sym.INCREDIBLE, yychar, yyline, yytext());
          }
        case 366: break;
        case 118: 
          { return new Symbol(sym.SHINY, yychar, yyline, yytext());
          }
        case 367: break;
        case 120: 
          { return new Symbol(sym.SEVEN, yychar, yyline, yytext());
          }
        case 368: break;
        case 93: 
          { return new Symbol(sym.FAST, yychar, yyline, yytext());
          }
        case 369: break;
        case 268: 
          { return new Symbol(sym.DIFFERENT, yychar, yyline, yytext());
          }
        case 370: break;
        case 226: 
          { return new Symbol(sym.CERTAIN, yychar, yyline, yytext());
          }
        case 371: break;
        case 200: 
          { return new Symbol(sym.CARING, yychar, yyline, yytext());
          }
        case 372: break;
        case 150: 
          { return new Symbol(sym.BRAVE, yychar, yyline, yytext());
          }
        case 373: break;
        case 109: 
          { return new Symbol(sym.HORSE, yychar, yyline, yytext());
          }
        case 374: break;
        case 89: 
          { return new Symbol(sym.LOUD, yychar, yyline, yytext());
          }
        case 375: break;
        case 65: 
          { return new Symbol(sym.SOME, yychar, yyline, yytext());
          }
        case 376: break;
        case 128: 
          { return new Symbol(sym.THIRD, yychar, yyline, yytext());
          }
        case 377: break;
        case 204: 
          { return new Symbol(sym.POLITE, yychar, yyline, yytext());
          }
        case 378: break;
        case 79: 
          { return new Symbol(sym.WHEN, yychar, yyline, yytext());
          }
        case 379: break;
        case 34: 
          { return new Symbol(sym.SHE, yychar, yyline, yytext());
          }
        case 380: break;
        case 263: 
          { return new Symbol(sym.DEPENDENT, yychar, yyline, yytext());
          }
        case 381: break;
        case 96: 
          { return new Symbol(sym.BOTH, yychar, yyline, yytext());
          }
        case 382: break;
        case 199: 
          { return new Symbol(sym.BANANA, yychar, yyline, yytext());
          }
        case 383: break;
        case 277: 
          { return new Symbol(sym.INTERESTING, yychar, yyline, yytext());
          }
        case 384: break;
        case 4: 
          { return new Symbol(sym.punn, yychar, yyline, yytext());
          }
        case 385: break;
        case 47: 
          { return new Symbol(sym.FUN, yychar, yyline, yytext());
          }
        case 386: break;
        case 95: 
          { return new Symbol(sym.BOOK, yychar, yyline, yytext());
          }
        case 387: break;
        case 73: 
          { return new Symbol(sym.THEM, yychar, yyline, yytext());
          }
        case 388: break;
        case 202: 
          { return new Symbol(sym.CLEVER, yychar, yyline, yytext());
          }
        case 389: break;
        case 36: 
          { return new Symbol(sym.TEN, yychar, yyline, yytext());
          }
        case 390: break;
        case 58: 
          { return new Symbol(sym.PEN, yychar, yyline, yytext());
          }
        case 391: break;
        case 117: 
          { return new Symbol(sym.SHIRT, yychar, yyline, yytext());
          }
        case 392: break;
        case 269: 
          { return new Symbol(sym.CONFIDENT, yychar, yyline, yytext());
          }
        case 393: break;
        case 193: 
          { return new Symbol(sym.GUITAR, yychar, yyline, yytext());
          }
        case 394: break;
        case 19: 
          { return new Symbol(sym.MY, yychar, yyline, yytext());
          }
        case 395: break;
        case 221: 
          { return new Symbol(sym.FOOLISH, yychar, yyline, yytext());
          }
        case 396: break;
        case 170: 
          { return new Symbol(sym.SECOND, yychar, yyline, yytext());
          }
        case 397: break;
        case 13: 
          { return new Symbol(sym.US, yychar, yyline, yytext());
          }
        case 398: break;
        case 42: 
          { return new Symbol(sym.ALL, yychar, yyline, yytext());
          }
        case 399: break;
        case 146: 
          { return new Symbol(sym.FIFTH, yychar, yyline, yytext());
          }
        case 400: break;
        case 222: 
          { return new Symbol(sym.GIRAFFE, yychar, yyline, yytext());
          }
        case 401: break;
        case 244: 
          { return new Symbol(sym.FRIENDLY, yychar, yyline, yytext());
          }
        case 402: break;
        case 113: 
          { return new Symbol(sym.ENJOY, yychar, yyline, yytext());
          }
        case 403: break;
        case 48: 
          { return new Symbol(sym.FEW, yychar, yyline, yytext());
          }
        case 404: break;
        case 82: 
          { return new Symbol(sym.WELL, yychar, yyline, yytext());
          }
        case 405: break;
        case 172: 
          { return new Symbol(sym.STRONG, yychar, yyline, yytext());
          }
        case 406: break;
        case 68: 
          { return new Symbol(sym.SHOE, yychar, yyline, yytext());
          }
        case 407: break;
        case 254: 
          { return new Symbol(sym.ENERGETIC, yychar, yyline, yytext());
          }
        case 408: break;
        case 90: 
          { return new Symbol(sym.LAMP, yychar, yyline, yytext());
          }
        case 409: break;
        case 219: 
          { return new Symbol(sym.ANOTHER, yychar, yyline, yytext());
          }
        case 410: break;
        case 127: 
          { return new Symbol(sym.TENTH, yychar, yyline, yytext());
          }
        case 411: break;
        case 41: 
          { return new Symbol(sym.ARE, yychar, yyline, yytext());
          }
        case 412: break;
        case 164: 
          { return new Symbol(sym.HONEST, yychar, yyline, yytext());
          }
        case 413: break;
        case 54: 
          { return new Symbol(sym.COW, yychar, yyline, yytext());
          }
        case 414: break;
        case 111: 
          { return new Symbol(sym.HAPPY, yychar, yyline, yytext());
          }
        case 415: break;
        case 75: 
          { return new Symbol(sym.TALL, yychar, yyline, yytext());
          }
        case 416: break;
        case 62: 
          { return new Symbol(sym.HERO, yychar, yyline, yytext());
          }
        case 417: break;
        case 236: 
          { return new Symbol(sym.ELEPHANT, yychar, yyline, yytext());
          }
        case 418: break;
        case 137: 
          { return new Symbol(sym.WHERE, yychar, yyline, yytext());
          }
        case 419: break;
        case 88: 
          { return new Symbol(sym.LION, yychar, yyline, yytext());
          }
        case 420: break;
        case 182: 
          { return new Symbol(sym.MODEST, yychar, yyline, yytext());
          }
        case 421: break;
        case 175: 
          { return new Symbol(sym.TOMATO, yychar, yyline, yytext());
          }
        case 422: break;
        case 143: 
          { return new Symbol(sym.ROUGH, yychar, yyline, yytext());
          }
        case 423: break;
        case 116: 
          { return new Symbol(sym.SIXTH, yychar, yyline, yytext());
          }
        case 424: break;
        case 173: 
          { return new Symbol(sym.SLOWLY, yychar, yyline, yytext());
          }
        case 425: break;
        case 60: 
          { return new Symbol(sym.YOUR, yychar, yyline, yytext());
          }
        case 426: break;
        case 214: 
          { return new Symbol(sym.SEVENTH, yychar, yyline, yytext());
          }
        case 427: break;
        case 188: 
          { return new Symbol(sym.LAWYER, yychar, yyline, yytext());
          }
        case 428: break;
        case 169: 
          { return new Symbol(sym.SINGER, yychar, yyline, yytext());
          }
        case 429: break;
        case 107: 
          { return new Symbol(sym.OTHER, yychar, yyline, yytext());
          }
        case 430: break;
        case 210: 
          { return new Symbol(sym.ELEGANT, yychar, yyline, yytext());
          }
        case 431: break;
        case 77: 
          { return new Symbol(sym.WISE, yychar, yyline, yytext());
          }
        case 432: break;
        case 282: 
          { return new Symbol(sym.RESPONSIBLE, yychar, yyline, yytext());
          }
        case 433: break;
        case 162: 
          { return new Symbol(sym.QUIET, yychar, yyline, yytext());
          }
        case 434: break;
        case 123: 
          { return new Symbol(sym.SMALL, yychar, yyline, yytext());
          }
        case 435: break;
        case 260: 
          { return new Symbol(sym.FANTASTIC, yychar, yyline, yytext());
          }
        case 436: break;
        case 227: 
          { return new Symbol(sym.puncom, yychar, yyline, yytext());
          }
        case 437: break;
        case 223: 
          { return new Symbol(sym.GOODBYE, yychar, yyline, yytext());
          }
        case 438: break;
        case 35: 
          { return new Symbol(sym.SAD, yychar, yyline, yytext());
          }
        case 439: break;
        case 61: 
          { return new Symbol(sym.UGLY, yychar, yyline, yytext());
          }
        case 440: break;
        case 208: 
          { return new Symbol(sym.HUNDRED, yychar, yyline, yytext());
          }
        case 441: break;
        case 7: 
          { return new Symbol(sym.abrpar, yychar, yyline, yytext());
          }
        case 442: break;
        case 37: 
          { return new Symbol(sym.THE, yychar, yyline, yytext());
          }
        case 443: break;
        case 274: 
          { return new Symbol(sym.TELEVISION, yychar, yyline, yytext());
          }
        case 444: break;
        case 46: 
          { return new Symbol(sym.RIVER, yychar, yyline, yytext());
          }
        case 445: break;
        case 23: 
          { return new Symbol(sym.OUR, yychar, yyline, yytext());
          }
        case 446: break;
        case 194: 
          { return new Symbol(sym.GENTLE, yychar, yyline, yytext());
          }
        case 447: break;
        case 180: 
          { return new Symbol(sym.ARTIST, yychar, yyline, yytext());
          }
        case 448: break;
        case 255: 
          { return new Symbol(sym.EXCELLENT, yychar, yyline, yytext());
          }
        case 449: break;
        case 211: 
          { return new Symbol(sym.SINCERE, yychar, yyline, yytext());
          }
        case 450: break;
        case 135: 
          { return new Symbol(sym.WITTY, yychar, yyline, yytext());
          }
        case 451: break;
        case 230: 
          { return new Symbol(sym.VARIOUS, yychar, yyline, yytext());
          }
        case 452: break;
        case 99: 
          { return new Symbol(sym.COLD, yychar, yyline, yytext());
          }
        case 453: break;
        case 2: 
          { return new Symbol(sym.I, yychar, yyline, yytext());
          }
        case 454: break;
        case 246: 
          { return new Symbol(sym.GENEROUS, yychar, yyline, yytext());
          }
        case 455: break;
        case 218: 
          { return new Symbol(sym.AMAZING, yychar, yyline, yytext());
          }
        case 456: break;
        case 126: 
          { return new Symbol(sym.TIGER, yychar, yyline, yytext());
          }
        case 457: break;
        case 195: 
          { return new Symbol(sym.GARDEN, yychar, yyline, yytext());
          }
        case 458: break;
        case 6: 
          { return new Symbol(sym.cerrin, yychar, yyline, yytext());
          }
        case 459: break;
        case 270: 
          { return new Symbol(sym.CAREFULLY, yychar, yyline, yytext());
          }
        case 460: break;
        case 153: 
          { return new Symbol(sym.CLOCK, yychar, yyline, yytext());
          }
        case 461: break;
        case 241: 
          { return new Symbol(sym.AIRPLANE, yychar, yyline, yytext());
          }
        case 462: break;
        case 12: 
          { return new Symbol(sym.IT, yychar, yyline, yytext());
          }
        case 463: break;
        case 69: 
          { return new Symbol(sym.SAME, yychar, yyline, yytext());
          }
        case 464: break;
        case 11: 
          { return new Symbol(sym.IS, yychar, yyline, yytext());
          }
        case 465: break;
        case 237: 
          { return new Symbol(sym.ELEVENTH, yychar, yyline, yytext());
          }
        case 466: break;
        case 253: 
          { return new Symbol(sym.HUNDREDTH, yychar, yyline, yytext());
          }
        case 467: break;
        case 176: 
          { return new Symbol(sym.THEIRS, yychar, yyline, yytext());
          }
        case 468: break;
        case 32: 
          { return new Symbol(sym.SIX, yychar, yyline, yytext());
          }
        case 469: break;
        case 8: 
          { return new Symbol(sym.cerrpar, yychar, yyline, yytext());
          }
        case 470: break;
        case 57: 
          { return new Symbol(sym.KEY, yychar, yyline, yytext());
          }
        case 471: break;
        case 81: 
          { return new Symbol(sym.WEAK, yychar, yyline, yytext());
          }
        case 472: break;
        case 243: 
          { return new Symbol(sym.ARROGANT, yychar, yyline, yytext());
          }
        case 473: break;
        case 39: 
          { return new Symbol(sym.WHY, yychar, yyline, yytext());
          }
        case 474: break;
        case 232: 
          { return new Symbol(sym.QUICKLY, yychar, yyline, yytext());
          }
        case 475: break;
        case 140: 
          { return new Symbol(sym.ACTOR, yychar, yyline, yytext());
          }
        case 476: break;
        case 133: 
          { return new Symbol(sym.TABLE, yychar, yyline, yytext());
          }
        case 477: break;
        case 33: 
          { return new Symbol(sym.SUN, yychar, yyline, yytext());
          }
        case 478: break;
        case 203: 
          { return new Symbol(sym.POTATO, yychar, yyline, yytext());
          }
        case 479: break;
        case 129: 
          { return new Symbol(sym.THOSE, yychar, yyline, yytext());
          }
        case 480: break;
        case 152: 
          { return new Symbol(sym.CHAIR, yychar, yyline, yytext());
          }
        case 481: break;
        case 105: 
          { return new Symbol(sym.NAME, yychar, yyline, yytext());
          }
        case 482: break;
        case 29: 
          { return new Symbol(sym.HOW, yychar, yyline, yytext());
          }
        case 483: break;
        case 247: 
          { return new Symbol(sym.COWARDLY, yychar, yyline, yytext());
          }
        case 484: break;
        case 229: 
          { return new Symbol(sym.PATIENT, yychar, yyline, yytext());
          }
        case 485: break;
        case 160: 
          { return new Symbol(sym.NURSE, yychar, yyline, yytext());
          }
        case 486: break;
        case 278: 
          { return new Symbol(sym.INTELLIGENT, yychar, yyline, yytext());
          }
        case 487: break;
        case 59: 
          { return new Symbol(sym.FISH, yychar, yyline, yytext());
          }
        case 488: break;
        case 267: 
          { return new Symbol(sym.BRILLIANT, yychar, yyline, yytext());
          }
        case 489: break;
        case 238: 
          { return new Symbol(sym.ENGINEER, yychar, yyline, yytext());
          }
        case 490: break;
        case 186: 
          { return new Symbol(sym.LOUDLY, yychar, yyline, yytext());
          }
        case 491: break;
        case 101: 
          { return new Symbol(sym.CALM, yychar, yyline, yytext());
          }
        case 492: break;
        case 147: 
          { return new Symbol(sym.FUNNY, yychar, yyline, yytext());
          }
        case 493: break;
        case 205: 
          { return new Symbol(sym.PENCIL , yychar, yyline, yytext());
          }
        case 494: break;
        case 159: 
          { return new Symbol(sym.NINTH, yychar, yyline, yytext());
          }
        case 495: break;
        case 63: 
          { return new Symbol(sym.HERE, yychar, yyline, yytext());
          }
        case 496: break;
        case 64: 
          { return new Symbol(sym.HARD, yychar, yyline, yytext());
          }
        case 497: break;
        case 124: 
          { return new Symbol(sym.SNAKE, yychar, yyline, yytext());
          }
        case 498: break;
        case 166: 
          { return new Symbol(sym.EIGHTH, yychar, yyline, yytext());
          }
        case 499: break;
        case 97: 
          { return new Symbol(sym.BALL, yychar, yyline, yytext());
          }
        case 500: break;
        case 283: 
          { return new Symbol(sym.PESSIMISTIC, yychar, yyline, yytext());
          }
        case 501: break;
        case 104: 
          { return new Symbol(sym.NINE, yychar, yyline, yytext());
          }
        case 502: break;
        case 1: 
          { /*Ignore*/
          }
        case 503: break;
        case 91: 
          { return new Symbol(sym.FIVE, yychar, yyline, yytext());
          }
        case 504: break;
        case 190: 
          { return new Symbol(sym.FOURTH, yychar, yyline, yytext());
          }
        case 505: break;
        case 171: 
          { return new Symbol(sym.STUPID, yychar, yyline, yytext());
          }
        case 506: break;
        case 181: 
          { return new Symbol(sym.ALWAYS, yychar, yyline, yytext());
          }
        case 507: break;
        case 83: 
          { return new Symbol(sym.MINE, yychar, yyline, yytext());
          }
        case 508: break;
        case 136: 
          { return new Symbol(sym.WHICH, yychar, yyline, yytext());
          }
        case 509: break;
        case 110: 
          { return new Symbol(sym.HELLO, yychar, yyline, yytext());
          }
        case 510: break;
        case 220: 
          { return new Symbol(sym.ANXIOUS, yychar, yyline, yytext());
          }
        case 511: break;
        case 28: 
          { return new Symbol(sym.HOT, yychar, yyline, yytext());
          }
        case 512: break;
        case 3: 
          { return new Symbol(sym.A, yychar, yyline, yytext());
          }
        case 513: break;
        case 217: 
          { return new Symbol(sym.TWELFTH, yychar, yyline, yytext());
          }
        case 514: break;
        case 185: 
          { return new Symbol(sym.RABBIT, yychar, yyline, yytext());
          }
        case 515: break;
        case 142: 
          { return new Symbol(sym.MUSIC, yychar, yyline, yytext());
          }
        case 516: break;
        case 16: 
          { return new Symbol(sym.WE, yychar, yyline, yytext());
          }
        case 517: break;
        case 50: 
          { return new Symbol(sym.BIG, yychar, yyline, yytext());
          }
        case 518: break;
        case 206: 
          { return new Symbol(sym.PARENT, yychar, yyline, yytext());
          }
        case 519: break;
        case 251: 
          { return new Symbol(sym.NEIGHBOR, yychar, yyline, yytext());
          }
        case 520: break;
        case 279: 
          { return new Symbol(sym.INDIFFERENT, yychar, yyline, yytext());
          }
        case 521: break;
        case 209: 
          { return new Symbol(sym.HAPPILY, yychar, yyline, yytext());
          }
        case 522: break;
        case 174: 
          { return new Symbol(sym.SPIDER, yychar, yyline, yytext());
          }
        case 523: break;
        case 168: 
          { return new Symbol(sym.ELEVEN, yychar, yyline, yytext());
          }
        case 524: break;
        case 125: 
          { return new Symbol(sym.TIRED, yychar, yyline, yytext());
          }
        case 525: break;
        case 157: 
          { return new Symbol(sym.PIZZA, yychar, yyline, yytext());
          }
        case 526: break;
        case 92: 
          { return new Symbol(sym.FOUR, yychar, yyline, yytext());
          }
        case 527: break;
        case 132: 
          { return new Symbol(sym.THREE, yychar, yyline, yytext());
          }
        case 528: break;
        case 156: 
          { return new Symbol(sym.PILOT, yychar, yyline, yytext());
          }
        case 529: break;
        case 149: 
          { return new Symbol(sym.BEACH, yychar, yyline, yytext());
          }
        case 530: break;
        case 235: 
          { return new Symbol(sym.YOURSELF, yychar, yyline, yytext());
          }
        case 531: break;
        case 114: 
          { return new Symbol(sym.EVERY, yychar, yyline, yytext());
          }
        case 532: break;
        case 55: 
          { return new Symbol(sym.CAT, yychar, yyline, yytext());
          }
        case 533: break;
        case 215: 
          { return new Symbol(sym.STUDENT, yychar, yyline, yytext());
          }
        case 534: break;
        case 213: 
          { return new Symbol(sym.SEVERAL, yychar, yyline, yytext());
          }
        case 535: break;
        case 264: 
          { return new Symbol(sym.BOOKSHELF, yychar, yyline, yytext());
          }
        case 536: break;
        case 134: 
          { return new Symbol(sym.TRAIN, yychar, yyline, yytext());
          }
        case 537: break;
        case 106: 
          { return new Symbol(sym.YOURS, yychar, yyline, yytext());
          }
        case 538: break;
        case 119: 
          { return new Symbol(sym.SHORT, yychar, yyline, yytext());
          }
        case 539: break;
        case 280: 
          { return new Symbol(sym.INDEPENDENT, yychar, yyline, yytext());
          }
        case 540: break;
        case 70: 
          { return new Symbol(sym.SLOW, yychar, yyline, yytext());
          }
        case 541: break;
        case 259: 
          { return new Symbol(sym.REPULSIVE, yychar, yyline, yytext());
          }
        case 542: break;
        case 10: 
          { return new Symbol(sym.cerrllac, yychar, yyline, yytext());
          }
        case 543: break;
        case 225: 
          { return new Symbol(sym.CHICKEN, yychar, yyline, yytext());
          }
        case 544: break;
        case 192: 
          { return new Symbol(sym.FLOWER, yychar, yyline, yytext());
          }
        case 545: break;
        case 102: 
          { return new Symbol(sym.KIND, yychar, yyline, yytext());
          }
        case 546: break;
        case 38: 
          { return new Symbol(sym.TWO, yychar, yyline, yytext());
          }
        case 547: break;
        case 43: 
          { return new Symbol(sym.ANY, yychar, yyline, yytext());
          }
        case 548: break;
        case 94: 
          { return new Symbol(sym.DULL, yychar, yyline, yytext());
          }
        case 549: break;
        case 141: 
          { return new Symbol(sym.APPLE, yychar, yyline, yytext());
          }
        case 550: break;
        case 239: 
          { return new Symbol(sym.EXCITING, yychar, yyline, yytext());
          }
        case 551: break;
        case 187: 
          { return new Symbol(sym.LOVELY, yychar, yyline, yytext());
          }
        case 552: break;
        case 231: 
          { return new Symbol(sym.QUIETLY, yychar, yyline, yytext());
          }
        case 553: break;
        case 66: 
          { return new Symbol(sym.SOFT, yychar, yyline, yytext());
          }
        case 554: break;
        case 207: 
          { return new Symbol(sym.HOSTILE, yychar, yyline, yytext());
          }
        case 555: break;
        case 183: 
          { return new Symbol(sym.MONKEY, yychar, yyline, yytext());
          }
        case 556: break;
        case 179: 
          { return new Symbol(sym.COMPUTER, yychar, yyline, yytext());
          }
        case 557: break;
        case 165: 
          { return new Symbol(sym.HUMBLE, yychar, yyline, yytext());
          }
        case 558: break;
        case 161: 
          { return new Symbol(sym.NEVER, yychar, yyline, yytext());
          }
        case 559: break;
        case 266: 
          { return new Symbol(sym.BEAUTIFUL, yychar, yyline, yytext());
          }
        case 560: break;
        case 100: 
          { return new Symbol(sym.CUTE, yychar, yyline, yytext());
          }
        case 561: break;
        case 67: 
          { return new Symbol(sym.SUCH, yychar, yyline, yytext());
          }
        case 562: break;
        case 212: 
          { return new Symbol(sym.SELFISH, yychar, yyline, yytext());
          }
        case 563: break;
        case 258: 
          { return new Symbol(sym.WONDERFUL, yychar, yyline, yytext());
          }
        case 564: break;
        case 26: 
          { return new Symbol(sym.HIS, yychar, yyline, yytext());
          }
        case 565: break;
        case 56: 
          { return new Symbol(sym.CAR, yychar, yyline, yytext());
          }
        case 566: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
