
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue May 23 15:42:42 CST 2023
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue May 23 15:42:42 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\022\003\000\002\022" +
    "\004\000\002\002\003\000\002\002\003\000\002\003\003" +
    "\000\002\003\004\000\002\004\005\000\002\005\003\000" +
    "\002\005\003\000\002\014\003\000\002\014\003\000\002" +
    "\006\003\000\002\011\005\000\002\011\004\000\002\012" +
    "\004\000\002\012\005\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\007\003\000\002\007\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\042\004\021\005\017\006\004\007\033\010" +
    "\006\011\012\012\032\016\013\017\014\020\005\021\007" +
    "\022\011\023\030\230\024\231\027\232\023\001\002\000" +
    "\044\002\uffdb\013\uffdb\014\uffdb\015\uffdb\176\uffdb\177\uffdb" +
    "\200\uffdb\201\uffdb\202\uffdb\203\uffdb\204\uffdb\205\uffdb\206" +
    "\uffdb\207\uffdb\210\uffdb\226\uffdb\227\uffdb\001\002\000\044" +
    "\002\uffd4\013\uffd4\014\uffd4\015\uffd4\176\uffd4\177\uffd4\200" +
    "\uffd4\201\uffd4\202\uffd4\203\uffd4\204\uffd4\205\uffd4\206\uffd4" +
    "\207\uffd4\210\uffd4\226\uffd4\227\uffd4\001\002\000\044\002" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\176\uffd9\177\uffd9\200\uffd9" +
    "\201\uffd9\202\uffd9\203\uffd9\204\uffd9\205\uffd9\206\uffd9\207" +
    "\uffd9\210\uffd9\226\uffd9\227\uffd9\001\002\000\044\002\uffd3" +
    "\013\uffd3\014\uffd3\015\uffd3\176\uffd3\177\uffd3\200\uffd3\201" +
    "\uffd3\202\uffd3\203\uffd3\204\uffd3\205\uffd3\206\uffd3\207\uffd3" +
    "\210\uffd3\226\uffd3\227\uffd3\001\002\000\126\024\137\025" +
    "\126\026\132\027\123\030\125\031\122\032\142\033\130" +
    "\034\136\035\133\036\124\037\131\040\143\041\135\042" +
    "\127\043\141\044\077\045\047\046\067\047\102\050\101" +
    "\051\054\052\066\053\073\054\070\055\060\056\052\057" +
    "\074\060\063\061\057\105\071\106\050\107\046\110\065" +
    "\111\056\112\055\113\100\114\061\115\072\116\075\117" +
    "\053\120\064\001\002\000\044\002\uffd2\013\uffd2\014\uffd2" +
    "\015\uffd2\176\uffd2\177\uffd2\200\uffd2\201\uffd2\202\uffd2\203" +
    "\uffd2\204\uffd2\205\uffd2\206\uffd2\207\uffd2\210\uffd2\226\uffd2" +
    "\227\uffd2\001\002\000\044\002\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\176\uffd8\177\uffd8\200\uffd8\201\uffd8\202\uffd8\203\uffd8" +
    "\204\uffd8\205\uffd8\206\uffd8\207\uffd8\210\uffd8\226\uffd8\227" +
    "\uffd8\001\002\000\044\002\uffd6\013\uffd6\014\uffd6\015\uffd6" +
    "\176\uffd6\177\uffd6\200\uffd6\201\uffd6\202\uffd6\203\uffd6\204" +
    "\uffd6\205\uffd6\206\uffd6\207\uffd6\210\uffd6\226\uffd6\227\uffd6" +
    "\001\002\000\044\002\uffd5\013\uffd5\014\uffd5\015\uffd5\176" +
    "\uffd5\177\uffd5\200\uffd5\201\uffd5\202\uffd5\203\uffd5\204\uffd5" +
    "\205\uffd5\206\uffd5\207\uffd5\210\uffd5\226\uffd5\227\uffd5\001" +
    "\002\000\044\002\ufff8\013\ufff8\014\ufff8\015\ufff8\176\ufff8" +
    "\177\ufff8\200\ufff8\201\ufff8\202\ufff8\203\ufff8\204\ufff8\205" +
    "\ufff8\206\ufff8\207\ufff8\210\ufff8\226\ufff8\227\ufff8\001\002" +
    "\000\032\002\000\176\120\177\107\200\115\201\116\202" +
    "\121\203\114\204\113\205\110\206\117\207\106\210\112" +
    "\001\002\000\044\002\uffdc\013\uffdc\014\uffdc\015\uffdc\176" +
    "\uffdc\177\uffdc\200\uffdc\201\uffdc\202\uffdc\203\uffdc\204\uffdc" +
    "\205\uffdc\206\uffdc\207\uffdc\210\uffdc\226\uffdc\227\uffdc\001" +
    "\002\000\032\002\ufffd\176\ufffd\177\ufffd\200\ufffd\201\ufffd" +
    "\202\ufffd\203\ufffd\204\ufffd\205\ufffd\206\ufffd\207\ufffd\210" +
    "\ufffd\001\002\000\044\002\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\176\uffdd\177\uffdd\200\uffdd\201\uffdd\202\uffdd\203\uffdd\204" +
    "\uffdd\205\uffdd\206\uffdd\207\uffdd\210\uffdd\226\uffdd\227\uffdd" +
    "\001\002\000\044\002\ufff9\013\ufff9\014\ufff9\015\ufff9\176" +
    "\ufff9\177\ufff9\200\ufff9\201\ufff9\202\ufff9\203\ufff9\204\ufff9" +
    "\205\ufff9\206\ufff9\207\ufff9\210\ufff9\226\ufff9\227\ufff9\001" +
    "\002\000\126\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037" +
    "\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1" +
    "\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054" +
    "\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\105\uffc1" +
    "\106\uffc1\107\uffc1\110\uffc1\111\uffc1\112\uffc1\113\uffc1\114" +
    "\uffc1\115\uffc1\116\uffc1\117\uffc1\120\uffc1\001\002\000\126" +
    "\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3" +
    "\056\uffc3\057\uffc3\060\uffc3\061\uffc3\105\uffc3\106\uffc3\107" +
    "\uffc3\110\uffc3\111\uffc3\112\uffc3\113\uffc3\114\uffc3\115\uffc3" +
    "\116\uffc3\117\uffc3\120\uffc3\001\002\000\004\002\105\001" +
    "\002\000\044\002\ufffc\013\043\014\045\015\042\176\ufffc" +
    "\177\ufffc\200\ufffc\201\ufffc\202\ufffc\203\ufffc\204\ufffc\205" +
    "\ufffc\206\ufffc\207\ufffc\210\ufffc\226\ufffc\227\ufffc\001\002" +
    "\000\126\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031" +
    "\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046" +
    "\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2" +
    "\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\105\uffc2\106" +
    "\uffc2\107\uffc2\110\uffc2\111\uffc2\112\uffc2\113\uffc2\114\uffc2" +
    "\115\uffc2\116\uffc2\117\uffc2\120\uffc2\001\002\000\044\002" +
    "\uffd1\013\uffd1\014\uffd1\015\uffd1\176\uffd1\177\uffd1\200\uffd1" +
    "\201\uffd1\202\uffd1\203\uffd1\204\uffd1\205\uffd1\206\uffd1\207" +
    "\uffd1\210\uffd1\226\uffd1\227\uffd1\001\002\000\036\002\ufffe" +
    "\176\ufffe\177\ufffe\200\ufffe\201\ufffe\202\ufffe\203\ufffe\204" +
    "\ufffe\205\ufffe\206\ufffe\207\ufffe\210\ufffe\226\034\227\036" +
    "\001\002\000\044\002\uffd7\013\uffd7\014\uffd7\015\uffd7\176" +
    "\uffd7\177\uffd7\200\uffd7\201\uffd7\202\uffd7\203\uffd7\204\uffd7" +
    "\205\uffd7\206\uffd7\207\uffd7\210\uffd7\226\uffd7\227\uffd7\001" +
    "\002\000\044\002\uffda\013\uffda\014\uffda\015\uffda\176\uffda" +
    "\177\uffda\200\uffda\201\uffda\202\uffda\203\uffda\204\uffda\205" +
    "\uffda\206\uffda\207\uffda\210\uffda\226\uffda\227\uffda\001\002" +
    "\000\042\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011" +
    "\uffd0\012\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0" +
    "\023\uffd0\230\uffd0\231\uffd0\232\uffd0\001\002\000\042\004" +
    "\021\005\017\006\004\007\033\010\006\011\012\012\032" +
    "\016\013\017\014\020\005\021\007\022\011\023\030\230" +
    "\024\231\027\232\023\001\002\000\042\004\uffcf\005\uffcf" +
    "\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\016\uffcf\017" +
    "\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\230\uffcf\231\uffcf" +
    "\232\uffcf\001\002\000\032\002\ufffa\176\ufffa\177\ufffa\200" +
    "\ufffa\201\ufffa\202\ufffa\203\ufffa\204\ufffa\205\ufffa\206\ufffa" +
    "\207\ufffa\210\ufffa\001\002\000\072\044\077\045\047\046" +
    "\067\047\102\050\101\051\054\052\066\053\073\054\070" +
    "\055\060\056\052\057\074\060\063\061\057\105\071\106" +
    "\050\107\046\110\065\111\056\112\055\113\100\114\061" +
    "\115\072\116\075\117\053\120\064\211\051\214\076\001" +
    "\002\000\036\002\ufff5\176\ufff5\177\ufff5\200\ufff5\201\ufff5" +
    "\202\ufff5\203\ufff5\204\ufff5\205\ufff5\206\ufff5\207\ufff5\210" +
    "\ufff5\226\ufff5\227\ufff5\001\002\000\072\044\uffde\045\uffde" +
    "\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054" +
    "\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde\105\uffde" +
    "\106\uffde\107\uffde\110\uffde\111\uffde\112\uffde\113\uffde\114" +
    "\uffde\115\uffde\116\uffde\117\uffde\120\uffde\211\uffde\214\uffde" +
    "\001\002\000\072\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050" +
    "\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0" +
    "\057\uffe0\060\uffe0\061\uffe0\105\uffe0\106\uffe0\107\uffe0\110" +
    "\uffe0\111\uffe0\112\uffe0\113\uffe0\114\uffe0\115\uffe0\116\uffe0" +
    "\117\uffe0\120\uffe0\211\uffe0\214\uffe0\001\002\000\036\002" +
    "\ufffb\176\ufffb\177\ufffb\200\ufffb\201\ufffb\202\ufffb\203\ufffb" +
    "\204\ufffb\205\ufffb\206\ufffb\207\ufffb\210\ufffb\226\ufffb\227" +
    "\ufffb\001\002\000\072\044\uffdf\045\uffdf\046\uffdf\047\uffdf" +
    "\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056" +
    "\uffdf\057\uffdf\060\uffdf\061\uffdf\105\uffdf\106\uffdf\107\uffdf" +
    "\110\uffdf\111\uffdf\112\uffdf\113\uffdf\114\uffdf\115\uffdf\116" +
    "\uffdf\117\uffdf\120\uffdf\211\uffdf\214\uffdf\001\002\000\046" +
    "\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\211\uffb0\214\uffb0\001\002\000" +
    "\046\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf" +
    "\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040" +
    "\uffbf\041\uffbf\042\uffbf\043\uffbf\211\uffbf\214\uffbf\001\002" +
    "\000\046\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031" +
    "\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1" +
    "\040\uffb1\041\uffb1\042\uffb1\043\uffb1\211\uffb1\214\uffb1\001" +
    "\002\000\036\002\ufff7\176\ufff7\177\ufff7\200\ufff7\201\ufff7" +
    "\202\ufff7\203\ufff7\204\ufff7\205\ufff7\206\ufff7\207\ufff7\210" +
    "\ufff7\226\ufff7\227\ufff7\001\002\000\046\024\uffb6\025\uffb6" +
    "\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6" +
    "\043\uffb6\211\uffb6\214\uffb6\001\002\000\046\024\uffa8\025" +
    "\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8" +
    "\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042" +
    "\uffa8\043\uffa8\211\uffa8\214\uffa8\001\002\000\046\024\uffbb" +
    "\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033" +
    "\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb" +
    "\042\uffbb\043\uffbb\211\uffbb\214\uffbb\001\002\000\046\024" +
    "\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad" +
    "\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041" +
    "\uffad\042\uffad\043\uffad\211\uffad\214\uffad\001\002\000\046" +
    "\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032" +
    "\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae" +
    "\041\uffae\042\uffae\043\uffae\211\uffae\214\uffae\001\002\000" +
    "\046\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3" +
    "\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\042\uffb3\043\uffb3\211\uffb3\214\uffb3\001\002" +
    "\000\046\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031" +
    "\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7" +
    "\040\uffb7\041\uffb7\042\uffb7\043\uffb7\211\uffb7\214\uffb7\001" +
    "\002\000\046\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab" +
    "\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037" +
    "\uffab\040\uffab\041\uffab\042\uffab\043\uffab\211\uffab\214\uffab" +
    "\001\002\000\006\211\051\214\076\001\002\000\046\024" +
    "\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041" +
    "\uffb4\042\uffb4\043\uffb4\211\uffb4\214\uffb4\001\002\000\046" +
    "\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032" +
    "\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7" +
    "\041\uffa7\042\uffa7\043\uffa7\211\uffa7\214\uffa7\001\002\000" +
    "\046\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf" +
    "\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040" +
    "\uffaf\041\uffaf\042\uffaf\043\uffaf\211\uffaf\214\uffaf\001\002" +
    "\000\046\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031" +
    "\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba" +
    "\040\uffba\041\uffba\042\uffba\043\uffba\211\uffba\214\uffba\001" +
    "\002\000\046\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037" +
    "\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\211\uffbe\214\uffbe" +
    "\001\002\000\046\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\211\uffb8\214" +
    "\uffb8\001\002\000\046\024\uffb2\025\uffb2\026\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036" +
    "\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\211\uffb2" +
    "\214\uffb2\001\002\000\046\024\uffaa\025\uffaa\026\uffaa\027" +
    "\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa" +
    "\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\211" +
    "\uffaa\214\uffaa\001\002\000\046\024\uffb9\025\uffb9\026\uffb9" +
    "\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9" +
    "\211\uffb9\214\uffb9\001\002\000\046\024\uffb5\025\uffb5\026" +
    "\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\211\uffb5\214\uffb5\001\002\000\046\024\uffa9\025\uffa9" +
    "\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034" +
    "\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9" +
    "\043\uffa9\211\uffa9\214\uffa9\001\002\000\036\002\ufff6\176" +
    "\ufff6\177\ufff6\200\ufff6\201\ufff6\202\ufff6\203\ufff6\204\ufff6" +
    "\205\ufff6\206\ufff6\207\ufff6\210\ufff6\226\ufff6\227\ufff6\001" +
    "\002\000\046\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0" +
    "\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037" +
    "\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\211\uffc0\214\uffc0" +
    "\001\002\000\046\024\uffac\025\uffac\026\uffac\027\uffac\030" +
    "\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac" +
    "\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\211\uffac\214" +
    "\uffac\001\002\000\046\024\uffbc\025\uffbc\026\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\211\uffbc" +
    "\214\uffbc\001\002\000\046\024\uffbd\025\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\211" +
    "\uffbd\214\uffbd\001\002\000\036\002\ufff2\176\ufff2\177\ufff2" +
    "\200\ufff2\201\ufff2\202\ufff2\203\ufff2\204\ufff2\205\ufff2\206" +
    "\ufff2\207\ufff2\210\ufff2\226\ufff2\227\ufff2\001\002\000\036" +
    "\002\ufff1\176\ufff1\177\ufff1\200\ufff1\201\ufff1\202\ufff1\203" +
    "\ufff1\204\ufff1\205\ufff1\206\ufff1\207\ufff1\210\ufff1\226\ufff1" +
    "\227\ufff1\001\002\000\004\002\001\001\002\000\004\002" +
    "\uffc5\001\002\000\004\002\uffcd\001\002\000\004\002\uffc7" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\uffc4\001" +
    "\002\000\004\002\uffc8\001\002\000\004\002\uffc9\001\002" +
    "\000\004\002\uffcc\001\002\000\004\002\uffcb\001\002\000" +
    "\004\002\uffc6\001\002\000\004\002\uffce\001\002\000\004" +
    "\002\uffca\001\002\000\044\002\uffeb\013\uffeb\014\uffeb\015" +
    "\uffeb\176\uffeb\177\uffeb\200\uffeb\201\uffeb\202\uffeb\203\uffeb" +
    "\204\uffeb\205\uffeb\206\uffeb\207\uffeb\210\uffeb\226\uffeb\227" +
    "\uffeb\001\002\000\044\002\uffed\013\uffed\014\uffed\015\uffed" +
    "\176\uffed\177\uffed\200\uffed\201\uffed\202\uffed\203\uffed\204" +
    "\uffed\205\uffed\206\uffed\207\uffed\210\uffed\226\uffed\227\uffed" +
    "\001\002\000\044\002\uffe6\013\uffe6\014\uffe6\015\uffe6\176" +
    "\uffe6\177\uffe6\200\uffe6\201\uffe6\202\uffe6\203\uffe6\204\uffe6" +
    "\205\uffe6\206\uffe6\207\uffe6\210\uffe6\226\uffe6\227\uffe6\001" +
    "\002\000\044\002\uffec\013\uffec\014\uffec\015\uffec\176\uffec" +
    "\177\uffec\200\uffec\201\uffec\202\uffec\203\uffec\204\uffec\205" +
    "\uffec\206\uffec\207\uffec\210\uffec\226\uffec\227\uffec\001\002" +
    "\000\044\002\uffef\013\uffef\014\uffef\015\uffef\176\uffef\177" +
    "\uffef\200\uffef\201\uffef\202\uffef\203\uffef\204\uffef\205\uffef" +
    "\206\uffef\207\uffef\210\uffef\226\uffef\227\uffef\001\002\000" +
    "\044\002\uffe2\013\uffe2\014\uffe2\015\uffe2\176\uffe2\177\uffe2" +
    "\200\uffe2\201\uffe2\202\uffe2\203\uffe2\204\uffe2\205\uffe2\206" +
    "\uffe2\207\uffe2\210\uffe2\226\uffe2\227\uffe2\001\002\000\044" +
    "\002\uffe9\013\uffe9\014\uffe9\015\uffe9\176\uffe9\177\uffe9\200" +
    "\uffe9\201\uffe9\202\uffe9\203\uffe9\204\uffe9\205\uffe9\206\uffe9" +
    "\207\uffe9\210\uffe9\226\uffe9\227\uffe9\001\002\000\044\002" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\176\uffe5\177\uffe5\200\uffe5" +
    "\201\uffe5\202\uffe5\203\uffe5\204\uffe5\205\uffe5\206\uffe5\207" +
    "\uffe5\210\uffe5\226\uffe5\227\uffe5\001\002\000\044\002\uffee" +
    "\013\uffee\014\uffee\015\uffee\176\uffee\177\uffee\200\uffee\201" +
    "\uffee\202\uffee\203\uffee\204\uffee\205\uffee\206\uffee\207\uffee" +
    "\210\uffee\226\uffee\227\uffee\001\002\000\044\002\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\176\uffe7\177\uffe7\200\uffe7\201\uffe7" +
    "\202\uffe7\203\uffe7\204\uffe7\205\uffe7\206\uffe7\207\uffe7\210" +
    "\uffe7\226\uffe7\227\uffe7\001\002\000\044\002\ufff3\013\ufff3" +
    "\014\ufff3\015\ufff3\176\ufff3\177\ufff3\200\ufff3\201\ufff3\202" +
    "\ufff3\203\ufff3\204\ufff3\205\ufff3\206\ufff3\207\ufff3\210\ufff3" +
    "\226\ufff3\227\ufff3\001\002\000\044\002\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\176\uffe3\177\uffe3\200\uffe3\201\uffe3\202\uffe3" +
    "\203\uffe3\204\uffe3\205\uffe3\206\uffe3\207\uffe3\210\uffe3\226" +
    "\uffe3\227\uffe3\001\002\000\044\002\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\176\uffe8\177\uffe8\200\uffe8\201\uffe8\202\uffe8\203" +
    "\uffe8\204\uffe8\205\uffe8\206\uffe8\207\uffe8\210\uffe8\226\uffe8" +
    "\227\uffe8\001\002\000\044\002\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\176\ufff0\177\ufff0\200\ufff0\201\ufff0\202\ufff0\203\ufff0" +
    "\204\ufff0\205\ufff0\206\ufff0\207\ufff0\210\ufff0\226\ufff0\227" +
    "\ufff0\001\002\000\042\024\137\025\126\026\132\027\123" +
    "\030\125\031\122\032\142\033\130\034\136\035\133\036" +
    "\124\037\131\040\143\041\135\042\127\043\141\001\002" +
    "\000\044\002\uffe1\013\uffe1\014\uffe1\015\uffe1\176\uffe1\177" +
    "\uffe1\200\uffe1\201\uffe1\202\uffe1\203\uffe1\204\uffe1\205\uffe1" +
    "\206\uffe1\207\uffe1\210\uffe1\226\uffe1\227\uffe1\001\002\000" +
    "\044\002\uffea\013\uffea\014\uffea\015\uffea\176\uffea\177\uffea" +
    "\200\uffea\201\uffea\202\uffea\203\uffea\204\uffea\205\uffea\206" +
    "\uffea\207\uffea\210\uffea\226\uffea\227\uffea\001\002\000\044" +
    "\002\uffe4\013\uffe4\014\uffe4\015\uffe4\176\uffe4\177\uffe4\200" +
    "\uffe4\201\uffe4\202\uffe4\203\uffe4\204\uffe4\205\uffe4\206\uffe4" +
    "\207\uffe4\210\uffe4\226\uffe4\227\uffe4\001\002\000\044\002" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\176\ufff4\177\ufff4\200\ufff4" +
    "\201\ufff4\202\ufff4\203\ufff4\204\ufff4\205\ufff4\206\ufff4\207" +
    "\ufff4\210\ufff4\226\ufff4\227\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\022\002\015\003\030\004\017\005\025\010" +
    "\021\011\014\013\007\022\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\137\016\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\043" +
    "\012\040\017\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\036\005\025\010" +
    "\021\011\014\013\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\102\015\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }
    
    public Symbol getS(){
        return this.s;
}  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ADJETIVO ::= INCREDIBLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ADJETIVO ::= FANTASTIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ADJETIVO ::= EXCELLENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ADJETIVO ::= WONDERFUL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ADJETIVO ::= CHARMING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ADJETIVO ::= LOVELY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ADJETIVO ::= INTERESTING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ADJETIVO ::= EXCITING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ADJETIVO ::= DELICIOUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ADJETIVO ::= AMAZING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ADJETIVO ::= VARIOUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ADJETIVO ::= CERTAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ADJETIVO ::= NAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ADJETIVO ::= ELEGANT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ADJETIVO ::= SMART 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ADJETIVO ::= COLD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ADJETIVO ::= RED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ADJETIVO ::= BRAVE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ADJETIVO ::= TALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ADJETIVO ::= FUNNY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ADJETIVO ::= OLD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ADJETIVO ::= SMALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ADJETIVO ::= INTELLIGENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ADJETIVO ::= HAPPY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ADJETIVO ::= BEAUTIFUL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ADJETIVO ::= BIG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ARTICULO ::= AN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARTICULO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ARTICULO ::= A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARTICULO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ARTICULO ::= THE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARTICULO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PUNTUACION ::= cerrllac 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PUNTUACION ::= abrllac 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PUNTUACION ::= cerrpar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PUNTUACION ::= abrpar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PUNTUACION ::= cerrin 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PUNTUACION ::= cerrad 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PUNTUACION ::= dospum 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PUNTUACION ::= puncom 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PUNTUACION ::= comm 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PUNTUACION ::= punn 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PUNTUACION ::= nadaa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONJUNCION ::= OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONJUNCION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONJUNCION ::= AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONJUNCION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PRONOMBRE ::= ME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PRONOMBRE ::= YOURSELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PRONOMBRE ::= MYSELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PRONOMBRE ::= HIM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PRONOMBRE ::= THEM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PRONOMBRE ::= US 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PRONOMBRE ::= THEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PRONOMBRE ::= WE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PRONOMBRE ::= IT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PRONOMBRE ::= SHE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PRONOMBRE ::= HE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PRONOMBRE ::= YOU 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PRONOMBRE ::= I 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VERBO ::= IS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VERBO ::= ARE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VERBO ::= AM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SUSTANTIVO ::= HI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SUSTANTIVO ::= HELLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SUSTANTIVO ::= BOOKSHELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SUSTANTIVO ::= SUN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SUSTANTIVO ::= PHONE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SUSTANTIVO ::= COMPUTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SUSTANTIVO ::= PEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SUSTANTIVO ::= TABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SUSTANTIVO ::= FLOWER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SUSTANTIVO ::= TREE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SUSTANTIVO ::= CHAIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SUSTANTIVO ::= CAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SUSTANTIVO ::= HOUSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SUSTANTIVO ::= BOOK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SUSTANTIVO ::= CAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SUSTANTIVO ::= DOG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FRASEVERBAL ::= VERBO ADJETIVO ADVERBIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FRASEVERBAL",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FRASEVERBAL ::= VERBO ADVERBIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FRASEVERBAL",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FRASENOMINAL ::= ARTICULO SUSTANTIVO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FRASENOMINAL",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FRASENOMINAL ::= ARTICULO ADJETIVO SUSTANTIVO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FRASENOMINAL",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PREDICADO ::= FRASEVERBAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PREDICADO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ADVERBIO ::= SLOWLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADVERBIO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ADVERBIO ::= QUICKLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADVERBIO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SUJETO ::= FRASENOMINAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUJETO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SUJETO ::= PRONOMBRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUJETO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // COMPUESTASENTENCIA ::= SIMPLESENTENCIA CONJUNCION SIMPLESENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPUESTASENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SIMPLESENTENCIA ::= SUJETO PREDICADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIMPLESENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SIMPLESENTENCIA ::= SUJETO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIMPLESENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= COMPUESTASENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SIMPLESENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PARRAFO ::= SENTENCIA PUNTUACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARRAFO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PARRAFO ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARRAFO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PARRAFO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

