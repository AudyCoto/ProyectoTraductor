
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jun 03 01:16:05 CST 2023
//----------------------------------------------------

package analizadores;

import java.util.LinkedList;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jun 03 01:16:05 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0119\000\002\002\004\000\002\022\003\000\002\022" +
    "\004\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\004\000\002\023\004\000\002" +
    "\003\003\000\002\003\004\000\002\004\005\000\002\005" +
    "\003\000\002\005\003\000\002\006\003\000\002\011\005" +
    "\000\002\011\004\000\002\012\004\000\002\012\004\000" +
    "\002\012\005\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\024\005\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\025\004\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\007\003\000\002\007" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0123\000\052\004\022\005\020\006\005\007\040\010" +
    "\006\011\012\012\035\016\014\017\015\020\004\021\007" +
    "\022\013\023\033\042\036\043\041\247\026\u0141\011\u0144" +
    "\025\u0145\032\u0146\024\001\002\000\044\002\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\u012a\uffd0\u012b\uffd0\u012c\uffd0\u012d\uffd0\u012e" +
    "\uffd0\u012f\uffd0\u0130\uffd0\u0131\uffd0\u0132\uffd0\u0133\uffd0\u0134\uffd0" +
    "\u0142\uffd0\u0143\uffd0\001\002\000\044\002\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\u012a\uffd7\u012b\uffd7\u012c\uffd7\u012d\uffd7\u012e\uffd7" +
    "\u012f\uffd7\u0130\uffd7\u0131\uffd7\u0132\uffd7\u0133\uffd7\u0134\uffd7\u0142" +
    "\uffd7\u0143\uffd7\001\002\000\044\002\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\u012a\uffd5\u012b\uffd5\u012c\uffd5\u012d\uffd5\u012e\uffd5\u012f" +
    "\uffd5\u0130\uffd5\u0131\uffd5\u0132\uffd5\u0133\uffd5\u0134\uffd5\u0142\uffd5" +
    "\u0143\uffd5\001\002\000\044\002\uffcf\013\uffcf\014\uffcf\015" +
    "\uffcf\u012a\uffcf\u012b\uffcf\u012c\uffcf\u012d\uffcf\u012e\uffcf\u012f\uffcf" +
    "\u0130\uffcf\u0131\uffcf\u0132\uffcf\u0133\uffcf\u0134\uffcf\u0142\uffcf\u0143" +
    "\uffcf\001\002\000\u012a\024\u0111\025\355\026\366\027\u0101" +
    "\030\354\031\367\032\u0108\033\u0107\034\363\035\364\036" +
    "\365\037\345\040\u0104\041\370\042\374\043\u0122\044\u010b" +
    "\045\u0114\046\u011a\047\326\050\u0117\051\330\052\u011b\053" +
    "\u0113\054\377\055\336\056\u0116\057\u010d\060\u0115\061\337" +
    "\062\u0124\063\323\064\335\065\340\066\u011d\067\u0120\070" +
    "\350\071\325\072\353\073\u0100\074\346\075\u0118\076\371" +
    "\077\u0123\100\373\101\u0103\102\u011e\103\324\104\u011c\105" +
    "\356\106\322\107\344\110\334\111\343\112\u010a\113\357" +
    "\114\u0109\115\347\116\332\117\341\120\352\121\376\122" +
    "\327\123\u0102\124\360\125\u0110\126\u011f\127\u0112\130\u010c" +
    "\131\u010f\132\362\133\u0105\134\u0121\135\u0119\136\342\137" +
    "\u010e\140\351\141\333\142\331\143\361\144\375\145\125" +
    "\146\074\147\140\150\173\151\252\152\162\153\157\154" +
    "\237\155\271\156\166\157\277\160\134\161\141\162\153" +
    "\163\122\164\201\165\260\166\214\167\172\170\204\171" +
    "\164\172\101\173\135\174\240\175\233\176\113\177\152" +
    "\200\266\201\167\202\256\203\131\204\231\205\226\206" +
    "\170\207\105\210\267\211\205\212\250\213\212\214\115" +
    "\215\221\216\234\217\261\220\174\221\276\222\274\223" +
    "\251\224\302\225\064\226\203\227\236\230\106\231\116" +
    "\232\127\233\110\234\177\235\246\236\071\237\111\240" +
    "\117\241\066\242\123\243\230\244\065\245\114\246\253" +
    "\247\133\001\002\000\004\022\321\001\002\000\044\002" +
    "\uffd4\013\uffd4\014\uffd4\015\uffd4\u012a\uffd4\u012b\uffd4\u012c\uffd4" +
    "\u012d\uffd4\u012e\uffd4\u012f\uffd4\u0130\uffd4\u0131\uffd4\u0132\uffd4\u0133" +
    "\uffd4\u0134\uffd4\u0142\uffd4\u0143\uffd4\001\002\000\044\002\uffce" +
    "\013\uffce\014\uffce\015\uffce\u012a\uffce\u012b\uffce\u012c\uffce\u012d" +
    "\uffce\u012e\uffce\u012f\uffce\u0130\uffce\u0131\uffce\u0132\uffce\u0133\uffce" +
    "\u0134\uffce\u0142\uffce\u0143\uffce\001\002\000\044\002\uffd2\013" +
    "\uffd2\014\uffd2\015\uffd2\u012a\uffd2\u012b\uffd2\u012c\uffd2\u012d\uffd2" +
    "\u012e\uffd2\u012f\uffd2\u0130\uffd2\u0131\uffd2\u0132\uffd2\u0133\uffd2\u0134" +
    "\uffd2\u0142\uffd2\u0143\uffd2\001\002\000\044\002\uffd1\013\uffd1" +
    "\014\uffd1\015\uffd1\u012a\uffd1\u012b\uffd1\u012c\uffd1\u012d\uffd1\u012e" +
    "\uffd1\u012f\uffd1\u0130\uffd1\u0131\uffd1\u0132\uffd1\u0133\uffd1\u0134\uffd1" +
    "\u0142\uffd1\u0143\uffd1\001\002\000\044\002\ufff1\013\ufff1\014" +
    "\ufff1\015\ufff1\u012a\ufff1\u012b\ufff1\u012c\ufff1\u012d\ufff1\u012e\ufff1" +
    "\u012f\ufff1\u0130\ufff1\u0131\ufff1\u0132\ufff1\u0133\ufff1\u0134\ufff1\u0142" +
    "\ufff1\u0143\ufff1\001\002\000\032\002\000\u012a\317\u012b\307" +
    "\u012c\315\u012d\314\u012e\320\u012f\313\u0130\312\u0131\310\u0132" +
    "\316\u0133\305\u0134\311\001\002\000\044\002\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\u012a\uffd8\u012b\uffd8\u012c\uffd8\u012d\uffd8\u012e" +
    "\uffd8\u012f\uffd8\u0130\uffd8\u0131\uffd8\u0132\uffd8\u0133\uffd8\u0134\uffd8" +
    "\u0142\uffd8\u0143\uffd8\001\002\000\032\002\ufffc\u012a\ufffc\u012b" +
    "\ufffc\u012c\ufffc\u012d\ufffc\u012e\ufffc\u012f\ufffc\u0130\ufffc\u0131\ufffc" +
    "\u0132\ufffc\u0133\ufffc\u0134\ufffc\001\002\000\044\002\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\u012a\uffd9\u012b\uffd9\u012c\uffd9\u012d\uffd9" +
    "\u012e\uffd9\u012f\uffd9\u0130\uffd9\u0131\uffd9\u0132\uffd9\u0133\uffd9\u0134" +
    "\uffd9\u0142\uffd9\u0143\uffd9\001\002\000\044\002\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\u012a\ufff2\u012b\ufff2\u012c\ufff2\u012d\ufff2\u012e" +
    "\ufff2\u012f\ufff2\u0130\ufff2\u0131\ufff2\u0132\ufff2\u0133\ufff2\u0134\ufff2" +
    "\u0142\ufff2\u0143\ufff2\001\002\000\u012a\024\uffbd\025\uffbd\026" +
    "\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd" +
    "\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043" +
    "\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd" +
    "\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060" +
    "\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd" +
    "\067\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd\075" +
    "\uffbd\076\uffbd\077\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd" +
    "\104\uffbd\105\uffbd\106\uffbd\107\uffbd\110\uffbd\111\uffbd\112" +
    "\uffbd\113\uffbd\114\uffbd\115\uffbd\116\uffbd\117\uffbd\120\uffbd" +
    "\121\uffbd\122\uffbd\123\uffbd\124\uffbd\125\uffbd\126\uffbd\127" +
    "\uffbd\130\uffbd\131\uffbd\132\uffbd\133\uffbd\134\uffbd\135\uffbd" +
    "\136\uffbd\137\uffbd\140\uffbd\141\uffbd\142\uffbd\143\uffbd\144" +
    "\uffbd\145\uffbd\146\uffbd\147\uffbd\150\uffbd\151\uffbd\152\uffbd" +
    "\153\uffbd\154\uffbd\155\uffbd\156\uffbd\157\uffbd\160\uffbd\161" +
    "\uffbd\162\uffbd\163\uffbd\164\uffbd\165\uffbd\166\uffbd\167\uffbd" +
    "\170\uffbd\171\uffbd\172\uffbd\173\uffbd\174\uffbd\175\uffbd\176" +
    "\uffbd\177\uffbd\200\uffbd\201\uffbd\202\uffbd\203\uffbd\204\uffbd" +
    "\205\uffbd\206\uffbd\207\uffbd\210\uffbd\211\uffbd\212\uffbd\213" +
    "\uffbd\214\uffbd\215\uffbd\216\uffbd\217\uffbd\220\uffbd\221\uffbd" +
    "\222\uffbd\223\uffbd\224\uffbd\225\uffbd\226\uffbd\227\uffbd\230" +
    "\uffbd\231\uffbd\232\uffbd\233\uffbd\234\uffbd\235\uffbd\236\uffbd" +
    "\237\uffbd\240\uffbd\241\uffbd\242\uffbd\243\uffbd\244\uffbd\245" +
    "\uffbd\246\uffbd\247\uffbd\001\002\000\u012a\024\uffbf\025\uffbf" +
    "\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf" +
    "\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051" +
    "\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf" +
    "\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066" +
    "\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf\074\uffbf" +
    "\075\uffbf\076\uffbf\077\uffbf\100\uffbf\101\uffbf\102\uffbf\103" +
    "\uffbf\104\uffbf\105\uffbf\106\uffbf\107\uffbf\110\uffbf\111\uffbf" +
    "\112\uffbf\113\uffbf\114\uffbf\115\uffbf\116\uffbf\117\uffbf\120" +
    "\uffbf\121\uffbf\122\uffbf\123\uffbf\124\uffbf\125\uffbf\126\uffbf" +
    "\127\uffbf\130\uffbf\131\uffbf\132\uffbf\133\uffbf\134\uffbf\135" +
    "\uffbf\136\uffbf\137\uffbf\140\uffbf\141\uffbf\142\uffbf\143\uffbf" +
    "\144\uffbf\145\uffbf\146\uffbf\147\uffbf\150\uffbf\151\uffbf\152" +
    "\uffbf\153\uffbf\154\uffbf\155\uffbf\156\uffbf\157\uffbf\160\uffbf" +
    "\161\uffbf\162\uffbf\163\uffbf\164\uffbf\165\uffbf\166\uffbf\167" +
    "\uffbf\170\uffbf\171\uffbf\172\uffbf\173\uffbf\174\uffbf\175\uffbf" +
    "\176\uffbf\177\uffbf\200\uffbf\201\uffbf\202\uffbf\203\uffbf\204" +
    "\uffbf\205\uffbf\206\uffbf\207\uffbf\210\uffbf\211\uffbf\212\uffbf" +
    "\213\uffbf\214\uffbf\215\uffbf\216\uffbf\217\uffbf\220\uffbf\221" +
    "\uffbf\222\uffbf\223\uffbf\224\uffbf\225\uffbf\226\uffbf\227\uffbf" +
    "\230\uffbf\231\uffbf\232\uffbf\233\uffbf\234\uffbf\235\uffbf\236" +
    "\uffbf\237\uffbf\240\uffbf\241\uffbf\242\uffbf\243\uffbf\244\uffbf" +
    "\245\uffbf\246\uffbf\247\uffbf\001\002\000\032\002\ufffa\u012a" +
    "\ufffa\u012b\ufffa\u012c\ufffa\u012d\ufffa\u012e\ufffa\u012f\ufffa\u0130\ufffa" +
    "\u0131\ufffa\u0132\ufffa\u0133\ufffa\u0134\ufffa\001\002\000\004\002" +
    "\304\001\002\000\032\002\ufffb\u012a\ufffb\u012b\ufffb\u012c\ufffb" +
    "\u012d\ufffb\u012e\ufffb\u012f\ufffb\u0130\ufffb\u0131\ufffb\u0132\ufffb\u0133" +
    "\ufffb\u0134\ufffb\001\002\000\044\002\ufff5\013\056\014\060" +
    "\015\055\u012a\ufff5\u012b\ufff5\u012c\ufff5\u012d\ufff5\u012e\ufff5\u012f" +
    "\ufff5\u0130\ufff5\u0131\ufff5\u0132\ufff5\u0133\ufff5\u0134\ufff5\u0142\ufff5" +
    "\u0143\ufff5\001\002\000\u012a\024\uffbe\025\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044" +
    "\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe" +
    "\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061" +
    "\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe" +
    "\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe\076" +
    "\uffbe\077\uffbe\100\uffbe\101\uffbe\102\uffbe\103\uffbe\104\uffbe" +
    "\105\uffbe\106\uffbe\107\uffbe\110\uffbe\111\uffbe\112\uffbe\113" +
    "\uffbe\114\uffbe\115\uffbe\116\uffbe\117\uffbe\120\uffbe\121\uffbe" +
    "\122\uffbe\123\uffbe\124\uffbe\125\uffbe\126\uffbe\127\uffbe\130" +
    "\uffbe\131\uffbe\132\uffbe\133\uffbe\134\uffbe\135\uffbe\136\uffbe" +
    "\137\uffbe\140\uffbe\141\uffbe\142\uffbe\143\uffbe\144\uffbe\145" +
    "\uffbe\146\uffbe\147\uffbe\150\uffbe\151\uffbe\152\uffbe\153\uffbe" +
    "\154\uffbe\155\uffbe\156\uffbe\157\uffbe\160\uffbe\161\uffbe\162" +
    "\uffbe\163\uffbe\164\uffbe\165\uffbe\166\uffbe\167\uffbe\170\uffbe" +
    "\171\uffbe\172\uffbe\173\uffbe\174\uffbe\175\uffbe\176\uffbe\177" +
    "\uffbe\200\uffbe\201\uffbe\202\uffbe\203\uffbe\204\uffbe\205\uffbe" +
    "\206\uffbe\207\uffbe\210\uffbe\211\uffbe\212\uffbe\213\uffbe\214" +
    "\uffbe\215\uffbe\216\uffbe\217\uffbe\220\uffbe\221\uffbe\222\uffbe" +
    "\223\uffbe\224\uffbe\225\uffbe\226\uffbe\227\uffbe\230\uffbe\231" +
    "\uffbe\232\uffbe\233\uffbe\234\uffbe\235\uffbe\236\uffbe\237\uffbe" +
    "\240\uffbe\241\uffbe\242\uffbe\243\uffbe\244\uffbe\245\uffbe\246" +
    "\uffbe\247\uffbe\001\002\000\044\002\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\u012a\uffcd\u012b\uffcd\u012c\uffcd\u012d\uffcd\u012e\uffcd\u012f" +
    "\uffcd\u0130\uffcd\u0131\uffcd\u0132\uffcd\u0133\uffcd\u0134\uffcd\u0142\uffcd" +
    "\u0143\uffcd\001\002\000\036\002\ufffd\u012a\ufffd\u012b\ufffd\u012c" +
    "\ufffd\u012d\ufffd\u012e\ufffd\u012f\ufffd\u0130\ufffd\u0131\ufffd\u0132\ufffd" +
    "\u0133\ufffd\u0134\ufffd\u0142\047\u0143\051\001\002\000\044\002" +
    "\uffd3\013\uffd3\014\uffd3\015\uffd3\u012a\uffd3\u012b\uffd3\u012c\uffd3" +
    "\u012d\uffd3\u012e\uffd3\u012f\uffd3\u0130\uffd3\u0131\uffd3\u0132\uffd3\u0133" +
    "\uffd3\u0134\uffd3\u0142\uffd3\u0143\uffd3\001\002\000\034\002\ufff8" +
    "\u010d\043\u012a\ufff8\u012b\ufff8\u012c\ufff8\u012d\ufff8\u012e\ufff8\u012f" +
    "\ufff8\u0130\ufff8\u0131\ufff8\u0132\ufff8\u0133\ufff8\u0134\ufff8\001\002" +
    "\000\032\002\ufffe\u012a\ufffe\u012b\ufffe\u012c\ufffe\u012d\ufffe\u012e" +
    "\ufffe\u012f\ufffe\u0130\ufffe\u0131\ufffe\u0132\ufffe\u0133\ufffe\u0134\ufffe" +
    "\001\002\000\044\002\uffd6\013\uffd6\014\uffd6\015\uffd6\u012a" +
    "\uffd6\u012b\uffd6\u012c\uffd6\u012d\uffd6\u012e\uffd6\u012f\uffd6\u0130\uffd6" +
    "\u0131\uffd6\u0132\uffd6\u0133\uffd6\u0134\uffd6\u0142\uffd6\u0143\uffd6\001" +
    "\002\000\034\002\ufff9\u010d\043\u012a\ufff9\u012b\ufff9\u012c\ufff9" +
    "\u012d\ufff9\u012e\ufff9\u012f\ufff9\u0130\ufff9\u0131\ufff9\u0132\ufff9\u0133" +
    "\ufff9\u0134\ufff9\001\002\000\032\002\ufff7\u012a\ufff7\u012b\ufff7" +
    "\u012c\ufff7\u012d\ufff7\u012e\ufff7\u012f\ufff7\u0130\ufff7\u0131\ufff7\u0132" +
    "\ufff7\u0133\ufff7\u0134\ufff7\001\002\000\004\014\044\001\002" +
    "\000\004\005\045\001\002\000\032\002\uffde\u012a\uffde\u012b" +
    "\uffde\u012c\uffde\u012d\uffde\u012e\uffde\u012f\uffde\u0130\uffde\u0131\uffde" +
    "\u0132\uffde\u0133\uffde\u0134\uffde\001\002\000\032\002\ufff6\u012a" +
    "\ufff6\u012b\ufff6\u012c\ufff6\u012d\ufff6\u012e\ufff6\u012f\ufff6\u0130\ufff6" +
    "\u0131\ufff6\u0132\ufff6\u0133\ufff6\u0134\ufff6\001\002\000\042\004" +
    "\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc" +
    "\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\u0144" +
    "\uffcc\u0145\uffcc\u0146\uffcc\001\002\000\042\004\022\005\020" +
    "\006\005\007\040\010\006\011\012\012\035\016\014\017" +
    "\015\020\004\021\007\022\013\023\033\u0144\025\u0145\032" +
    "\u0146\024\001\002\000\042\004\uffcb\005\uffcb\006\uffcb\007" +
    "\uffcb\010\uffcb\011\uffcb\012\uffcb\016\uffcb\017\uffcb\020\uffcb" +
    "\021\uffcb\022\uffcb\023\uffcb\u0144\uffcb\u0145\uffcb\u0146\uffcb\001" +
    "\002\000\032\002\ufff3\u012a\ufff3\u012b\ufff3\u012c\ufff3\u012d\ufff3" +
    "\u012e\ufff3\u012f\ufff3\u0130\ufff3\u0131\ufff3\u0132\ufff3\u0133\ufff3\u0134" +
    "\ufff3\001\002\000\u0120\145\125\146\074\147\140\150\173" +
    "\151\252\152\162\153\157\154\237\155\271\156\166\157" +
    "\277\160\134\161\141\162\153\163\122\164\201\165\260" +
    "\166\214\167\172\170\204\171\164\172\101\173\135\174" +
    "\240\175\233\176\113\177\152\200\266\201\167\202\256" +
    "\203\131\204\231\205\226\206\170\207\105\210\267\211" +
    "\205\212\250\213\212\214\115\215\221\216\234\217\261" +
    "\220\174\221\276\222\274\223\251\224\302\225\064\226" +
    "\203\227\236\230\106\231\116\232\127\233\110\234\177" +
    "\235\246\236\071\237\111\240\117\241\066\242\123\243" +
    "\230\244\065\245\114\246\253\247\133\275\272\276\202" +
    "\277\301\300\207\301\154\302\103\303\161\304\215\305" +
    "\063\306\171\307\222\310\126\311\263\312\100\313\300" +
    "\314\121\315\124\316\275\317\112\320\254\321\262\322" +
    "\220\323\206\324\062\325\075\326\257\327\104\330\211" +
    "\331\210\332\270\333\120\334\102\335\242\336\255\337" +
    "\142\340\144\341\213\342\176\343\136\344\217\345\156" +
    "\346\200\347\155\350\244\351\076\352\245\353\143\354" +
    "\264\355\146\356\061\357\073\360\232\361\067\362\160" +
    "\363\070\364\107\365\247\366\241\367\165\370\224\371" +
    "\137\372\072\373\077\374\132\u0135\163\u0136\216\u0137\243" +
    "\u0138\150\u0139\130\u013a\151\u013b\273\u013c\265\u013d\225\u013e" +
    "\147\u013f\145\u0140\227\001\002\000\036\002\ufff0\u012a\ufff0" +
    "\u012b\ufff0\u012c\ufff0\u012d\ufff0\u012e\ufff0\u012f\ufff0\u0130\ufff0\u0131" +
    "\ufff0\u0132\ufff0\u0133\ufff0\u0134\ufff0\u0142\ufff0\u0143\ufff0\001\002" +
    "\000\u0120\145\uffdb\146\uffdb\147\uffdb\150\uffdb\151\uffdb\152" +
    "\uffdb\153\uffdb\154\uffdb\155\uffdb\156\uffdb\157\uffdb\160\uffdb" +
    "\161\uffdb\162\uffdb\163\uffdb\164\uffdb\165\uffdb\166\uffdb\167" +
    "\uffdb\170\uffdb\171\uffdb\172\uffdb\173\uffdb\174\uffdb\175\uffdb" +
    "\176\uffdb\177\uffdb\200\uffdb\201\uffdb\202\uffdb\203\uffdb\204" +
    "\uffdb\205\uffdb\206\uffdb\207\uffdb\210\uffdb\211\uffdb\212\uffdb" +
    "\213\uffdb\214\uffdb\215\uffdb\216\uffdb\217\uffdb\220\uffdb\221" +
    "\uffdb\222\uffdb\223\uffdb\224\uffdb\225\uffdb\226\uffdb\227\uffdb" +
    "\230\uffdb\231\uffdb\232\uffdb\233\uffdb\234\uffdb\235\uffdb\236" +
    "\uffdb\237\uffdb\240\uffdb\241\uffdb\242\uffdb\243\uffdb\244\uffdb" +
    "\245\uffdb\246\uffdb\247\uffdb\275\uffdb\276\uffdb\277\uffdb\300" +
    "\uffdb\301\uffdb\302\uffdb\303\uffdb\304\uffdb\305\uffdb\306\uffdb" +
    "\307\uffdb\310\uffdb\311\uffdb\312\uffdb\313\uffdb\314\uffdb\315" +
    "\uffdb\316\uffdb\317\uffdb\320\uffdb\321\uffdb\322\uffdb\323\uffdb" +
    "\324\uffdb\325\uffdb\326\uffdb\327\uffdb\330\uffdb\331\uffdb\332" +
    "\uffdb\333\uffdb\334\uffdb\335\uffdb\336\uffdb\337\uffdb\340\uffdb" +
    "\341\uffdb\342\uffdb\343\uffdb\344\uffdb\345\uffdb\346\uffdb\347" +
    "\uffdb\350\uffdb\351\uffdb\352\uffdb\353\uffdb\354\uffdb\355\uffdb" +
    "\356\uffdb\357\uffdb\360\uffdb\361\uffdb\362\uffdb\363\uffdb\364" +
    "\uffdb\365\uffdb\366\uffdb\367\uffdb\370\uffdb\371\uffdb\372\uffdb" +
    "\373\uffdb\374\uffdb\u0135\uffdb\u0136\uffdb\u0137\uffdb\u0138\uffdb\u0139" +
    "\uffdb\u013a\uffdb\u013b\uffdb\u013c\uffdb\u013d\uffdb\u013e\uffdb\u013f\uffdb" +
    "\u0140\uffdb\001\002\000\u0120\145\uffdd\146\uffdd\147\uffdd\150" +
    "\uffdd\151\uffdd\152\uffdd\153\uffdd\154\uffdd\155\uffdd\156\uffdd" +
    "\157\uffdd\160\uffdd\161\uffdd\162\uffdd\163\uffdd\164\uffdd\165" +
    "\uffdd\166\uffdd\167\uffdd\170\uffdd\171\uffdd\172\uffdd\173\uffdd" +
    "\174\uffdd\175\uffdd\176\uffdd\177\uffdd\200\uffdd\201\uffdd\202" +
    "\uffdd\203\uffdd\204\uffdd\205\uffdd\206\uffdd\207\uffdd\210\uffdd" +
    "\211\uffdd\212\uffdd\213\uffdd\214\uffdd\215\uffdd\216\uffdd\217" +
    "\uffdd\220\uffdd\221\uffdd\222\uffdd\223\uffdd\224\uffdd\225\uffdd" +
    "\226\uffdd\227\uffdd\230\uffdd\231\uffdd\232\uffdd\233\uffdd\234" +
    "\uffdd\235\uffdd\236\uffdd\237\uffdd\240\uffdd\241\uffdd\242\uffdd" +
    "\243\uffdd\244\uffdd\245\uffdd\246\uffdd\247\uffdd\275\uffdd\276" +
    "\uffdd\277\uffdd\300\uffdd\301\uffdd\302\uffdd\303\uffdd\304\uffdd" +
    "\305\uffdd\306\uffdd\307\uffdd\310\uffdd\311\uffdd\312\uffdd\313" +
    "\uffdd\314\uffdd\315\uffdd\316\uffdd\317\uffdd\320\uffdd\321\uffdd" +
    "\322\uffdd\323\uffdd\324\uffdd\325\uffdd\326\uffdd\327\uffdd\330" +
    "\uffdd\331\uffdd\332\uffdd\333\uffdd\334\uffdd\335\uffdd\336\uffdd" +
    "\337\uffdd\340\uffdd\341\uffdd\342\uffdd\343\uffdd\344\uffdd\345" +
    "\uffdd\346\uffdd\347\uffdd\350\uffdd\351\uffdd\352\uffdd\353\uffdd" +
    "\354\uffdd\355\uffdd\356\uffdd\357\uffdd\360\uffdd\361\uffdd\362" +
    "\uffdd\363\uffdd\364\uffdd\365\uffdd\366\uffdd\367\uffdd\370\uffdd" +
    "\371\uffdd\372\uffdd\373\uffdd\374\uffdd\u0135\uffdd\u0136\uffdd\u0137" +
    "\uffdd\u0138\uffdd\u0139\uffdd\u013a\uffdd\u013b\uffdd\u013c\uffdd\u013d\uffdd" +
    "\u013e\uffdd\u013f\uffdd\u0140\uffdd\001\002\000\036\002\ufff4\u012a" +
    "\ufff4\u012b\ufff4\u012c\ufff4\u012d\ufff4\u012e\ufff4\u012f\ufff4\u0130\ufff4" +
    "\u0131\ufff4\u0132\ufff4\u0133\ufff4\u0134\ufff4\u0142\ufff4\u0143\ufff4\001" +
    "\002\000\u0120\145\uffdc\146\uffdc\147\uffdc\150\uffdc\151\uffdc" +
    "\152\uffdc\153\uffdc\154\uffdc\155\uffdc\156\uffdc\157\uffdc\160" +
    "\uffdc\161\uffdc\162\uffdc\163\uffdc\164\uffdc\165\uffdc\166\uffdc" +
    "\167\uffdc\170\uffdc\171\uffdc\172\uffdc\173\uffdc\174\uffdc\175" +
    "\uffdc\176\uffdc\177\uffdc\200\uffdc\201\uffdc\202\uffdc\203\uffdc" +
    "\204\uffdc\205\uffdc\206\uffdc\207\uffdc\210\uffdc\211\uffdc\212" +
    "\uffdc\213\uffdc\214\uffdc\215\uffdc\216\uffdc\217\uffdc\220\uffdc" +
    "\221\uffdc\222\uffdc\223\uffdc\224\uffdc\225\uffdc\226\uffdc\227" +
    "\uffdc\230\uffdc\231\uffdc\232\uffdc\233\uffdc\234\uffdc\235\uffdc" +
    "\236\uffdc\237\uffdc\240\uffdc\241\uffdc\242\uffdc\243\uffdc\244" +
    "\uffdc\245\uffdc\246\uffdc\247\uffdc\275\uffdc\276\uffdc\277\uffdc" +
    "\300\uffdc\301\uffdc\302\uffdc\303\uffdc\304\uffdc\305\uffdc\306" +
    "\uffdc\307\uffdc\310\uffdc\311\uffdc\312\uffdc\313\uffdc\314\uffdc" +
    "\315\uffdc\316\uffdc\317\uffdc\320\uffdc\321\uffdc\322\uffdc\323" +
    "\uffdc\324\uffdc\325\uffdc\326\uffdc\327\uffdc\330\uffdc\331\uffdc" +
    "\332\uffdc\333\uffdc\334\uffdc\335\uffdc\336\uffdc\337\uffdc\340" +
    "\uffdc\341\uffdc\342\uffdc\343\uffdc\344\uffdc\345\uffdc\346\uffdc" +
    "\347\uffdc\350\uffdc\351\uffdc\352\uffdc\353\uffdc\354\uffdc\355" +
    "\uffdc\356\uffdc\357\uffdc\360\uffdc\361\uffdc\362\uffdc\363\uffdc" +
    "\364\uffdc\365\uffdc\366\uffdc\367\uffdc\370\uffdc\371\uffdc\372" +
    "\uffdc\373\uffdc\374\uffdc\u0135\uffdc\u0136\uffdc\u0137\uffdc\u0138\uffdc" +
    "\u0139\uffdc\u013a\uffdc\u013b\uffdc\u013c\uffdc\u013d\uffdc\u013e\uffdc\u013f" +
    "\uffdc\u0140\uffdc\001\002\000\036\002\uff48\u012a\uff48\u012b\uff48" +
    "\u012c\uff48\u012d\uff48\u012e\uff48\u012f\uff48\u0130\uff48\u0131\uff48\u0132" +
    "\uff48\u0133\uff48\u0134\uff48\u0142\uff48\u0143\uff48\001\002\000\036" +
    "\002\uff62\u012a\uff62\u012b\uff62\u012c\uff62\u012d\uff62\u012e\uff62\u012f" +
    "\uff62\u0130\uff62\u0131\uff62\u0132\uff62\u0133\uff62\u0134\uff62\u0142\uff62" +
    "\u0143\uff62\001\002\000\036\002\uff71\u012a\uff71\u012b\uff71\u012c" +
    "\uff71\u012d\uff71\u012e\uff71\u012f\uff71\u0130\uff71\u0131\uff71\u0132\uff71" +
    "\u0133\uff71\u0134\uff71\u0142\uff71\u0143\uff71\001\002\000\274\024" +
    "\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c" +
    "\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041" +
    "\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c" +
    "\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c\056" +
    "\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c" +
    "\065\uff8c\066\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c\073" +
    "\uff8c\074\uff8c\075\uff8c\076\uff8c\077\uff8c\100\uff8c\101\uff8c" +
    "\102\uff8c\103\uff8c\104\uff8c\105\uff8c\106\uff8c\107\uff8c\110" +
    "\uff8c\111\uff8c\112\uff8c\113\uff8c\114\uff8c\115\uff8c\116\uff8c" +
    "\117\uff8c\120\uff8c\121\uff8c\122\uff8c\123\uff8c\124\uff8c\125" +
    "\uff8c\126\uff8c\127\uff8c\130\uff8c\131\uff8c\132\uff8c\133\uff8c" +
    "\134\uff8c\135\uff8c\136\uff8c\137\uff8c\140\uff8c\141\uff8c\142" +
    "\uff8c\143\uff8c\144\uff8c\u0135\uff8c\u0136\uff8c\u0137\uff8c\u0138\uff8c" +
    "\u0139\uff8c\u013a\uff8c\u013b\uff8c\u013c\uff8c\u013d\uff8c\u013e\uff8c\u013f" +
    "\uff8c\u0140\uff8c\001\002\000\274\024\uff7d\025\uff7d\026\uff7d" +
    "\027\uff7d\030\uff7d\031\uff7d\032\uff7d\033\uff7d\034\uff7d\035" +
    "\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d\043\uff7d" +
    "\044\uff7d\045\uff7d\046\uff7d\047\uff7d\050\uff7d\051\uff7d\052" +
    "\uff7d\053\uff7d\054\uff7d\055\uff7d\056\uff7d\057\uff7d\060\uff7d" +
    "\061\uff7d\062\uff7d\063\uff7d\064\uff7d\065\uff7d\066\uff7d\067" +
    "\uff7d\070\uff7d\071\uff7d\072\uff7d\073\uff7d\074\uff7d\075\uff7d" +
    "\076\uff7d\077\uff7d\100\uff7d\101\uff7d\102\uff7d\103\uff7d\104" +
    "\uff7d\105\uff7d\106\uff7d\107\uff7d\110\uff7d\111\uff7d\112\uff7d" +
    "\113\uff7d\114\uff7d\115\uff7d\116\uff7d\117\uff7d\120\uff7d\121" +
    "\uff7d\122\uff7d\123\uff7d\124\uff7d\125\uff7d\126\uff7d\127\uff7d" +
    "\130\uff7d\131\uff7d\132\uff7d\133\uff7d\134\uff7d\135\uff7d\136" +
    "\uff7d\137\uff7d\140\uff7d\141\uff7d\142\uff7d\143\uff7d\144\uff7d" +
    "\u0135\uff7d\u0136\uff7d\u0137\uff7d\u0138\uff7d\u0139\uff7d\u013a\uff7d\u013b" +
    "\uff7d\u013c\uff7d\u013d\uff7d\u013e\uff7d\u013f\uff7d\u0140\uff7d\001\002" +
    "\000\274\024\uff80\025\uff80\026\uff80\027\uff80\030\uff80\031" +
    "\uff80\032\uff80\033\uff80\034\uff80\035\uff80\036\uff80\037\uff80" +
    "\040\uff80\041\uff80\042\uff80\043\uff80\044\uff80\045\uff80\046" +
    "\uff80\047\uff80\050\uff80\051\uff80\052\uff80\053\uff80\054\uff80" +
    "\055\uff80\056\uff80\057\uff80\060\uff80\061\uff80\062\uff80\063" +
    "\uff80\064\uff80\065\uff80\066\uff80\067\uff80\070\uff80\071\uff80" +
    "\072\uff80\073\uff80\074\uff80\075\uff80\076\uff80\077\uff80\100" +
    "\uff80\101\uff80\102\uff80\103\uff80\104\uff80\105\uff80\106\uff80" +
    "\107\uff80\110\uff80\111\uff80\112\uff80\113\uff80\114\uff80\115" +
    "\uff80\116\uff80\117\uff80\120\uff80\121\uff80\122\uff80\123\uff80" +
    "\124\uff80\125\uff80\126\uff80\127\uff80\130\uff80\131\uff80\132" +
    "\uff80\133\uff80\134\uff80\135\uff80\136\uff80\137\uff80\140\uff80" +
    "\141\uff80\142\uff80\143\uff80\144\uff80\u0135\uff80\u0136\uff80\u0137" +
    "\uff80\u0138\uff80\u0139\uff80\u013a\uff80\u013b\uff80\u013c\uff80\u013d\uff80" +
    "\u013e\uff80\u013f\uff80\u0140\uff80\001\002\000\036\002\uff45\u012a" +
    "\uff45\u012b\uff45\u012c\uff45\u012d\uff45\u012e\uff45\u012f\uff45\u0130\uff45" +
    "\u0131\uff45\u0132\uff45\u0133\uff45\u0134\uff45\u0142\uff45\u0143\uff45\001" +
    "\002\000\036\002\uff43\u012a\uff43\u012b\uff43\u012c\uff43\u012d\uff43" +
    "\u012e\uff43\u012f\uff43\u0130\uff43\u0131\uff43\u0132\uff43\u0133\uff43\u0134" +
    "\uff43\u0142\uff43\u0143\uff43\001\002\000\274\024\uff83\025\uff83" +
    "\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034" +
    "\uff83\035\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83" +
    "\043\uff83\044\uff83\045\uff83\046\uff83\047\uff83\050\uff83\051" +
    "\uff83\052\uff83\053\uff83\054\uff83\055\uff83\056\uff83\057\uff83" +
    "\060\uff83\061\uff83\062\uff83\063\uff83\064\uff83\065\uff83\066" +
    "\uff83\067\uff83\070\uff83\071\uff83\072\uff83\073\uff83\074\uff83" +
    "\075\uff83\076\uff83\077\uff83\100\uff83\101\uff83\102\uff83\103" +
    "\uff83\104\uff83\105\uff83\106\uff83\107\uff83\110\uff83\111\uff83" +
    "\112\uff83\113\uff83\114\uff83\115\uff83\116\uff83\117\uff83\120" +
    "\uff83\121\uff83\122\uff83\123\uff83\124\uff83\125\uff83\126\uff83" +
    "\127\uff83\130\uff83\131\uff83\132\uff83\133\uff83\134\uff83\135" +
    "\uff83\136\uff83\137\uff83\140\uff83\141\uff83\142\uff83\143\uff83" +
    "\144\uff83\u0135\uff83\u0136\uff83\u0137\uff83\u0138\uff83\u0139\uff83\u013a" +
    "\uff83\u013b\uff83\u013c\uff83\u013d\uff83\u013e\uff83\u013f\uff83\u0140\uff83" +
    "\001\002\000\036\002\uff3c\u012a\uff3c\u012b\uff3c\u012c\uff3c\u012d" +
    "\uff3c\u012e\uff3c\u012f\uff3c\u0130\uff3c\u0131\uff3c\u0132\uff3c\u0133\uff3c" +
    "\u0134\uff3c\u0142\uff3c\u0143\uff3c\001\002\000\036\002\uff47\u012a" +
    "\uff47\u012b\uff47\u012c\uff47\u012d\uff47\u012e\uff47\u012f\uff47\u0130\uff47" +
    "\u0131\uff47\u0132\uff47\u0133\uff47\u0134\uff47\u0142\uff47\u0143\uff47\001" +
    "\002\000\274\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb" +
    "\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037" +
    "\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb" +
    "\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054" +
    "\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb" +
    "\063\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb\071" +
    "\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\077\uffbb" +
    "\100\uffbb\101\uffbb\102\uffbb\103\uffbb\104\uffbb\105\uffbb\106" +
    "\uffbb\107\uffbb\110\uffbb\111\uffbb\112\uffbb\113\uffbb\114\uffbb" +
    "\115\uffbb\116\uffbb\117\uffbb\120\uffbb\121\uffbb\122\uffbb\123" +
    "\uffbb\124\uffbb\125\uffbb\126\uffbb\127\uffbb\130\uffbb\131\uffbb" +
    "\132\uffbb\133\uffbb\134\uffbb\135\uffbb\136\uffbb\137\uffbb\140" +
    "\uffbb\141\uffbb\142\uffbb\143\uffbb\144\uffbb\u0135\uffbb\u0136\uffbb" +
    "\u0137\uffbb\u0138\uffbb\u0139\uffbb\u013a\uffbb\u013b\uffbb\u013c\uffbb\u013d" +
    "\uffbb\u013e\uffbb\u013f\uffbb\u0140\uffbb\001\002\000\036\002\uff61" +
    "\u012a\uff61\u012b\uff61\u012c\uff61\u012d\uff61\u012e\uff61\u012f\uff61\u0130" +
    "\uff61\u0131\uff61\u0132\uff61\u0133\uff61\u0134\uff61\u0142\uff61\u0143\uff61" +
    "\001\002\000\036\002\uff4d\u012a\uff4d\u012b\uff4d\u012c\uff4d\u012d" +
    "\uff4d\u012e\uff4d\u012f\uff4d\u0130\uff4d\u0131\uff4d\u0132\uff4d\u0133\uff4d" +
    "\u0134\uff4d\u0142\uff4d\u0143\uff4d\001\002\000\036\002\uff3b\u012a" +
    "\uff3b\u012b\uff3b\u012c\uff3b\u012d\uff3b\u012e\uff3b\u012f\uff3b\u0130\uff3b" +
    "\u0131\uff3b\u0132\uff3b\u0133\uff3b\u0134\uff3b\u0142\uff3b\u0143\uff3b\001" +
    "\002\000\036\002\uff6c\u012a\uff6c\u012b\uff6c\u012c\uff6c\u012d\uff6c" +
    "\u012e\uff6c\u012f\uff6c\u0130\uff6c\u0131\uff6c\u0132\uff6c\u0133\uff6c\u0134" +
    "\uff6c\u0142\uff6c\u0143\uff6c\001\002\000\274\024\uffa7\025\uffa7" +
    "\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034" +
    "\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7" +
    "\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051" +
    "\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7" +
    "\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7\066" +
    "\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7" +
    "\075\uffa7\076\uffa7\077\uffa7\100\uffa7\101\uffa7\102\uffa7\103" +
    "\uffa7\104\uffa7\105\uffa7\106\uffa7\107\uffa7\110\uffa7\111\uffa7" +
    "\112\uffa7\113\uffa7\114\uffa7\115\uffa7\116\uffa7\117\uffa7\120" +
    "\uffa7\121\uffa7\122\uffa7\123\uffa7\124\uffa7\125\uffa7\126\uffa7" +
    "\127\uffa7\130\uffa7\131\uffa7\132\uffa7\133\uffa7\134\uffa7\135" +
    "\uffa7\136\uffa7\137\uffa7\140\uffa7\141\uffa7\142\uffa7\143\uffa7" +
    "\144\uffa7\u0135\uffa7\u0136\uffa7\u0137\uffa7\u0138\uffa7\u0139\uffa7\u013a" +
    "\uffa7\u013b\uffa7\u013c\uffa7\u013d\uffa7\u013e\uffa7\u013f\uffa7\u0140\uffa7" +
    "\001\002\000\036\002\uff5a\u012a\uff5a\u012b\uff5a\u012c\uff5a\u012d" +
    "\uff5a\u012e\uff5a\u012f\uff5a\u0130\uff5a\u0131\uff5a\u0132\uff5a\u0133\uff5a" +
    "\u0134\uff5a\u0142\uff5a\u0143\uff5a\001\002\000\036\002\uff74\u012a" +
    "\uff74\u012b\uff74\u012c\uff74\u012d\uff74\u012e\uff74\u012f\uff74\u0130\uff74" +
    "\u0131\uff74\u0132\uff74\u0133\uff74\u0134\uff74\u0142\uff74\u0143\uff74\001" +
    "\002\000\036\002\uff5f\u012a\uff5f\u012b\uff5f\u012c\uff5f\u012d\uff5f" +
    "\u012e\uff5f\u012f\uff5f\u0130\uff5f\u0131\uff5f\u0132\uff5f\u0133\uff5f\u0134" +
    "\uff5f\u0142\uff5f\u0143\uff5f\001\002\000\274\024\uff9a\025\uff9a" +
    "\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034" +
    "\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a" +
    "\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051" +
    "\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a" +
    "\060\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a\066" +
    "\uff9a\067\uff9a\070\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a" +
    "\075\uff9a\076\uff9a\077\uff9a\100\uff9a\101\uff9a\102\uff9a\103" +
    "\uff9a\104\uff9a\105\uff9a\106\uff9a\107\uff9a\110\uff9a\111\uff9a" +
    "\112\uff9a\113\uff9a\114\uff9a\115\uff9a\116\uff9a\117\uff9a\120" +
    "\uff9a\121\uff9a\122\uff9a\123\uff9a\124\uff9a\125\uff9a\126\uff9a" +
    "\127\uff9a\130\uff9a\131\uff9a\132\uff9a\133\uff9a\134\uff9a\135" +
    "\uff9a\136\uff9a\137\uff9a\140\uff9a\141\uff9a\142\uff9a\143\uff9a" +
    "\144\uff9a\u0135\uff9a\u0136\uff9a\u0137\uff9a\u0138\uff9a\u0139\uff9a\u013a" +
    "\uff9a\u013b\uff9a\u013c\uff9a\u013d\uff9a\u013e\uff9a\u013f\uff9a\u0140\uff9a" +
    "\001\002\000\274\024\uff89\025\uff89\026\uff89\027\uff89\030" +
    "\uff89\031\uff89\032\uff89\033\uff89\034\uff89\035\uff89\036\uff89" +
    "\037\uff89\040\uff89\041\uff89\042\uff89\043\uff89\044\uff89\045" +
    "\uff89\046\uff89\047\uff89\050\uff89\051\uff89\052\uff89\053\uff89" +
    "\054\uff89\055\uff89\056\uff89\057\uff89\060\uff89\061\uff89\062" +
    "\uff89\063\uff89\064\uff89\065\uff89\066\uff89\067\uff89\070\uff89" +
    "\071\uff89\072\uff89\073\uff89\074\uff89\075\uff89\076\uff89\077" +
    "\uff89\100\uff89\101\uff89\102\uff89\103\uff89\104\uff89\105\uff89" +
    "\106\uff89\107\uff89\110\uff89\111\uff89\112\uff89\113\uff89\114" +
    "\uff89\115\uff89\116\uff89\117\uff89\120\uff89\121\uff89\122\uff89" +
    "\123\uff89\124\uff89\125\uff89\126\uff89\127\uff89\130\uff89\131" +
    "\uff89\132\uff89\133\uff89\134\uff89\135\uff89\136\uff89\137\uff89" +
    "\140\uff89\141\uff89\142\uff89\143\uff89\144\uff89\u0135\uff89\u0136" +
    "\uff89\u0137\uff89\u0138\uff89\u0139\uff89\u013a\uff89\u013b\uff89\u013c\uff89" +
    "\u013d\uff89\u013e\uff89\u013f\uff89\u0140\uff89\001\002\000\036\002" +
    "\uff42\u012a\uff42\u012b\uff42\u012c\uff42\u012d\uff42\u012e\uff42\u012f\uff42" +
    "\u0130\uff42\u0131\uff42\u0132\uff42\u0133\uff42\u0134\uff42\u0142\uff42\u0143" +
    "\uff42\001\002\000\274\024\uff86\025\uff86\026\uff86\027\uff86" +
    "\030\uff86\031\uff86\032\uff86\033\uff86\034\uff86\035\uff86\036" +
    "\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044\uff86" +
    "\045\uff86\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86\053" +
    "\uff86\054\uff86\055\uff86\056\uff86\057\uff86\060\uff86\061\uff86" +
    "\062\uff86\063\uff86\064\uff86\065\uff86\066\uff86\067\uff86\070" +
    "\uff86\071\uff86\072\uff86\073\uff86\074\uff86\075\uff86\076\uff86" +
    "\077\uff86\100\uff86\101\uff86\102\uff86\103\uff86\104\uff86\105" +
    "\uff86\106\uff86\107\uff86\110\uff86\111\uff86\112\uff86\113\uff86" +
    "\114\uff86\115\uff86\116\uff86\117\uff86\120\uff86\121\uff86\122" +
    "\uff86\123\uff86\124\uff86\125\uff86\126\uff86\127\uff86\130\uff86" +
    "\131\uff86\132\uff86\133\uff86\134\uff86\135\uff86\136\uff86\137" +
    "\uff86\140\uff86\141\uff86\142\uff86\143\uff86\144\uff86\u0135\uff86" +
    "\u0136\uff86\u0137\uff86\u0138\uff86\u0139\uff86\u013a\uff86\u013b\uff86\u013c" +
    "\uff86\u013d\uff86\u013e\uff86\u013f\uff86\u0140\uff86\001\002\000\274" +
    "\024\uff82\025\uff82\026\uff82\027\uff82\030\uff82\031\uff82\032" +
    "\uff82\033\uff82\034\uff82\035\uff82\036\uff82\037\uff82\040\uff82" +
    "\041\uff82\042\uff82\043\uff82\044\uff82\045\uff82\046\uff82\047" +
    "\uff82\050\uff82\051\uff82\052\uff82\053\uff82\054\uff82\055\uff82" +
    "\056\uff82\057\uff82\060\uff82\061\uff82\062\uff82\063\uff82\064" +
    "\uff82\065\uff82\066\uff82\067\uff82\070\uff82\071\uff82\072\uff82" +
    "\073\uff82\074\uff82\075\uff82\076\uff82\077\uff82\100\uff82\101" +
    "\uff82\102\uff82\103\uff82\104\uff82\105\uff82\106\uff82\107\uff82" +
    "\110\uff82\111\uff82\112\uff82\113\uff82\114\uff82\115\uff82\116" +
    "\uff82\117\uff82\120\uff82\121\uff82\122\uff82\123\uff82\124\uff82" +
    "\125\uff82\126\uff82\127\uff82\130\uff82\131\uff82\132\uff82\133" +
    "\uff82\134\uff82\135\uff82\136\uff82\137\uff82\140\uff82\141\uff82" +
    "\142\uff82\143\uff82\144\uff82\u0135\uff82\u0136\uff82\u0137\uff82\u0138" +
    "\uff82\u0139\uff82\u013a\uff82\u013b\uff82\u013c\uff82\u013d\uff82\u013e\uff82" +
    "\u013f\uff82\u0140\uff82\001\002\000\036\002\uff67\u012a\uff67\u012b" +
    "\uff67\u012c\uff67\u012d\uff67\u012e\uff67\u012f\uff67\u0130\uff67\u0131\uff67" +
    "\u0132\uff67\u0133\uff67\u0134\uff67\u0142\uff67\u0143\uff67\001\002\000" +
    "\274\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3" +
    "\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040" +
    "\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3" +
    "\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055" +
    "\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3" +
    "\064\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072" +
    "\uffa3\073\uffa3\074\uffa3\075\uffa3\076\uffa3\077\uffa3\100\uffa3" +
    "\101\uffa3\102\uffa3\103\uffa3\104\uffa3\105\uffa3\106\uffa3\107" +
    "\uffa3\110\uffa3\111\uffa3\112\uffa3\113\uffa3\114\uffa3\115\uffa3" +
    "\116\uffa3\117\uffa3\120\uffa3\121\uffa3\122\uffa3\123\uffa3\124" +
    "\uffa3\125\uffa3\126\uffa3\127\uffa3\130\uffa3\131\uffa3\132\uffa3" +
    "\133\uffa3\134\uffa3\135\uffa3\136\uffa3\137\uffa3\140\uffa3\141" +
    "\uffa3\142\uffa3\143\uffa3\144\uffa3\u0135\uffa3\u0136\uffa3\u0137\uffa3" +
    "\u0138\uffa3\u0139\uffa3\u013a\uffa3\u013b\uffa3\u013c\uffa3\u013d\uffa3\u013e" +
    "\uffa3\u013f\uffa3\u0140\uffa3\001\002\000\274\024\uff7c\025\uff7c" +
    "\026\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c\034" +
    "\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c" +
    "\043\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c\051" +
    "\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c\056\uff7c\057\uff7c" +
    "\060\uff7c\061\uff7c\062\uff7c\063\uff7c\064\uff7c\065\uff7c\066" +
    "\uff7c\067\uff7c\070\uff7c\071\uff7c\072\uff7c\073\uff7c\074\uff7c" +
    "\075\uff7c\076\uff7c\077\uff7c\100\uff7c\101\uff7c\102\uff7c\103" +
    "\uff7c\104\uff7c\105\uff7c\106\uff7c\107\uff7c\110\uff7c\111\uff7c" +
    "\112\uff7c\113\uff7c\114\uff7c\115\uff7c\116\uff7c\117\uff7c\120" +
    "\uff7c\121\uff7c\122\uff7c\123\uff7c\124\uff7c\125\uff7c\126\uff7c" +
    "\127\uff7c\130\uff7c\131\uff7c\132\uff7c\133\uff7c\134\uff7c\135" +
    "\uff7c\136\uff7c\137\uff7c\140\uff7c\141\uff7c\142\uff7c\143\uff7c" +
    "\144\uff7c\u0135\uff7c\u0136\uff7c\u0137\uff7c\u0138\uff7c\u0139\uff7c\u013a" +
    "\uff7c\u013b\uff7c\u013c\uff7c\u013d\uff7c\u013e\uff7c\u013f\uff7c\u0140\uff7c" +
    "\001\002\000\274\024\uff95\025\uff95\026\uff95\027\uff95\030" +
    "\uff95\031\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95" +
    "\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045" +
    "\uff95\046\uff95\047\uff95\050\uff95\051\uff95\052\uff95\053\uff95" +
    "\054\uff95\055\uff95\056\uff95\057\uff95\060\uff95\061\uff95\062" +
    "\uff95\063\uff95\064\uff95\065\uff95\066\uff95\067\uff95\070\uff95" +
    "\071\uff95\072\uff95\073\uff95\074\uff95\075\uff95\076\uff95\077" +
    "\uff95\100\uff95\101\uff95\102\uff95\103\uff95\104\uff95\105\uff95" +
    "\106\uff95\107\uff95\110\uff95\111\uff95\112\uff95\113\uff95\114" +
    "\uff95\115\uff95\116\uff95\117\uff95\120\uff95\121\uff95\122\uff95" +
    "\123\uff95\124\uff95\125\uff95\126\uff95\127\uff95\130\uff95\131" +
    "\uff95\132\uff95\133\uff95\134\uff95\135\uff95\136\uff95\137\uff95" +
    "\140\uff95\141\uff95\142\uff95\143\uff95\144\uff95\u0135\uff95\u0136" +
    "\uff95\u0137\uff95\u0138\uff95\u0139\uff95\u013a\uff95\u013b\uff95\u013c\uff95" +
    "\u013d\uff95\u013e\uff95\u013f\uff95\u0140\uff95\001\002\000\274\024" +
    "\uff88\025\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88" +
    "\033\uff88\034\uff88\035\uff88\036\uff88\037\uff88\040\uff88\041" +
    "\uff88\042\uff88\043\uff88\044\uff88\045\uff88\046\uff88\047\uff88" +
    "\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88\055\uff88\056" +
    "\uff88\057\uff88\060\uff88\061\uff88\062\uff88\063\uff88\064\uff88" +
    "\065\uff88\066\uff88\067\uff88\070\uff88\071\uff88\072\uff88\073" +
    "\uff88\074\uff88\075\uff88\076\uff88\077\uff88\100\uff88\101\uff88" +
    "\102\uff88\103\uff88\104\uff88\105\uff88\106\uff88\107\uff88\110" +
    "\uff88\111\uff88\112\uff88\113\uff88\114\uff88\115\uff88\116\uff88" +
    "\117\uff88\120\uff88\121\uff88\122\uff88\123\uff88\124\uff88\125" +
    "\uff88\126\uff88\127\uff88\130\uff88\131\uff88\132\uff88\133\uff88" +
    "\134\uff88\135\uff88\136\uff88\137\uff88\140\uff88\141\uff88\142" +
    "\uff88\143\uff88\144\uff88\u0135\uff88\u0136\uff88\u0137\uff88\u0138\uff88" +
    "\u0139\uff88\u013a\uff88\u013b\uff88\u013c\uff88\u013d\uff88\u013e\uff88\u013f" +
    "\uff88\u0140\uff88\001\002\000\274\024\uff81\025\uff81\026\uff81" +
    "\027\uff81\030\uff81\031\uff81\032\uff81\033\uff81\034\uff81\035" +
    "\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81\043\uff81" +
    "\044\uff81\045\uff81\046\uff81\047\uff81\050\uff81\051\uff81\052" +
    "\uff81\053\uff81\054\uff81\055\uff81\056\uff81\057\uff81\060\uff81" +
    "\061\uff81\062\uff81\063\uff81\064\uff81\065\uff81\066\uff81\067" +
    "\uff81\070\uff81\071\uff81\072\uff81\073\uff81\074\uff81\075\uff81" +
    "\076\uff81\077\uff81\100\uff81\101\uff81\102\uff81\103\uff81\104" +
    "\uff81\105\uff81\106\uff81\107\uff81\110\uff81\111\uff81\112\uff81" +
    "\113\uff81\114\uff81\115\uff81\116\uff81\117\uff81\120\uff81\121" +
    "\uff81\122\uff81\123\uff81\124\uff81\125\uff81\126\uff81\127\uff81" +
    "\130\uff81\131\uff81\132\uff81\133\uff81\134\uff81\135\uff81\136" +
    "\uff81\137\uff81\140\uff81\141\uff81\142\uff81\143\uff81\144\uff81" +
    "\u0135\uff81\u0136\uff81\u0137\uff81\u0138\uff81\u0139\uff81\u013a\uff81\u013b" +
    "\uff81\u013c\uff81\u013d\uff81\u013e\uff81\u013f\uff81\u0140\uff81\001\002" +
    "\000\036\002\uff5b\u012a\uff5b\u012b\uff5b\u012c\uff5b\u012d\uff5b\u012e" +
    "\uff5b\u012f\uff5b\u0130\uff5b\u0131\uff5b\u0132\uff5b\u0133\uff5b\u0134\uff5b" +
    "\u0142\uff5b\u0143\uff5b\001\002\000\036\002\uff6a\u012a\uff6a\u012b" +
    "\uff6a\u012c\uff6a\u012d\uff6a\u012e\uff6a\u012f\uff6a\u0130\uff6a\u0131\uff6a" +
    "\u0132\uff6a\u0133\uff6a\u0134\uff6a\u0142\uff6a\u0143\uff6a\001\002\000" +
    "\274\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae" +
    "\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040" +
    "\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae" +
    "\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055" +
    "\uffae\056\uffae\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae" +
    "\064\uffae\065\uffae\066\uffae\067\uffae\070\uffae\071\uffae\072" +
    "\uffae\073\uffae\074\uffae\075\uffae\076\uffae\077\uffae\100\uffae" +
    "\101\uffae\102\uffae\103\uffae\104\uffae\105\uffae\106\uffae\107" +
    "\uffae\110\uffae\111\uffae\112\uffae\113\uffae\114\uffae\115\uffae" +
    "\116\uffae\117\uffae\120\uffae\121\uffae\122\uffae\123\uffae\124" +
    "\uffae\125\uffae\126\uffae\127\uffae\130\uffae\131\uffae\132\uffae" +
    "\133\uffae\134\uffae\135\uffae\136\uffae\137\uffae\140\uffae\141" +
    "\uffae\142\uffae\143\uffae\144\uffae\u0135\uffae\u0136\uffae\u0137\uffae" +
    "\u0138\uffae\u0139\uffae\u013a\uffae\u013b\uffae\u013c\uffae\u013d\uffae\u013e" +
    "\uffae\u013f\uffae\u0140\uffae\001\002\000\274\024\uff7f\025\uff7f" +
    "\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034" +
    "\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f" +
    "\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051" +
    "\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f\056\uff7f\057\uff7f" +
    "\060\uff7f\061\uff7f\062\uff7f\063\uff7f\064\uff7f\065\uff7f\066" +
    "\uff7f\067\uff7f\070\uff7f\071\uff7f\072\uff7f\073\uff7f\074\uff7f" +
    "\075\uff7f\076\uff7f\077\uff7f\100\uff7f\101\uff7f\102\uff7f\103" +
    "\uff7f\104\uff7f\105\uff7f\106\uff7f\107\uff7f\110\uff7f\111\uff7f" +
    "\112\uff7f\113\uff7f\114\uff7f\115\uff7f\116\uff7f\117\uff7f\120" +
    "\uff7f\121\uff7f\122\uff7f\123\uff7f\124\uff7f\125\uff7f\126\uff7f" +
    "\127\uff7f\130\uff7f\131\uff7f\132\uff7f\133\uff7f\134\uff7f\135" +
    "\uff7f\136\uff7f\137\uff7f\140\uff7f\141\uff7f\142\uff7f\143\uff7f" +
    "\144\uff7f\u0135\uff7f\u0136\uff7f\u0137\uff7f\u0138\uff7f\u0139\uff7f\u013a" +
    "\uff7f\u013b\uff7f\u013c\uff7f\u013d\uff7f\u013e\uff7f\u013f\uff7f\u0140\uff7f" +
    "\001\002\000\036\002\uff69\u012a\uff69\u012b\uff69\u012c\uff69\u012d" +
    "\uff69\u012e\uff69\u012f\uff69\u0130\uff69\u0131\uff69\u0132\uff69\u0133\uff69" +
    "\u0134\uff69\u0142\uff69\u0143\uff69\001\002\000\274\024\uffbc\025" +
    "\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc" +
    "\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc" +
    "\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057" +
    "\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc" +
    "\066\uffbc\067\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc\074" +
    "\uffbc\075\uffbc\076\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc" +
    "\103\uffbc\104\uffbc\105\uffbc\106\uffbc\107\uffbc\110\uffbc\111" +
    "\uffbc\112\uffbc\113\uffbc\114\uffbc\115\uffbc\116\uffbc\117\uffbc" +
    "\120\uffbc\121\uffbc\122\uffbc\123\uffbc\124\uffbc\125\uffbc\126" +
    "\uffbc\127\uffbc\130\uffbc\131\uffbc\132\uffbc\133\uffbc\134\uffbc" +
    "\135\uffbc\136\uffbc\137\uffbc\140\uffbc\141\uffbc\142\uffbc\143" +
    "\uffbc\144\uffbc\u0135\uffbc\u0136\uffbc\u0137\uffbc\u0138\uffbc\u0139\uffbc" +
    "\u013a\uffbc\u013b\uffbc\u013c\uffbc\u013d\uffbc\u013e\uffbc\u013f\uffbc\u0140" +
    "\uffbc\001\002\000\036\002\uff6e\u012a\uff6e\u012b\uff6e\u012c\uff6e" +
    "\u012d\uff6e\u012e\uff6e\u012f\uff6e\u0130\uff6e\u0131\uff6e\u0132\uff6e\u0133" +
    "\uff6e\u0134\uff6e\u0142\uff6e\u0143\uff6e\001\002\000\274\024\uff87" +
    "\025\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033" +
    "\uff87\034\uff87\035\uff87\036\uff87\037\uff87\040\uff87\041\uff87" +
    "\042\uff87\043\uff87\044\uff87\045\uff87\046\uff87\047\uff87\050" +
    "\uff87\051\uff87\052\uff87\053\uff87\054\uff87\055\uff87\056\uff87" +
    "\057\uff87\060\uff87\061\uff87\062\uff87\063\uff87\064\uff87\065" +
    "\uff87\066\uff87\067\uff87\070\uff87\071\uff87\072\uff87\073\uff87" +
    "\074\uff87\075\uff87\076\uff87\077\uff87\100\uff87\101\uff87\102" +
    "\uff87\103\uff87\104\uff87\105\uff87\106\uff87\107\uff87\110\uff87" +
    "\111\uff87\112\uff87\113\uff87\114\uff87\115\uff87\116\uff87\117" +
    "\uff87\120\uff87\121\uff87\122\uff87\123\uff87\124\uff87\125\uff87" +
    "\126\uff87\127\uff87\130\uff87\131\uff87\132\uff87\133\uff87\134" +
    "\uff87\135\uff87\136\uff87\137\uff87\140\uff87\141\uff87\142\uff87" +
    "\143\uff87\144\uff87\u0135\uff87\u0136\uff87\u0137\uff87\u0138\uff87\u0139" +
    "\uff87\u013a\uff87\u013b\uff87\u013c\uff87\u013d\uff87\u013e\uff87\u013f\uff87" +
    "\u0140\uff87\001\002\000\036\002\uffe6\u012a\uffe6\u012b\uffe6\u012c" +
    "\uffe6\u012d\uffe6\u012e\uffe6\u012f\uffe6\u0130\uffe6\u0131\uffe6\u0132\uffe6" +
    "\u0133\uffe6\u0134\uffe6\u0142\uffe6\u0143\uffe6\001\002\000\274\024" +
    "\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e" +
    "\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041" +
    "\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e" +
    "\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056" +
    "\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e" +
    "\065\uff9e\066\uff9e\067\uff9e\070\uff9e\071\uff9e\072\uff9e\073" +
    "\uff9e\074\uff9e\075\uff9e\076\uff9e\077\uff9e\100\uff9e\101\uff9e" +
    "\102\uff9e\103\uff9e\104\uff9e\105\uff9e\106\uff9e\107\uff9e\110" +
    "\uff9e\111\uff9e\112\uff9e\113\uff9e\114\uff9e\115\uff9e\116\uff9e" +
    "\117\uff9e\120\uff9e\121\uff9e\122\uff9e\123\uff9e\124\uff9e\125" +
    "\uff9e\126\uff9e\127\uff9e\130\uff9e\131\uff9e\132\uff9e\133\uff9e" +
    "\134\uff9e\135\uff9e\136\uff9e\137\uff9e\140\uff9e\141\uff9e\142" +
    "\uff9e\143\uff9e\144\uff9e\u0135\uff9e\u0136\uff9e\u0137\uff9e\u0138\uff9e" +
    "\u0139\uff9e\u013a\uff9e\u013b\uff9e\u013c\uff9e\u013d\uff9e\u013e\uff9e\u013f" +
    "\uff9e\u0140\uff9e\001\002\000\036\002\uff3a\u012a\uff3a\u012b\uff3a" +
    "\u012c\uff3a\u012d\uff3a\u012e\uff3a\u012f\uff3a\u0130\uff3a\u0131\uff3a\u0132" +
    "\uff3a\u0133\uff3a\u0134\uff3a\u0142\uff3a\u0143\uff3a\001\002\000\274" +
    "\024\uff7a\025\uff7a\026\uff7a\027\uff7a\030\uff7a\031\uff7a\032" +
    "\uff7a\033\uff7a\034\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a" +
    "\041\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a\046\uff7a\047" +
    "\uff7a\050\uff7a\051\uff7a\052\uff7a\053\uff7a\054\uff7a\055\uff7a" +
    "\056\uff7a\057\uff7a\060\uff7a\061\uff7a\062\uff7a\063\uff7a\064" +
    "\uff7a\065\uff7a\066\uff7a\067\uff7a\070\uff7a\071\uff7a\072\uff7a" +
    "\073\uff7a\074\uff7a\075\uff7a\076\uff7a\077\uff7a\100\uff7a\101" +
    "\uff7a\102\uff7a\103\uff7a\104\uff7a\105\uff7a\106\uff7a\107\uff7a" +
    "\110\uff7a\111\uff7a\112\uff7a\113\uff7a\114\uff7a\115\uff7a\116" +
    "\uff7a\117\uff7a\120\uff7a\121\uff7a\122\uff7a\123\uff7a\124\uff7a" +
    "\125\uff7a\126\uff7a\127\uff7a\130\uff7a\131\uff7a\132\uff7a\133" +
    "\uff7a\134\uff7a\135\uff7a\136\uff7a\137\uff7a\140\uff7a\141\uff7a" +
    "\142\uff7a\143\uff7a\144\uff7a\u0135\uff7a\u0136\uff7a\u0137\uff7a\u0138" +
    "\uff7a\u0139\uff7a\u013a\uff7a\u013b\uff7a\u013c\uff7a\u013d\uff7a\u013e\uff7a" +
    "\u013f\uff7a\u0140\uff7a\001\002\000\274\024\uffb1\025\uffb1\026" +
    "\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1" +
    "\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043" +
    "\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1" +
    "\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060" +
    "\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1" +
    "\067\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1\075" +
    "\uffb1\076\uffb1\077\uffb1\100\uffb1\101\uffb1\102\uffb1\103\uffb1" +
    "\104\uffb1\105\uffb1\106\uffb1\107\uffb1\110\uffb1\111\uffb1\112" +
    "\uffb1\113\uffb1\114\uffb1\115\uffb1\116\uffb1\117\uffb1\120\uffb1" +
    "\121\uffb1\122\uffb1\123\uffb1\124\uffb1\125\uffb1\126\uffb1\127" +
    "\uffb1\130\uffb1\131\uffb1\132\uffb1\133\uffb1\134\uffb1\135\uffb1" +
    "\136\uffb1\137\uffb1\140\uffb1\141\uffb1\142\uffb1\143\uffb1\144" +
    "\uffb1\u0135\uffb1\u0136\uffb1\u0137\uffb1\u0138\uffb1\u0139\uffb1\u013a\uffb1" +
    "\u013b\uffb1\u013c\uffb1\u013d\uffb1\u013e\uffb1\u013f\uffb1\u0140\uffb1\001" +
    "\002\000\274\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6" +
    "\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037" +
    "\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6" +
    "\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054" +
    "\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6" +
    "\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6\071" +
    "\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6" +
    "\100\uffa6\101\uffa6\102\uffa6\103\uffa6\104\uffa6\105\uffa6\106" +
    "\uffa6\107\uffa6\110\uffa6\111\uffa6\112\uffa6\113\uffa6\114\uffa6" +
    "\115\uffa6\116\uffa6\117\uffa6\120\uffa6\121\uffa6\122\uffa6\123" +
    "\uffa6\124\uffa6\125\uffa6\126\uffa6\127\uffa6\130\uffa6\131\uffa6" +
    "\132\uffa6\133\uffa6\134\uffa6\135\uffa6\136\uffa6\137\uffa6\140" +
    "\uffa6\141\uffa6\142\uffa6\143\uffa6\144\uffa6\u0135\uffa6\u0136\uffa6" +
    "\u0137\uffa6\u0138\uffa6\u0139\uffa6\u013a\uffa6\u013b\uffa6\u013c\uffa6\u013d" +
    "\uffa6\u013e\uffa6\u013f\uffa6\u0140\uffa6\001\002\000\036\002\uff53" +
    "\u012a\uff53\u012b\uff53\u012c\uff53\u012d\uff53\u012e\uff53\u012f\uff53\u0130" +
    "\uff53\u0131\uff53\u0132\uff53\u0133\uff53\u0134\uff53\u0142\uff53\u0143\uff53" +
    "\001\002\000\036\002\uff3d\u012a\uff3d\u012b\uff3d\u012c\uff3d\u012d" +
    "\uff3d\u012e\uff3d\u012f\uff3d\u0130\uff3d\u0131\uff3d\u0132\uff3d\u0133\uff3d" +
    "\u0134\uff3d\u0142\uff3d\u0143\uff3d\001\002\000\274\024\uffba\025" +
    "\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba" +
    "\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042" +
    "\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba" +
    "\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057" +
    "\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba" +
    "\066\uffba\067\uffba\070\uffba\071\uffba\072\uffba\073\uffba\074" +
    "\uffba\075\uffba\076\uffba\077\uffba\100\uffba\101\uffba\102\uffba" +
    "\103\uffba\104\uffba\105\uffba\106\uffba\107\uffba\110\uffba\111" +
    "\uffba\112\uffba\113\uffba\114\uffba\115\uffba\116\uffba\117\uffba" +
    "\120\uffba\121\uffba\122\uffba\123\uffba\124\uffba\125\uffba\126" +
    "\uffba\127\uffba\130\uffba\131\uffba\132\uffba\133\uffba\134\uffba" +
    "\135\uffba\136\uffba\137\uffba\140\uffba\141\uffba\142\uffba\143" +
    "\uffba\144\uffba\u0135\uffba\u0136\uffba\u0137\uffba\u0138\uffba\u0139\uffba" +
    "\u013a\uffba\u013b\uffba\u013c\uffba\u013d\uffba\u013e\uffba\u013f\uffba\u0140" +
    "\uffba\001\002\000\274\024\uffb0\025\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036" +
    "\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0" +
    "\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053" +
    "\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0" +
    "\062\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0\070" +
    "\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0" +
    "\077\uffb0\100\uffb0\101\uffb0\102\uffb0\103\uffb0\104\uffb0\105" +
    "\uffb0\106\uffb0\107\uffb0\110\uffb0\111\uffb0\112\uffb0\113\uffb0" +
    "\114\uffb0\115\uffb0\116\uffb0\117\uffb0\120\uffb0\121\uffb0\122" +
    "\uffb0\123\uffb0\124\uffb0\125\uffb0\126\uffb0\127\uffb0\130\uffb0" +
    "\131\uffb0\132\uffb0\133\uffb0\134\uffb0\135\uffb0\136\uffb0\137" +
    "\uffb0\140\uffb0\141\uffb0\142\uffb0\143\uffb0\144\uffb0\u0135\uffb0" +
    "\u0136\uffb0\u0137\uffb0\u0138\uffb0\u0139\uffb0\u013a\uffb0\u013b\uffb0\u013c" +
    "\uffb0\u013d\uffb0\u013e\uffb0\u013f\uffb0\u0140\uffb0\001\002\000\036" +
    "\002\uff57\u012a\uff57\u012b\uff57\u012c\uff57\u012d\uff57\u012e\uff57\u012f" +
    "\uff57\u0130\uff57\u0131\uff57\u0132\uff57\u0133\uff57\u0134\uff57\u0142\uff57" +
    "\u0143\uff57\001\002\000\036\002\uff4b\u012a\uff4b\u012b\uff4b\u012c" +
    "\uff4b\u012d\uff4b\u012e\uff4b\u012f\uff4b\u0130\uff4b\u0131\uff4b\u0132\uff4b" +
    "\u0133\uff4b\u0134\uff4b\u0142\uff4b\u0143\uff4b\001\002\000\036\002" +
    "\uff56\u012a\uff56\u012b\uff56\u012c\uff56\u012d\uff56\u012e\uff56\u012f\uff56" +
    "\u0130\uff56\u0131\uff56\u0132\uff56\u0133\uff56\u0134\uff56\u0142\uff56\u0143" +
    "\uff56\001\002\000\036\002\uffe0\u012a\uffe0\u012b\uffe0\u012c\uffe0" +
    "\u012d\uffe0\u012e\uffe0\u012f\uffe0\u0130\uffe0\u0131\uffe0\u0132\uffe0\u0133" +
    "\uffe0\u0134\uffe0\u0142\uffe0\u0143\uffe0\001\002\000\036\002\uff49" +
    "\u012a\uff49\u012b\uff49\u012c\uff49\u012d\uff49\u012e\uff49\u012f\uff49\u0130" +
    "\uff49\u0131\uff49\u0132\uff49\u0133\uff49\u0134\uff49\u0142\uff49\u0143\uff49" +
    "\001\002\000\036\002\uffe1\u012a\uffe1\u012b\uffe1\u012c\uffe1\u012d" +
    "\uffe1\u012e\uffe1\u012f\uffe1\u0130\uffe1\u0131\uffe1\u0132\uffe1\u0133\uffe1" +
    "\u0134\uffe1\u0142\uffe1\u0143\uffe1\001\002\000\036\002\uffe7\u012a" +
    "\uffe7\u012b\uffe7\u012c\uffe7\u012d\uffe7\u012e\uffe7\u012f\uffe7\u0130\uffe7" +
    "\u0131\uffe7\u0132\uffe7\u0133\uffe7\u0134\uffe7\u0142\uffe7\u0143\uffe7\001" +
    "\002\000\036\002\uffe5\u012a\uffe5\u012b\uffe5\u012c\uffe5\u012d\uffe5" +
    "\u012e\uffe5\u012f\uffe5\u0130\uffe5\u0131\uffe5\u0132\uffe5\u0133\uffe5\u0134" +
    "\uffe5\u0142\uffe5\u0143\uffe5\001\002\000\274\024\uffa2\025\uffa2" +
    "\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034" +
    "\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2" +
    "\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051" +
    "\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2" +
    "\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066" +
    "\uffa2\067\uffa2\070\uffa2\071\uffa2\072\uffa2\073\uffa2\074\uffa2" +
    "\075\uffa2\076\uffa2\077\uffa2\100\uffa2\101\uffa2\102\uffa2\103" +
    "\uffa2\104\uffa2\105\uffa2\106\uffa2\107\uffa2\110\uffa2\111\uffa2" +
    "\112\uffa2\113\uffa2\114\uffa2\115\uffa2\116\uffa2\117\uffa2\120" +
    "\uffa2\121\uffa2\122\uffa2\123\uffa2\124\uffa2\125\uffa2\126\uffa2" +
    "\127\uffa2\130\uffa2\131\uffa2\132\uffa2\133\uffa2\134\uffa2\135" +
    "\uffa2\136\uffa2\137\uffa2\140\uffa2\141\uffa2\142\uffa2\143\uffa2" +
    "\144\uffa2\u0135\uffa2\u0136\uffa2\u0137\uffa2\u0138\uffa2\u0139\uffa2\u013a" +
    "\uffa2\u013b\uffa2\u013c\uffa2\u013d\uffa2\u013e\uffa2\u013f\uffa2\u0140\uffa2" +
    "\001\002\000\274\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030" +
    "\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf" +
    "\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045" +
    "\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf" +
    "\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062" +
    "\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf" +
    "\071\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077" +
    "\uffaf\100\uffaf\101\uffaf\102\uffaf\103\uffaf\104\uffaf\105\uffaf" +
    "\106\uffaf\107\uffaf\110\uffaf\111\uffaf\112\uffaf\113\uffaf\114" +
    "\uffaf\115\uffaf\116\uffaf\117\uffaf\120\uffaf\121\uffaf\122\uffaf" +
    "\123\uffaf\124\uffaf\125\uffaf\126\uffaf\127\uffaf\130\uffaf\131" +
    "\uffaf\132\uffaf\133\uffaf\134\uffaf\135\uffaf\136\uffaf\137\uffaf" +
    "\140\uffaf\141\uffaf\142\uffaf\143\uffaf\144\uffaf\u0135\uffaf\u0136" +
    "\uffaf\u0137\uffaf\u0138\uffaf\u0139\uffaf\u013a\uffaf\u013b\uffaf\u013c\uffaf" +
    "\u013d\uffaf\u013e\uffaf\u013f\uffaf\u0140\uffaf\001\002\000\036\002" +
    "\uff75\u012a\uff75\u012b\uff75\u012c\uff75\u012d\uff75\u012e\uff75\u012f\uff75" +
    "\u0130\uff75\u0131\uff75\u0132\uff75\u0133\uff75\u0134\uff75\u0142\uff75\u0143" +
    "\uff75\001\002\000\036\002\uff4f\u012a\uff4f\u012b\uff4f\u012c\uff4f" +
    "\u012d\uff4f\u012e\uff4f\u012f\uff4f\u0130\uff4f\u0131\uff4f\u0132\uff4f\u0133" +
    "\uff4f\u0134\uff4f\u0142\uff4f\u0143\uff4f\001\002\000\036\002\uff51" +
    "\u012a\uff51\u012b\uff51\u012c\uff51\u012d\uff51\u012e\uff51\u012f\uff51\u0130" +
    "\uff51\u0131\uff51\u0132\uff51\u0133\uff51\u0134\uff51\u0142\uff51\u0143\uff51" +
    "\001\002\000\274\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045" +
    "\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6" +
    "\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062" +
    "\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\070\uffb6" +
    "\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6\077" +
    "\uffb6\100\uffb6\101\uffb6\102\uffb6\103\uffb6\104\uffb6\105\uffb6" +
    "\106\uffb6\107\uffb6\110\uffb6\111\uffb6\112\uffb6\113\uffb6\114" +
    "\uffb6\115\uffb6\116\uffb6\117\uffb6\120\uffb6\121\uffb6\122\uffb6" +
    "\123\uffb6\124\uffb6\125\uffb6\126\uffb6\127\uffb6\130\uffb6\131" +
    "\uffb6\132\uffb6\133\uffb6\134\uffb6\135\uffb6\136\uffb6\137\uffb6" +
    "\140\uffb6\141\uffb6\142\uffb6\143\uffb6\144\uffb6\u0135\uffb6\u0136" +
    "\uffb6\u0137\uffb6\u0138\uffb6\u0139\uffb6\u013a\uffb6\u013b\uffb6\u013c\uffb6" +
    "\u013d\uffb6\u013e\uffb6\u013f\uffb6\u0140\uffb6\001\002\000\036\002" +
    "\uff44\u012a\uff44\u012b\uff44\u012c\uff44\u012d\uff44\u012e\uff44\u012f\uff44" +
    "\u0130\uff44\u0131\uff44\u0132\uff44\u0133\uff44\u0134\uff44\u0142\uff44\u0143" +
    "\uff44\001\002\000\036\002\uff73\u012a\uff73\u012b\uff73\u012c\uff73" +
    "\u012d\uff73\u012e\uff73\u012f\uff73\u0130\uff73\u0131\uff73\u0132\uff73\u0133" +
    "\uff73\u0134\uff73\u0142\uff73\u0143\uff73\001\002\000\274\024\uffb7" +
    "\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033" +
    "\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7" +
    "\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050" +
    "\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7" +
    "\057\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065" +
    "\uffb7\066\uffb7\067\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7" +
    "\074\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7\101\uffb7\102" +
    "\uffb7\103\uffb7\104\uffb7\105\uffb7\106\uffb7\107\uffb7\110\uffb7" +
    "\111\uffb7\112\uffb7\113\uffb7\114\uffb7\115\uffb7\116\uffb7\117" +
    "\uffb7\120\uffb7\121\uffb7\122\uffb7\123\uffb7\124\uffb7\125\uffb7" +
    "\126\uffb7\127\uffb7\130\uffb7\131\uffb7\132\uffb7\133\uffb7\134" +
    "\uffb7\135\uffb7\136\uffb7\137\uffb7\140\uffb7\141\uffb7\142\uffb7" +
    "\143\uffb7\144\uffb7\u0135\uffb7\u0136\uffb7\u0137\uffb7\u0138\uffb7\u0139" +
    "\uffb7\u013a\uffb7\u013b\uffb7\u013c\uffb7\u013d\uffb7\u013e\uffb7\u013f\uffb7" +
    "\u0140\uffb7\001\002\000\036\002\uffea\u012a\uffea\u012b\uffea\u012c" +
    "\uffea\u012d\uffea\u012e\uffea\u012f\uffea\u0130\uffea\u0131\uffea\u0132\uffea" +
    "\u0133\uffea\u0134\uffea\u0142\uffea\u0143\uffea\001\002\000\274\024" +
    "\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8" +
    "\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041" +
    "\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8" +
    "\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056" +
    "\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8" +
    "\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\073" +
    "\uffa8\074\uffa8\075\uffa8\076\uffa8\077\uffa8\100\uffa8\101\uffa8" +
    "\102\uffa8\103\uffa8\104\uffa8\105\uffa8\106\uffa8\107\uffa8\110" +
    "\uffa8\111\uffa8\112\uffa8\113\uffa8\114\uffa8\115\uffa8\116\uffa8" +
    "\117\uffa8\120\uffa8\121\uffa8\122\uffa8\123\uffa8\124\uffa8\125" +
    "\uffa8\126\uffa8\127\uffa8\130\uffa8\131\uffa8\132\uffa8\133\uffa8" +
    "\134\uffa8\135\uffa8\136\uffa8\137\uffa8\140\uffa8\141\uffa8\142" +
    "\uffa8\143\uffa8\144\uffa8\u0135\uffa8\u0136\uffa8\u0137\uffa8\u0138\uffa8" +
    "\u0139\uffa8\u013a\uffa8\u013b\uffa8\u013c\uffa8\u013d\uffa8\u013e\uffa8\u013f" +
    "\uffa8\u0140\uffa8\001\002\000\036\002\uff3f\u012a\uff3f\u012b\uff3f" +
    "\u012c\uff3f\u012d\uff3f\u012e\uff3f\u012f\uff3f\u0130\uff3f\u0131\uff3f\u0132" +
    "\uff3f\u0133\uff3f\u0134\uff3f\u0142\uff3f\u0143\uff3f\001\002\000\274" +
    "\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032" +
    "\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3" +
    "\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047" +
    "\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3" +
    "\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064" +
    "\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3\072\uffb3" +
    "\073\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\101" +
    "\uffb3\102\uffb3\103\uffb3\104\uffb3\105\uffb3\106\uffb3\107\uffb3" +
    "\110\uffb3\111\uffb3\112\uffb3\113\uffb3\114\uffb3\115\uffb3\116" +
    "\uffb3\117\uffb3\120\uffb3\121\uffb3\122\uffb3\123\uffb3\124\uffb3" +
    "\125\uffb3\126\uffb3\127\uffb3\130\uffb3\131\uffb3\132\uffb3\133" +
    "\uffb3\134\uffb3\135\uffb3\136\uffb3\137\uffb3\140\uffb3\141\uffb3" +
    "\142\uffb3\143\uffb3\144\uffb3\u0135\uffb3\u0136\uffb3\u0137\uffb3\u0138" +
    "\uffb3\u0139\uffb3\u013a\uffb3\u013b\uffb3\u013c\uffb3\u013d\uffb3\u013e\uffb3" +
    "\u013f\uffb3\u0140\uffb3\001\002\000\274\024\uffa0\025\uffa0\026" +
    "\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0" +
    "\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043" +
    "\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0" +
    "\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060" +
    "\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0" +
    "\067\uffa0\070\uffa0\071\uffa0\072\uffa0\073\uffa0\074\uffa0\075" +
    "\uffa0\076\uffa0\077\uffa0\100\uffa0\101\uffa0\102\uffa0\103\uffa0" +
    "\104\uffa0\105\uffa0\106\uffa0\107\uffa0\110\uffa0\111\uffa0\112" +
    "\uffa0\113\uffa0\114\uffa0\115\uffa0\116\uffa0\117\uffa0\120\uffa0" +
    "\121\uffa0\122\uffa0\123\uffa0\124\uffa0\125\uffa0\126\uffa0\127" +
    "\uffa0\130\uffa0\131\uffa0\132\uffa0\133\uffa0\134\uffa0\135\uffa0" +
    "\136\uffa0\137\uffa0\140\uffa0\141\uffa0\142\uffa0\143\uffa0\144" +
    "\uffa0\u0135\uffa0\u0136\uffa0\u0137\uffa0\u0138\uffa0\u0139\uffa0\u013a\uffa0" +
    "\u013b\uffa0\u013c\uffa0\u013d\uffa0\u013e\uffa0\u013f\uffa0\u0140\uffa0\001" +
    "\002\000\274\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b" +
    "\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037" +
    "\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b" +
    "\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054" +
    "\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b" +
    "\063\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\070\uff9b\071" +
    "\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b\077\uff9b" +
    "\100\uff9b\101\uff9b\102\uff9b\103\uff9b\104\uff9b\105\uff9b\106" +
    "\uff9b\107\uff9b\110\uff9b\111\uff9b\112\uff9b\113\uff9b\114\uff9b" +
    "\115\uff9b\116\uff9b\117\uff9b\120\uff9b\121\uff9b\122\uff9b\123" +
    "\uff9b\124\uff9b\125\uff9b\126\uff9b\127\uff9b\130\uff9b\131\uff9b" +
    "\132\uff9b\133\uff9b\134\uff9b\135\uff9b\136\uff9b\137\uff9b\140" +
    "\uff9b\141\uff9b\142\uff9b\143\uff9b\144\uff9b\u0135\uff9b\u0136\uff9b" +
    "\u0137\uff9b\u0138\uff9b\u0139\uff9b\u013a\uff9b\u013b\uff9b\u013c\uff9b\u013d" +
    "\uff9b\u013e\uff9b\u013f\uff9b\u0140\uff9b\001\002\000\036\002\uff70" +
    "\u012a\uff70\u012b\uff70\u012c\uff70\u012d\uff70\u012e\uff70\u012f\uff70\u0130" +
    "\uff70\u0131\uff70\u0132\uff70\u0133\uff70\u0134\uff70\u0142\uff70\u0143\uff70" +
    "\001\002\000\274\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030" +
    "\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa" +
    "\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045" +
    "\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa" +
    "\054\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062" +
    "\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa" +
    "\071\uffaa\072\uffaa\073\uffaa\074\uffaa\075\uffaa\076\uffaa\077" +
    "\uffaa\100\uffaa\101\uffaa\102\uffaa\103\uffaa\104\uffaa\105\uffaa" +
    "\106\uffaa\107\uffaa\110\uffaa\111\uffaa\112\uffaa\113\uffaa\114" +
    "\uffaa\115\uffaa\116\uffaa\117\uffaa\120\uffaa\121\uffaa\122\uffaa" +
    "\123\uffaa\124\uffaa\125\uffaa\126\uffaa\127\uffaa\130\uffaa\131" +
    "\uffaa\132\uffaa\133\uffaa\134\uffaa\135\uffaa\136\uffaa\137\uffaa" +
    "\140\uffaa\141\uffaa\142\uffaa\143\uffaa\144\uffaa\u0135\uffaa\u0136" +
    "\uffaa\u0137\uffaa\u0138\uffaa\u0139\uffaa\u013a\uffaa\u013b\uffaa\u013c\uffaa" +
    "\u013d\uffaa\u013e\uffaa\u013f\uffaa\u0140\uffaa\001\002\000\274\024" +
    "\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9" +
    "\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056" +
    "\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9" +
    "\065\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9\072\uffb9\073" +
    "\uffb9\074\uffb9\075\uffb9\076\uffb9\077\uffb9\100\uffb9\101\uffb9" +
    "\102\uffb9\103\uffb9\104\uffb9\105\uffb9\106\uffb9\107\uffb9\110" +
    "\uffb9\111\uffb9\112\uffb9\113\uffb9\114\uffb9\115\uffb9\116\uffb9" +
    "\117\uffb9\120\uffb9\121\uffb9\122\uffb9\123\uffb9\124\uffb9\125" +
    "\uffb9\126\uffb9\127\uffb9\130\uffb9\131\uffb9\132\uffb9\133\uffb9" +
    "\134\uffb9\135\uffb9\136\uffb9\137\uffb9\140\uffb9\141\uffb9\142" +
    "\uffb9\143\uffb9\144\uffb9\u0135\uffb9\u0136\uffb9\u0137\uffb9\u0138\uffb9" +
    "\u0139\uffb9\u013a\uffb9\u013b\uffb9\u013c\uffb9\u013d\uffb9\u013e\uffb9\u013f" +
    "\uffb9\u0140\uffb9\001\002\000\274\024\uff91\025\uff91\026\uff91" +
    "\027\uff91\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91\035" +
    "\uff91\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91" +
    "\044\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91\052" +
    "\uff91\053\uff91\054\uff91\055\uff91\056\uff91\057\uff91\060\uff91" +
    "\061\uff91\062\uff91\063\uff91\064\uff91\065\uff91\066\uff91\067" +
    "\uff91\070\uff91\071\uff91\072\uff91\073\uff91\074\uff91\075\uff91" +
    "\076\uff91\077\uff91\100\uff91\101\uff91\102\uff91\103\uff91\104" +
    "\uff91\105\uff91\106\uff91\107\uff91\110\uff91\111\uff91\112\uff91" +
    "\113\uff91\114\uff91\115\uff91\116\uff91\117\uff91\120\uff91\121" +
    "\uff91\122\uff91\123\uff91\124\uff91\125\uff91\126\uff91\127\uff91" +
    "\130\uff91\131\uff91\132\uff91\133\uff91\134\uff91\135\uff91\136" +
    "\uff91\137\uff91\140\uff91\141\uff91\142\uff91\143\uff91\144\uff91" +
    "\u0135\uff91\u0136\uff91\u0137\uff91\u0138\uff91\u0139\uff91\u013a\uff91\u013b" +
    "\uff91\u013c\uff91\u013d\uff91\u013e\uff91\u013f\uff91\u0140\uff91\001\002" +
    "\000\032\u0135\163\u0136\216\u0137\243\u0138\150\u0139\130\u013a" +
    "\151\u013b\273\u013c\265\u013d\225\u013e\147\u013f\145\u0140\227" +
    "\001\002\000\036\002\uff54\u012a\uff54\u012b\uff54\u012c\uff54\u012d" +
    "\uff54\u012e\uff54\u012f\uff54\u0130\uff54\u0131\uff54\u0132\uff54\u0133\uff54" +
    "\u0134\uff54\u0142\uff54\u0143\uff54\001\002\000\274\024\uff85\025" +
    "\uff85\026\uff85\027\uff85\030\uff85\031\uff85\032\uff85\033\uff85" +
    "\034\uff85\035\uff85\036\uff85\037\uff85\040\uff85\041\uff85\042" +
    "\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85\050\uff85" +
    "\051\uff85\052\uff85\053\uff85\054\uff85\055\uff85\056\uff85\057" +
    "\uff85\060\uff85\061\uff85\062\uff85\063\uff85\064\uff85\065\uff85" +
    "\066\uff85\067\uff85\070\uff85\071\uff85\072\uff85\073\uff85\074" +
    "\uff85\075\uff85\076\uff85\077\uff85\100\uff85\101\uff85\102\uff85" +
    "\103\uff85\104\uff85\105\uff85\106\uff85\107\uff85\110\uff85\111" +
    "\uff85\112\uff85\113\uff85\114\uff85\115\uff85\116\uff85\117\uff85" +
    "\120\uff85\121\uff85\122\uff85\123\uff85\124\uff85\125\uff85\126" +
    "\uff85\127\uff85\130\uff85\131\uff85\132\uff85\133\uff85\134\uff85" +
    "\135\uff85\136\uff85\137\uff85\140\uff85\141\uff85\142\uff85\143" +
    "\uff85\144\uff85\u0135\uff85\u0136\uff85\u0137\uff85\u0138\uff85\u0139\uff85" +
    "\u013a\uff85\u013b\uff85\u013c\uff85\u013d\uff85\u013e\uff85\u013f\uff85\u0140" +
    "\uff85\001\002\000\036\002\uff50\u012a\uff50\u012b\uff50\u012c\uff50" +
    "\u012d\uff50\u012e\uff50\u012f\uff50\u0130\uff50\u0131\uff50\u0132\uff50\u0133" +
    "\uff50\u0134\uff50\u0142\uff50\u0143\uff50\001\002\000\274\024\uffad" +
    "\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033" +
    "\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad" +
    "\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050" +
    "\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad" +
    "\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad\064\uffad\065" +
    "\uffad\066\uffad\067\uffad\070\uffad\071\uffad\072\uffad\073\uffad" +
    "\074\uffad\075\uffad\076\uffad\077\uffad\100\uffad\101\uffad\102" +
    "\uffad\103\uffad\104\uffad\105\uffad\106\uffad\107\uffad\110\uffad" +
    "\111\uffad\112\uffad\113\uffad\114\uffad\115\uffad\116\uffad\117" +
    "\uffad\120\uffad\121\uffad\122\uffad\123\uffad\124\uffad\125\uffad" +
    "\126\uffad\127\uffad\130\uffad\131\uffad\132\uffad\133\uffad\134" +
    "\uffad\135\uffad\136\uffad\137\uffad\140\uffad\141\uffad\142\uffad" +
    "\143\uffad\144\uffad\u0135\uffad\u0136\uffad\u0137\uffad\u0138\uffad\u0139" +
    "\uffad\u013a\uffad\u013b\uffad\u013c\uffad\u013d\uffad\u013e\uffad\u013f\uffad" +
    "\u0140\uffad\001\002\000\036\002\uff78\u012a\uff78\u012b\uff78\u012c" +
    "\uff78\u012d\uff78\u012e\uff78\u012f\uff78\u0130\uff78\u0131\uff78\u0132\uff78" +
    "\u0133\uff78\u0134\uff78\u0142\uff78\u0143\uff78\001\002\000\274\024" +
    "\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b" +
    "\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041" +
    "\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b" +
    "\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\056" +
    "\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\063\uff8b\064\uff8b" +
    "\065\uff8b\066\uff8b\067\uff8b\070\uff8b\071\uff8b\072\uff8b\073" +
    "\uff8b\074\uff8b\075\uff8b\076\uff8b\077\uff8b\100\uff8b\101\uff8b" +
    "\102\uff8b\103\uff8b\104\uff8b\105\uff8b\106\uff8b\107\uff8b\110" +
    "\uff8b\111\uff8b\112\uff8b\113\uff8b\114\uff8b\115\uff8b\116\uff8b" +
    "\117\uff8b\120\uff8b\121\uff8b\122\uff8b\123\uff8b\124\uff8b\125" +
    "\uff8b\126\uff8b\127\uff8b\130\uff8b\131\uff8b\132\uff8b\133\uff8b" +
    "\134\uff8b\135\uff8b\136\uff8b\137\uff8b\140\uff8b\141\uff8b\142" +
    "\uff8b\143\uff8b\144\uff8b\u0135\uff8b\u0136\uff8b\u0137\uff8b\u0138\uff8b" +
    "\u0139\uff8b\u013a\uff8b\u013b\uff8b\u013c\uff8b\u013d\uff8b\u013e\uff8b\u013f" +
    "\uff8b\u0140\uff8b\001\002\000\274\024\uffa9\025\uffa9\026\uffa9" +
    "\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035" +
    "\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9" +
    "\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052" +
    "\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9" +
    "\061\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067" +
    "\uffa9\070\uffa9\071\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9" +
    "\076\uffa9\077\uffa9\100\uffa9\101\uffa9\102\uffa9\103\uffa9\104" +
    "\uffa9\105\uffa9\106\uffa9\107\uffa9\110\uffa9\111\uffa9\112\uffa9" +
    "\113\uffa9\114\uffa9\115\uffa9\116\uffa9\117\uffa9\120\uffa9\121" +
    "\uffa9\122\uffa9\123\uffa9\124\uffa9\125\uffa9\126\uffa9\127\uffa9" +
    "\130\uffa9\131\uffa9\132\uffa9\133\uffa9\134\uffa9\135\uffa9\136" +
    "\uffa9\137\uffa9\140\uffa9\141\uffa9\142\uffa9\143\uffa9\144\uffa9" +
    "\u0135\uffa9\u0136\uffa9\u0137\uffa9\u0138\uffa9\u0139\uffa9\u013a\uffa9\u013b" +
    "\uffa9\u013c\uffa9\u013d\uffa9\u013e\uffa9\u013f\uffa9\u0140\uffa9\001\002" +
    "\000\274\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98\031" +
    "\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98" +
    "\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046" +
    "\uff98\047\uff98\050\uff98\051\uff98\052\uff98\053\uff98\054\uff98" +
    "\055\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062\uff98\063" +
    "\uff98\064\uff98\065\uff98\066\uff98\067\uff98\070\uff98\071\uff98" +
    "\072\uff98\073\uff98\074\uff98\075\uff98\076\uff98\077\uff98\100" +
    "\uff98\101\uff98\102\uff98\103\uff98\104\uff98\105\uff98\106\uff98" +
    "\107\uff98\110\uff98\111\uff98\112\uff98\113\uff98\114\uff98\115" +
    "\uff98\116\uff98\117\uff98\120\uff98\121\uff98\122\uff98\123\uff98" +
    "\124\uff98\125\uff98\126\uff98\127\uff98\130\uff98\131\uff98\132" +
    "\uff98\133\uff98\134\uff98\135\uff98\136\uff98\137\uff98\140\uff98" +
    "\141\uff98\142\uff98\143\uff98\144\uff98\u0135\uff98\u0136\uff98\u0137" +
    "\uff98\u0138\uff98\u0139\uff98\u013a\uff98\u013b\uff98\u013c\uff98\u013d\uff98" +
    "\u013e\uff98\u013f\uff98\u0140\uff98\001\002\000\036\002\uff63\u012a" +
    "\uff63\u012b\uff63\u012c\uff63\u012d\uff63\u012e\uff63\u012f\uff63\u0130\uff63" +
    "\u0131\uff63\u0132\uff63\u0133\uff63\u0134\uff63\u0142\uff63\u0143\uff63\001" +
    "\002\000\036\002\uff76\u012a\uff76\u012b\uff76\u012c\uff76\u012d\uff76" +
    "\u012e\uff76\u012f\uff76\u0130\uff76\u0131\uff76\u0132\uff76\u0133\uff76\u0134" +
    "\uff76\u0142\uff76\u0143\uff76\001\002\000\036\002\uff5d\u012a\uff5d" +
    "\u012b\uff5d\u012c\uff5d\u012d\uff5d\u012e\uff5d\u012f\uff5d\u0130\uff5d\u0131" +
    "\uff5d\u0132\uff5d\u0133\uff5d\u0134\uff5d\u0142\uff5d\u0143\uff5d\001\002" +
    "\000\036\002\uff5e\u012a\uff5e\u012b\uff5e\u012c\uff5e\u012d\uff5e\u012e" +
    "\uff5e\u012f\uff5e\u0130\uff5e\u0131\uff5e\u0132\uff5e\u0133\uff5e\u0134\uff5e" +
    "\u0142\uff5e\u0143\uff5e\001\002\000\274\024\uff96\025\uff96\026" +
    "\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96" +
    "\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043" +
    "\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051\uff96" +
    "\052\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057\uff96\060" +
    "\uff96\061\uff96\062\uff96\063\uff96\064\uff96\065\uff96\066\uff96" +
    "\067\uff96\070\uff96\071\uff96\072\uff96\073\uff96\074\uff96\075" +
    "\uff96\076\uff96\077\uff96\100\uff96\101\uff96\102\uff96\103\uff96" +
    "\104\uff96\105\uff96\106\uff96\107\uff96\110\uff96\111\uff96\112" +
    "\uff96\113\uff96\114\uff96\115\uff96\116\uff96\117\uff96\120\uff96" +
    "\121\uff96\122\uff96\123\uff96\124\uff96\125\uff96\126\uff96\127" +
    "\uff96\130\uff96\131\uff96\132\uff96\133\uff96\134\uff96\135\uff96" +
    "\136\uff96\137\uff96\140\uff96\141\uff96\142\uff96\143\uff96\144" +
    "\uff96\u0135\uff96\u0136\uff96\u0137\uff96\u0138\uff96\u0139\uff96\u013a\uff96" +
    "\u013b\uff96\u013c\uff96\u013d\uff96\u013e\uff96\u013f\uff96\u0140\uff96\001" +
    "\002\000\036\002\uff55\u012a\uff55\u012b\uff55\u012c\uff55\u012d\uff55" +
    "\u012e\uff55\u012f\uff55\u0130\uff55\u0131\uff55\u0132\uff55\u0133\uff55\u0134" +
    "\uff55\u0142\uff55\u0143\uff55\001\002\000\274\024\uffab\025\uffab" +
    "\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034" +
    "\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab" +
    "\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051" +
    "\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab" +
    "\060\uffab\061\uffab\062\uffab\063\uffab\064\uffab\065\uffab\066" +
    "\uffab\067\uffab\070\uffab\071\uffab\072\uffab\073\uffab\074\uffab" +
    "\075\uffab\076\uffab\077\uffab\100\uffab\101\uffab\102\uffab\103" +
    "\uffab\104\uffab\105\uffab\106\uffab\107\uffab\110\uffab\111\uffab" +
    "\112\uffab\113\uffab\114\uffab\115\uffab\116\uffab\117\uffab\120" +
    "\uffab\121\uffab\122\uffab\123\uffab\124\uffab\125\uffab\126\uffab" +
    "\127\uffab\130\uffab\131\uffab\132\uffab\133\uffab\134\uffab\135" +
    "\uffab\136\uffab\137\uffab\140\uffab\141\uffab\142\uffab\143\uffab" +
    "\144\uffab\u0135\uffab\u0136\uffab\u0137\uffab\u0138\uffab\u0139\uffab\u013a" +
    "\uffab\u013b\uffab\u013c\uffab\u013d\uffab\u013e\uffab\u013f\uffab\u0140\uffab" +
    "\001\002\000\036\002\uff72\u012a\uff72\u012b\uff72\u012c\uff72\u012d" +
    "\uff72\u012e\uff72\u012f\uff72\u0130\uff72\u0131\uff72\u0132\uff72\u0133\uff72" +
    "\u0134\uff72\u0142\uff72\u0143\uff72\001\002\000\036\002\uffe9\u012a" +
    "\uffe9\u012b\uffe9\u012c\uffe9\u012d\uffe9\u012e\uffe9\u012f\uffe9\u0130\uffe9" +
    "\u0131\uffe9\u0132\uffe9\u0133\uffe9\u0134\uffe9\u0142\uffe9\u0143\uffe9\001" +
    "\002\000\036\002\uff52\u012a\uff52\u012b\uff52\u012c\uff52\u012d\uff52" +
    "\u012e\uff52\u012f\uff52\u0130\uff52\u0131\uff52\u0132\uff52\u0133\uff52\u0134" +
    "\uff52\u0142\uff52\u0143\uff52\001\002\000\036\002\uff64\u012a\uff64" +
    "\u012b\uff64\u012c\uff64\u012d\uff64\u012e\uff64\u012f\uff64\u0130\uff64\u0131" +
    "\uff64\u0132\uff64\u0133\uff64\u0134\uff64\u0142\uff64\u0143\uff64\001\002" +
    "\000\274\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031" +
    "\uff94\032\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94" +
    "\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046" +
    "\uff94\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94" +
    "\055\uff94\056\uff94\057\uff94\060\uff94\061\uff94\062\uff94\063" +
    "\uff94\064\uff94\065\uff94\066\uff94\067\uff94\070\uff94\071\uff94" +
    "\072\uff94\073\uff94\074\uff94\075\uff94\076\uff94\077\uff94\100" +
    "\uff94\101\uff94\102\uff94\103\uff94\104\uff94\105\uff94\106\uff94" +
    "\107\uff94\110\uff94\111\uff94\112\uff94\113\uff94\114\uff94\115" +
    "\uff94\116\uff94\117\uff94\120\uff94\121\uff94\122\uff94\123\uff94" +
    "\124\uff94\125\uff94\126\uff94\127\uff94\130\uff94\131\uff94\132" +
    "\uff94\133\uff94\134\uff94\135\uff94\136\uff94\137\uff94\140\uff94" +
    "\141\uff94\142\uff94\143\uff94\144\uff94\u0135\uff94\u0136\uff94\u0137" +
    "\uff94\u0138\uff94\u0139\uff94\u013a\uff94\u013b\uff94\u013c\uff94\u013d\uff94" +
    "\u013e\uff94\u013f\uff94\u0140\uff94\001\002\000\036\002\uff6f\u012a" +
    "\uff6f\u012b\uff6f\u012c\uff6f\u012d\uff6f\u012e\uff6f\u012f\uff6f\u0130\uff6f" +
    "\u0131\uff6f\u0132\uff6f\u0133\uff6f\u0134\uff6f\u0142\uff6f\u0143\uff6f\001" +
    "\002\000\036\002\uffec\u012a\uffec\u012b\uffec\u012c\uffec\u012d\uffec" +
    "\u012e\uffec\u012f\uffec\u0130\uffec\u0131\uffec\u0132\uffec\u0133\uffec\u0134" +
    "\uffec\u0142\uffec\u0143\uffec\001\002\000\036\002\uff3e\u012a\uff3e" +
    "\u012b\uff3e\u012c\uff3e\u012d\uff3e\u012e\uff3e\u012f\uff3e\u0130\uff3e\u0131" +
    "\uff3e\u0132\uff3e\u0133\uff3e\u0134\uff3e\u0142\uff3e\u0143\uff3e\001\002" +
    "\000\036\002\uffe2\u012a\uffe2\u012b\uffe2\u012c\uffe2\u012d\uffe2\u012e" +
    "\uffe2\u012f\uffe2\u0130\uffe2\u0131\uffe2\u0132\uffe2\u0133\uffe2\u0134\uffe2" +
    "\u0142\uffe2\u0143\uffe2\001\002\000\274\024\uff9c\025\uff9c\026" +
    "\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c" +
    "\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043" +
    "\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c" +
    "\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060" +
    "\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c" +
    "\067\uff9c\070\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c\075" +
    "\uff9c\076\uff9c\077\uff9c\100\uff9c\101\uff9c\102\uff9c\103\uff9c" +
    "\104\uff9c\105\uff9c\106\uff9c\107\uff9c\110\uff9c\111\uff9c\112" +
    "\uff9c\113\uff9c\114\uff9c\115\uff9c\116\uff9c\117\uff9c\120\uff9c" +
    "\121\uff9c\122\uff9c\123\uff9c\124\uff9c\125\uff9c\126\uff9c\127" +
    "\uff9c\130\uff9c\131\uff9c\132\uff9c\133\uff9c\134\uff9c\135\uff9c" +
    "\136\uff9c\137\uff9c\140\uff9c\141\uff9c\142\uff9c\143\uff9c\144" +
    "\uff9c\u0135\uff9c\u0136\uff9c\u0137\uff9c\u0138\uff9c\u0139\uff9c\u013a\uff9c" +
    "\u013b\uff9c\u013c\uff9c\u013d\uff9c\u013e\uff9c\u013f\uff9c\u0140\uff9c\001" +
    "\002\000\036\002\uffdf\u012a\uffdf\u012b\uffdf\u012c\uffdf\u012d\uffdf" +
    "\u012e\uffdf\u012f\uffdf\u0130\uffdf\u0131\uffdf\u0132\uffdf\u0133\uffdf\u0134" +
    "\uffdf\u0142\uffdf\u0143\uffdf\001\002\000\274\024\uff7e\025\uff7e" +
    "\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e\034" +
    "\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e" +
    "\043\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e\050\uff7e\051" +
    "\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e\057\uff7e" +
    "\060\uff7e\061\uff7e\062\uff7e\063\uff7e\064\uff7e\065\uff7e\066" +
    "\uff7e\067\uff7e\070\uff7e\071\uff7e\072\uff7e\073\uff7e\074\uff7e" +
    "\075\uff7e\076\uff7e\077\uff7e\100\uff7e\101\uff7e\102\uff7e\103" +
    "\uff7e\104\uff7e\105\uff7e\106\uff7e\107\uff7e\110\uff7e\111\uff7e" +
    "\112\uff7e\113\uff7e\114\uff7e\115\uff7e\116\uff7e\117\uff7e\120" +
    "\uff7e\121\uff7e\122\uff7e\123\uff7e\124\uff7e\125\uff7e\126\uff7e" +
    "\127\uff7e\130\uff7e\131\uff7e\132\uff7e\133\uff7e\134\uff7e\135" +
    "\uff7e\136\uff7e\137\uff7e\140\uff7e\141\uff7e\142\uff7e\143\uff7e" +
    "\144\uff7e\u0135\uff7e\u0136\uff7e\u0137\uff7e\u0138\uff7e\u0139\uff7e\u013a" +
    "\uff7e\u013b\uff7e\u013c\uff7e\u013d\uff7e\u013e\uff7e\u013f\uff7e\u0140\uff7e" +
    "\001\002\000\274\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030" +
    "\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d" +
    "\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045" +
    "\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d" +
    "\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d\062" +
    "\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d\070\uff9d" +
    "\071\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d\077" +
    "\uff9d\100\uff9d\101\uff9d\102\uff9d\103\uff9d\104\uff9d\105\uff9d" +
    "\106\uff9d\107\uff9d\110\uff9d\111\uff9d\112\uff9d\113\uff9d\114" +
    "\uff9d\115\uff9d\116\uff9d\117\uff9d\120\uff9d\121\uff9d\122\uff9d" +
    "\123\uff9d\124\uff9d\125\uff9d\126\uff9d\127\uff9d\130\uff9d\131" +
    "\uff9d\132\uff9d\133\uff9d\134\uff9d\135\uff9d\136\uff9d\137\uff9d" +
    "\140\uff9d\141\uff9d\142\uff9d\143\uff9d\144\uff9d\u0135\uff9d\u0136" +
    "\uff9d\u0137\uff9d\u0138\uff9d\u0139\uff9d\u013a\uff9d\u013b\uff9d\u013c\uff9d" +
    "\u013d\uff9d\u013e\uff9d\u013f\uff9d\u0140\uff9d\001\002\000\036\002" +
    "\uff46\u012a\uff46\u012b\uff46\u012c\uff46\u012d\uff46\u012e\uff46\u012f\uff46" +
    "\u0130\uff46\u0131\uff46\u0132\uff46\u0133\uff46\u0134\uff46\u0142\uff46\u0143" +
    "\uff46\001\002\000\274\024\uffa4\025\uffa4\026\uffa4\027\uffa4" +
    "\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036" +
    "\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4" +
    "\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053" +
    "\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4" +
    "\062\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\070" +
    "\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4\076\uffa4" +
    "\077\uffa4\100\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4\105" +
    "\uffa4\106\uffa4\107\uffa4\110\uffa4\111\uffa4\112\uffa4\113\uffa4" +
    "\114\uffa4\115\uffa4\116\uffa4\117\uffa4\120\uffa4\121\uffa4\122" +
    "\uffa4\123\uffa4\124\uffa4\125\uffa4\126\uffa4\127\uffa4\130\uffa4" +
    "\131\uffa4\132\uffa4\133\uffa4\134\uffa4\135\uffa4\136\uffa4\137" +
    "\uffa4\140\uffa4\141\uffa4\142\uffa4\143\uffa4\144\uffa4\u0135\uffa4" +
    "\u0136\uffa4\u0137\uffa4\u0138\uffa4\u0139\uffa4\u013a\uffa4\u013b\uffa4\u013c" +
    "\uffa4\u013d\uffa4\u013e\uffa4\u013f\uffa4\u0140\uffa4\001\002\000\274" +
    "\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032" +
    "\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93" +
    "\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93\047" +
    "\uff93\050\uff93\051\uff93\052\uff93\053\uff93\054\uff93\055\uff93" +
    "\056\uff93\057\uff93\060\uff93\061\uff93\062\uff93\063\uff93\064" +
    "\uff93\065\uff93\066\uff93\067\uff93\070\uff93\071\uff93\072\uff93" +
    "\073\uff93\074\uff93\075\uff93\076\uff93\077\uff93\100\uff93\101" +
    "\uff93\102\uff93\103\uff93\104\uff93\105\uff93\106\uff93\107\uff93" +
    "\110\uff93\111\uff93\112\uff93\113\uff93\114\uff93\115\uff93\116" +
    "\uff93\117\uff93\120\uff93\121\uff93\122\uff93\123\uff93\124\uff93" +
    "\125\uff93\126\uff93\127\uff93\130\uff93\131\uff93\132\uff93\133" +
    "\uff93\134\uff93\135\uff93\136\uff93\137\uff93\140\uff93\141\uff93" +
    "\142\uff93\143\uff93\144\uff93\u0135\uff93\u0136\uff93\u0137\uff93\u0138" +
    "\uff93\u0139\uff93\u013a\uff93\u013b\uff93\u013c\uff93\u013d\uff93\u013e\uff93" +
    "\u013f\uff93\u0140\uff93\001\002\000\036\002\uffed\u012a\uffed\u012b" +
    "\uffed\u012c\uffed\u012d\uffed\u012e\uffed\u012f\uffed\u0130\uffed\u0131\uffed" +
    "\u0132\uffed\u0133\uffed\u0134\uffed\u0142\uffed\u0143\uffed\001\002\000" +
    "\274\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a" +
    "\032\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040" +
    "\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a" +
    "\047\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\055" +
    "\uff8a\056\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a\063\uff8a" +
    "\064\uff8a\065\uff8a\066\uff8a\067\uff8a\070\uff8a\071\uff8a\072" +
    "\uff8a\073\uff8a\074\uff8a\075\uff8a\076\uff8a\077\uff8a\100\uff8a" +
    "\101\uff8a\102\uff8a\103\uff8a\104\uff8a\105\uff8a\106\uff8a\107" +
    "\uff8a\110\uff8a\111\uff8a\112\uff8a\113\uff8a\114\uff8a\115\uff8a" +
    "\116\uff8a\117\uff8a\120\uff8a\121\uff8a\122\uff8a\123\uff8a\124" +
    "\uff8a\125\uff8a\126\uff8a\127\uff8a\130\uff8a\131\uff8a\132\uff8a" +
    "\133\uff8a\134\uff8a\135\uff8a\136\uff8a\137\uff8a\140\uff8a\141" +
    "\uff8a\142\uff8a\143\uff8a\144\uff8a\u0135\uff8a\u0136\uff8a\u0137\uff8a" +
    "\u0138\uff8a\u0139\uff8a\u013a\uff8a\u013b\uff8a\u013c\uff8a\u013d\uff8a\u013e" +
    "\uff8a\u013f\uff8a\u0140\uff8a\001\002\000\274\024\uffb5\025\uffb5" +
    "\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034" +
    "\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5" +
    "\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051" +
    "\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5" +
    "\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\066" +
    "\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5" +
    "\075\uffb5\076\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5\103" +
    "\uffb5\104\uffb5\105\uffb5\106\uffb5\107\uffb5\110\uffb5\111\uffb5" +
    "\112\uffb5\113\uffb5\114\uffb5\115\uffb5\116\uffb5\117\uffb5\120" +
    "\uffb5\121\uffb5\122\uffb5\123\uffb5\124\uffb5\125\uffb5\126\uffb5" +
    "\127\uffb5\130\uffb5\131\uffb5\132\uffb5\133\uffb5\134\uffb5\135" +
    "\uffb5\136\uffb5\137\uffb5\140\uffb5\141\uffb5\142\uffb5\143\uffb5" +
    "\144\uffb5\u0135\uffb5\u0136\uffb5\u0137\uffb5\u0138\uffb5\u0139\uffb5\u013a" +
    "\uffb5\u013b\uffb5\u013c\uffb5\u013d\uffb5\u013e\uffb5\u013f\uffb5\u0140\uffb5" +
    "\001\002\000\274\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030" +
    "\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5" +
    "\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045" +
    "\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5" +
    "\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062" +
    "\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5" +
    "\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5\077" +
    "\uffa5\100\uffa5\101\uffa5\102\uffa5\103\uffa5\104\uffa5\105\uffa5" +
    "\106\uffa5\107\uffa5\110\uffa5\111\uffa5\112\uffa5\113\uffa5\114" +
    "\uffa5\115\uffa5\116\uffa5\117\uffa5\120\uffa5\121\uffa5\122\uffa5" +
    "\123\uffa5\124\uffa5\125\uffa5\126\uffa5\127\uffa5\130\uffa5\131" +
    "\uffa5\132\uffa5\133\uffa5\134\uffa5\135\uffa5\136\uffa5\137\uffa5" +
    "\140\uffa5\141\uffa5\142\uffa5\143\uffa5\144\uffa5\u0135\uffa5\u0136" +
    "\uffa5\u0137\uffa5\u0138\uffa5\u0139\uffa5\u013a\uffa5\u013b\uffa5\u013c\uffa5" +
    "\u013d\uffa5\u013e\uffa5\u013f\uffa5\u0140\uffa5\001\002\000\036\002" +
    "\uff40\u012a\uff40\u012b\uff40\u012c\uff40\u012d\uff40\u012e\uff40\u012f\uff40" +
    "\u0130\uff40\u0131\uff40\u0132\uff40\u0133\uff40\u0134\uff40\u0142\uff40\u0143" +
    "\uff40\001\002\000\036\002\uff59\u012a\uff59\u012b\uff59\u012c\uff59" +
    "\u012d\uff59\u012e\uff59\u012f\uff59\u0130\uff59\u0131\uff59\u0132\uff59\u0133" +
    "\uff59\u0134\uff59\u0142\uff59\u0143\uff59\001\002\000\036\002\uffe8" +
    "\u012a\uffe8\u012b\uffe8\u012c\uffe8\u012d\uffe8\u012e\uffe8\u012f\uffe8\u0130" +
    "\uffe8\u0131\uffe8\u0132\uffe8\u0133\uffe8\u0134\uffe8\u0142\uffe8\u0143\uffe8" +
    "\001\002\000\036\002\uff4e\u012a\uff4e\u012b\uff4e\u012c\uff4e\u012d" +
    "\uff4e\u012e\uff4e\u012f\uff4e\u0130\uff4e\u0131\uff4e\u0132\uff4e\u0133\uff4e" +
    "\u0134\uff4e\u0142\uff4e\u0143\uff4e\001\002\000\036\002\uff4c\u012a" +
    "\uff4c\u012b\uff4c\u012c\uff4c\u012d\uff4c\u012e\uff4c\u012f\uff4c\u0130\uff4c" +
    "\u0131\uff4c\u0132\uff4c\u0133\uff4c\u0134\uff4c\u0142\uff4c\u0143\uff4c\001" +
    "\002\000\274\024\uff84\025\uff84\026\uff84\027\uff84\030\uff84" +
    "\031\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84\037" +
    "\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84" +
    "\046\uff84\047\uff84\050\uff84\051\uff84\052\uff84\053\uff84\054" +
    "\uff84\055\uff84\056\uff84\057\uff84\060\uff84\061\uff84\062\uff84" +
    "\063\uff84\064\uff84\065\uff84\066\uff84\067\uff84\070\uff84\071" +
    "\uff84\072\uff84\073\uff84\074\uff84\075\uff84\076\uff84\077\uff84" +
    "\100\uff84\101\uff84\102\uff84\103\uff84\104\uff84\105\uff84\106" +
    "\uff84\107\uff84\110\uff84\111\uff84\112\uff84\113\uff84\114\uff84" +
    "\115\uff84\116\uff84\117\uff84\120\uff84\121\uff84\122\uff84\123" +
    "\uff84\124\uff84\125\uff84\126\uff84\127\uff84\130\uff84\131\uff84" +
    "\132\uff84\133\uff84\134\uff84\135\uff84\136\uff84\137\uff84\140" +
    "\uff84\141\uff84\142\uff84\143\uff84\144\uff84\u0135\uff84\u0136\uff84" +
    "\u0137\uff84\u0138\uff84\u0139\uff84\u013a\uff84\u013b\uff84\u013c\uff84\u013d" +
    "\uff84\u013e\uff84\u013f\uff84\u0140\uff84\001\002\000\036\002\uff41" +
    "\u012a\uff41\u012b\uff41\u012c\uff41\u012d\uff41\u012e\uff41\u012f\uff41\u0130" +
    "\uff41\u0131\uff41\u0132\uff41\u0133\uff41\u0134\uff41\u0142\uff41\u0143\uff41" +
    "\001\002\000\274\024\uff97\025\uff97\026\uff97\027\uff97\030" +
    "\uff97\031\uff97\032\uff97\033\uff97\034\uff97\035\uff97\036\uff97" +
    "\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045" +
    "\uff97\046\uff97\047\uff97\050\uff97\051\uff97\052\uff97\053\uff97" +
    "\054\uff97\055\uff97\056\uff97\057\uff97\060\uff97\061\uff97\062" +
    "\uff97\063\uff97\064\uff97\065\uff97\066\uff97\067\uff97\070\uff97" +
    "\071\uff97\072\uff97\073\uff97\074\uff97\075\uff97\076\uff97\077" +
    "\uff97\100\uff97\101\uff97\102\uff97\103\uff97\104\uff97\105\uff97" +
    "\106\uff97\107\uff97\110\uff97\111\uff97\112\uff97\113\uff97\114" +
    "\uff97\115\uff97\116\uff97\117\uff97\120\uff97\121\uff97\122\uff97" +
    "\123\uff97\124\uff97\125\uff97\126\uff97\127\uff97\130\uff97\131" +
    "\uff97\132\uff97\133\uff97\134\uff97\135\uff97\136\uff97\137\uff97" +
    "\140\uff97\141\uff97\142\uff97\143\uff97\144\uff97\u0135\uff97\u0136" +
    "\uff97\u0137\uff97\u0138\uff97\u0139\uff97\u013a\uff97\u013b\uff97\u013c\uff97" +
    "\u013d\uff97\u013e\uff97\u013f\uff97\u0140\uff97\001\002\000\274\024" +
    "\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e" +
    "\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e\040\uff8e\041" +
    "\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e" +
    "\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e\056" +
    "\uff8e\057\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e\064\uff8e" +
    "\065\uff8e\066\uff8e\067\uff8e\070\uff8e\071\uff8e\072\uff8e\073" +
    "\uff8e\074\uff8e\075\uff8e\076\uff8e\077\uff8e\100\uff8e\101\uff8e" +
    "\102\uff8e\103\uff8e\104\uff8e\105\uff8e\106\uff8e\107\uff8e\110" +
    "\uff8e\111\uff8e\112\uff8e\113\uff8e\114\uff8e\115\uff8e\116\uff8e" +
    "\117\uff8e\120\uff8e\121\uff8e\122\uff8e\123\uff8e\124\uff8e\125" +
    "\uff8e\126\uff8e\127\uff8e\130\uff8e\131\uff8e\132\uff8e\133\uff8e" +
    "\134\uff8e\135\uff8e\136\uff8e\137\uff8e\140\uff8e\141\uff8e\142" +
    "\uff8e\143\uff8e\144\uff8e\u0135\uff8e\u0136\uff8e\u0137\uff8e\u0138\uff8e" +
    "\u0139\uff8e\u013a\uff8e\u013b\uff8e\u013c\uff8e\u013d\uff8e\u013e\uff8e\u013f" +
    "\uff8e\u0140\uff8e\001\002\000\274\024\uffb8\025\uffb8\026\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052" +
    "\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8" +
    "\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8\067" +
    "\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8" +
    "\076\uffb8\077\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8\104" +
    "\uffb8\105\uffb8\106\uffb8\107\uffb8\110\uffb8\111\uffb8\112\uffb8" +
    "\113\uffb8\114\uffb8\115\uffb8\116\uffb8\117\uffb8\120\uffb8\121" +
    "\uffb8\122\uffb8\123\uffb8\124\uffb8\125\uffb8\126\uffb8\127\uffb8" +
    "\130\uffb8\131\uffb8\132\uffb8\133\uffb8\134\uffb8\135\uffb8\136" +
    "\uffb8\137\uffb8\140\uffb8\141\uffb8\142\uffb8\143\uffb8\144\uffb8" +
    "\u0135\uffb8\u0136\uffb8\u0137\uffb8\u0138\uffb8\u0139\uffb8\u013a\uffb8\u013b" +
    "\uffb8\u013c\uffb8\u013d\uffb8\u013e\uffb8\u013f\uffb8\u0140\uffb8\001\002" +
    "\000\274\024\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b\031" +
    "\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b\036\uff7b\037\uff7b" +
    "\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b\046" +
    "\uff7b\047\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b\054\uff7b" +
    "\055\uff7b\056\uff7b\057\uff7b\060\uff7b\061\uff7b\062\uff7b\063" +
    "\uff7b\064\uff7b\065\uff7b\066\uff7b\067\uff7b\070\uff7b\071\uff7b" +
    "\072\uff7b\073\uff7b\074\uff7b\075\uff7b\076\uff7b\077\uff7b\100" +
    "\uff7b\101\uff7b\102\uff7b\103\uff7b\104\uff7b\105\uff7b\106\uff7b" +
    "\107\uff7b\110\uff7b\111\uff7b\112\uff7b\113\uff7b\114\uff7b\115" +
    "\uff7b\116\uff7b\117\uff7b\120\uff7b\121\uff7b\122\uff7b\123\uff7b" +
    "\124\uff7b\125\uff7b\126\uff7b\127\uff7b\130\uff7b\131\uff7b\132" +
    "\uff7b\133\uff7b\134\uff7b\135\uff7b\136\uff7b\137\uff7b\140\uff7b" +
    "\141\uff7b\142\uff7b\143\uff7b\144\uff7b\u0135\uff7b\u0136\uff7b\u0137" +
    "\uff7b\u0138\uff7b\u0139\uff7b\u013a\uff7b\u013b\uff7b\u013c\uff7b\u013d\uff7b" +
    "\u013e\uff7b\u013f\uff7b\u0140\uff7b\001\002\000\036\002\uff66\u012a" +
    "\uff66\u012b\uff66\u012c\uff66\u012d\uff66\u012e\uff66\u012f\uff66\u0130\uff66" +
    "\u0131\uff66\u0132\uff66\u0133\uff66\u0134\uff66\u0142\uff66\u0143\uff66\001" +
    "\002\000\036\002\uff58\u012a\uff58\u012b\uff58\u012c\uff58\u012d\uff58" +
    "\u012e\uff58\u012f\uff58\u0130\uff58\u0131\uff58\u0132\uff58\u0133\uff58\u0134" +
    "\uff58\u0142\uff58\u0143\uff58\001\002\000\274\024\uff9f\025\uff9f" +
    "\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034" +
    "\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f" +
    "\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051" +
    "\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f" +
    "\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066" +
    "\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f\074\uff9f" +
    "\075\uff9f\076\uff9f\077\uff9f\100\uff9f\101\uff9f\102\uff9f\103" +
    "\uff9f\104\uff9f\105\uff9f\106\uff9f\107\uff9f\110\uff9f\111\uff9f" +
    "\112\uff9f\113\uff9f\114\uff9f\115\uff9f\116\uff9f\117\uff9f\120" +
    "\uff9f\121\uff9f\122\uff9f\123\uff9f\124\uff9f\125\uff9f\126\uff9f" +
    "\127\uff9f\130\uff9f\131\uff9f\132\uff9f\133\uff9f\134\uff9f\135" +
    "\uff9f\136\uff9f\137\uff9f\140\uff9f\141\uff9f\142\uff9f\143\uff9f" +
    "\144\uff9f\u0135\uff9f\u0136\uff9f\u0137\uff9f\u0138\uff9f\u0139\uff9f\u013a" +
    "\uff9f\u013b\uff9f\u013c\uff9f\u013d\uff9f\u013e\uff9f\u013f\uff9f\u0140\uff9f" +
    "\001\002\000\036\002\uff60\u012a\uff60\u012b\uff60\u012c\uff60\u012d" +
    "\uff60\u012e\uff60\u012f\uff60\u0130\uff60\u0131\uff60\u0132\uff60\u0133\uff60" +
    "\u0134\uff60\u0142\uff60\u0143\uff60\001\002\000\274\024\uffac\025" +
    "\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac" +
    "\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042" +
    "\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac" +
    "\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057" +
    "\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac" +
    "\066\uffac\067\uffac\070\uffac\071\uffac\072\uffac\073\uffac\074" +
    "\uffac\075\uffac\076\uffac\077\uffac\100\uffac\101\uffac\102\uffac" +
    "\103\uffac\104\uffac\105\uffac\106\uffac\107\uffac\110\uffac\111" +
    "\uffac\112\uffac\113\uffac\114\uffac\115\uffac\116\uffac\117\uffac" +
    "\120\uffac\121\uffac\122\uffac\123\uffac\124\uffac\125\uffac\126" +
    "\uffac\127\uffac\130\uffac\131\uffac\132\uffac\133\uffac\134\uffac" +
    "\135\uffac\136\uffac\137\uffac\140\uffac\141\uffac\142\uffac\143" +
    "\uffac\144\uffac\u0135\uffac\u0136\uffac\u0137\uffac\u0138\uffac\u0139\uffac" +
    "\u013a\uffac\u013b\uffac\u013c\uffac\u013d\uffac\u013e\uffac\u013f\uffac\u0140" +
    "\uffac\001\002\000\274\024\uff92\025\uff92\026\uff92\027\uff92" +
    "\030\uff92\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92\036" +
    "\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92" +
    "\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052\uff92\053" +
    "\uff92\054\uff92\055\uff92\056\uff92\057\uff92\060\uff92\061\uff92" +
    "\062\uff92\063\uff92\064\uff92\065\uff92\066\uff92\067\uff92\070" +
    "\uff92\071\uff92\072\uff92\073\uff92\074\uff92\075\uff92\076\uff92" +
    "\077\uff92\100\uff92\101\uff92\102\uff92\103\uff92\104\uff92\105" +
    "\uff92\106\uff92\107\uff92\110\uff92\111\uff92\112\uff92\113\uff92" +
    "\114\uff92\115\uff92\116\uff92\117\uff92\120\uff92\121\uff92\122" +
    "\uff92\123\uff92\124\uff92\125\uff92\126\uff92\127\uff92\130\uff92" +
    "\131\uff92\132\uff92\133\uff92\134\uff92\135\uff92\136\uff92\137" +
    "\uff92\140\uff92\141\uff92\142\uff92\143\uff92\144\uff92\u0135\uff92" +
    "\u0136\uff92\u0137\uff92\u0138\uff92\u0139\uff92\u013a\uff92\u013b\uff92\u013c" +
    "\uff92\u013d\uff92\u013e\uff92\u013f\uff92\u0140\uff92\001\002\000\036" +
    "\002\uff65\u012a\uff65\u012b\uff65\u012c\uff65\u012d\uff65\u012e\uff65\u012f" +
    "\uff65\u0130\uff65\u0131\uff65\u0132\uff65\u0133\uff65\u0134\uff65\u0142\uff65" +
    "\u0143\uff65\001\002\000\036\002\uff6d\u012a\uff6d\u012b\uff6d\u012c" +
    "\uff6d\u012d\uff6d\u012e\uff6d\u012f\uff6d\u0130\uff6d\u0131\uff6d\u0132\uff6d" +
    "\u0133\uff6d\u0134\uff6d\u0142\uff6d\u0143\uff6d\001\002\000\036\002" +
    "\uff4a\u012a\uff4a\u012b\uff4a\u012c\uff4a\u012d\uff4a\u012e\uff4a\u012f\uff4a" +
    "\u0130\uff4a\u0131\uff4a\u0132\uff4a\u0133\uff4a\u0134\uff4a\u0142\uff4a\u0143" +
    "\uff4a\001\002\000\036\002\uffe3\u012a\uffe3\u012b\uffe3\u012c\uffe3" +
    "\u012d\uffe3\u012e\uffe3\u012f\uffe3\u0130\uffe3\u0131\uffe3\u0132\uffe3\u0133" +
    "\uffe3\u0134\uffe3\u0142\uffe3\u0143\uffe3\001\002\000\274\024\uffa1" +
    "\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033" +
    "\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1" +
    "\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050" +
    "\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1" +
    "\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\065" +
    "\uffa1\066\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1\073\uffa1" +
    "\074\uffa1\075\uffa1\076\uffa1\077\uffa1\100\uffa1\101\uffa1\102" +
    "\uffa1\103\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1\110\uffa1" +
    "\111\uffa1\112\uffa1\113\uffa1\114\uffa1\115\uffa1\116\uffa1\117" +
    "\uffa1\120\uffa1\121\uffa1\122\uffa1\123\uffa1\124\uffa1\125\uffa1" +
    "\126\uffa1\127\uffa1\130\uffa1\131\uffa1\132\uffa1\133\uffa1\134" +
    "\uffa1\135\uffa1\136\uffa1\137\uffa1\140\uffa1\141\uffa1\142\uffa1" +
    "\143\uffa1\144\uffa1\u0135\uffa1\u0136\uffa1\u0137\uffa1\u0138\uffa1\u0139" +
    "\uffa1\u013a\uffa1\u013b\uffa1\u013c\uffa1\u013d\uffa1\u013e\uffa1\u013f\uffa1" +
    "\u0140\uffa1\001\002\000\274\024\uff99\025\uff99\026\uff99\027" +
    "\uff99\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99\035\uff99" +
    "\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044" +
    "\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99" +
    "\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99\060\uff99\061" +
    "\uff99\062\uff99\063\uff99\064\uff99\065\uff99\066\uff99\067\uff99" +
    "\070\uff99\071\uff99\072\uff99\073\uff99\074\uff99\075\uff99\076" +
    "\uff99\077\uff99\100\uff99\101\uff99\102\uff99\103\uff99\104\uff99" +
    "\105\uff99\106\uff99\107\uff99\110\uff99\111\uff99\112\uff99\113" +
    "\uff99\114\uff99\115\uff99\116\uff99\117\uff99\120\uff99\121\uff99" +
    "\122\uff99\123\uff99\124\uff99\125\uff99\126\uff99\127\uff99\130" +
    "\uff99\131\uff99\132\uff99\133\uff99\134\uff99\135\uff99\136\uff99" +
    "\137\uff99\140\uff99\141\uff99\142\uff99\143\uff99\144\uff99\u0135" +
    "\uff99\u0136\uff99\u0137\uff99\u0138\uff99\u0139\uff99\u013a\uff99\u013b\uff99" +
    "\u013c\uff99\u013d\uff99\u013e\uff99\u013f\uff99\u0140\uff99\001\002\000" +
    "\036\002\uff5c\u012a\uff5c\u012b\uff5c\u012c\uff5c\u012d\uff5c\u012e\uff5c" +
    "\u012f\uff5c\u0130\uff5c\u0131\uff5c\u0132\uff5c\u0133\uff5c\u0134\uff5c\u0142" +
    "\uff5c\u0143\uff5c\001\002\000\274\024\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4" +
    "\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052" +
    "\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4" +
    "\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067" +
    "\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4" +
    "\076\uffb4\077\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4\104" +
    "\uffb4\105\uffb4\106\uffb4\107\uffb4\110\uffb4\111\uffb4\112\uffb4" +
    "\113\uffb4\114\uffb4\115\uffb4\116\uffb4\117\uffb4\120\uffb4\121" +
    "\uffb4\122\uffb4\123\uffb4\124\uffb4\125\uffb4\126\uffb4\127\uffb4" +
    "\130\uffb4\131\uffb4\132\uffb4\133\uffb4\134\uffb4\135\uffb4\136" +
    "\uffb4\137\uffb4\140\uffb4\141\uffb4\142\uffb4\143\uffb4\144\uffb4" +
    "\u0135\uffb4\u0136\uffb4\u0137\uffb4\u0138\uffb4\u0139\uffb4\u013a\uffb4\u013b" +
    "\uffb4\u013c\uffb4\u013d\uffb4\u013e\uffb4\u013f\uffb4\u0140\uffb4\001\002" +
    "\000\036\002\uff79\u012a\uff79\u012b\uff79\u012c\uff79\u012d\uff79\u012e" +
    "\uff79\u012f\uff79\u0130\uff79\u0131\uff79\u0132\uff79\u0133\uff79\u0134\uff79" +
    "\u0142\uff79\u0143\uff79\001\002\000\036\002\uffe4\u012a\uffe4\u012b" +
    "\uffe4\u012c\uffe4\u012d\uffe4\u012e\uffe4\u012f\uffe4\u0130\uffe4\u0131\uffe4" +
    "\u0132\uffe4\u0133\uffe4\u0134\uffe4\u0142\uffe4\u0143\uffe4\001\002\000" +
    "\274\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f" +
    "\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040" +
    "\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f" +
    "\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f\054\uff8f\055" +
    "\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f\062\uff8f\063\uff8f" +
    "\064\uff8f\065\uff8f\066\uff8f\067\uff8f\070\uff8f\071\uff8f\072" +
    "\uff8f\073\uff8f\074\uff8f\075\uff8f\076\uff8f\077\uff8f\100\uff8f" +
    "\101\uff8f\102\uff8f\103\uff8f\104\uff8f\105\uff8f\106\uff8f\107" +
    "\uff8f\110\uff8f\111\uff8f\112\uff8f\113\uff8f\114\uff8f\115\uff8f" +
    "\116\uff8f\117\uff8f\120\uff8f\121\uff8f\122\uff8f\123\uff8f\124" +
    "\uff8f\125\uff8f\126\uff8f\127\uff8f\130\uff8f\131\uff8f\132\uff8f" +
    "\133\uff8f\134\uff8f\135\uff8f\136\uff8f\137\uff8f\140\uff8f\141" +
    "\uff8f\142\uff8f\143\uff8f\144\uff8f\u0135\uff8f\u0136\uff8f\u0137\uff8f" +
    "\u0138\uff8f\u0139\uff8f\u013a\uff8f\u013b\uff8f\u013c\uff8f\u013d\uff8f\u013e" +
    "\uff8f\u013f\uff8f\u0140\uff8f\001\002\000\036\002\uff68\u012a\uff68" +
    "\u012b\uff68\u012c\uff68\u012d\uff68\u012e\uff68\u012f\uff68\u0130\uff68\u0131" +
    "\uff68\u0132\uff68\u0133\uff68\u0134\uff68\u0142\uff68\u0143\uff68\001\002" +
    "\000\274\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031" +
    "\uff90\032\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90" +
    "\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046" +
    "\uff90\047\uff90\050\uff90\051\uff90\052\uff90\053\uff90\054\uff90" +
    "\055\uff90\056\uff90\057\uff90\060\uff90\061\uff90\062\uff90\063" +
    "\uff90\064\uff90\065\uff90\066\uff90\067\uff90\070\uff90\071\uff90" +
    "\072\uff90\073\uff90\074\uff90\075\uff90\076\uff90\077\uff90\100" +
    "\uff90\101\uff90\102\uff90\103\uff90\104\uff90\105\uff90\106\uff90" +
    "\107\uff90\110\uff90\111\uff90\112\uff90\113\uff90\114\uff90\115" +
    "\uff90\116\uff90\117\uff90\120\uff90\121\uff90\122\uff90\123\uff90" +
    "\124\uff90\125\uff90\126\uff90\127\uff90\130\uff90\131\uff90\132" +
    "\uff90\133\uff90\134\uff90\135\uff90\136\uff90\137\uff90\140\uff90" +
    "\141\uff90\142\uff90\143\uff90\144\uff90\u0135\uff90\u0136\uff90\u0137" +
    "\uff90\u0138\uff90\u0139\uff90\u013a\uff90\u013b\uff90\u013c\uff90\u013d\uff90" +
    "\u013e\uff90\u013f\uff90\u0140\uff90\001\002\000\274\024\uffb2\025" +
    "\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2" +
    "\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042" +
    "\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2" +
    "\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057" +
    "\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2" +
    "\066\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074" +
    "\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2\102\uffb2" +
    "\103\uffb2\104\uffb2\105\uffb2\106\uffb2\107\uffb2\110\uffb2\111" +
    "\uffb2\112\uffb2\113\uffb2\114\uffb2\115\uffb2\116\uffb2\117\uffb2" +
    "\120\uffb2\121\uffb2\122\uffb2\123\uffb2\124\uffb2\125\uffb2\126" +
    "\uffb2\127\uffb2\130\uffb2\131\uffb2\132\uffb2\133\uffb2\134\uffb2" +
    "\135\uffb2\136\uffb2\137\uffb2\140\uffb2\141\uffb2\142\uffb2\143" +
    "\uffb2\144\uffb2\u0135\uffb2\u0136\uffb2\u0137\uffb2\u0138\uffb2\u0139\uffb2" +
    "\u013a\uffb2\u013b\uffb2\u013c\uffb2\u013d\uffb2\u013e\uffb2\u013f\uffb2\u0140" +
    "\uffb2\001\002\000\036\002\uff6b\u012a\uff6b\u012b\uff6b\u012c\uff6b" +
    "\u012d\uff6b\u012e\uff6b\u012f\uff6b\u0130\uff6b\u0131\uff6b\u0132\uff6b\u0133" +
    "\uff6b\u0134\uff6b\u0142\uff6b\u0143\uff6b\001\002\000\036\002\uff77" +
    "\u012a\uff77\u012b\uff77\u012c\uff77\u012d\uff77\u012e\uff77\u012f\uff77\u0130" +
    "\uff77\u0131\uff77\u0132\uff77\u0133\uff77\u0134\uff77\u0142\uff77\u0143\uff77" +
    "\001\002\000\274\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030" +
    "\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d" +
    "\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045" +
    "\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d" +
    "\054\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d\062" +
    "\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d\070\uff8d" +
    "\071\uff8d\072\uff8d\073\uff8d\074\uff8d\075\uff8d\076\uff8d\077" +
    "\uff8d\100\uff8d\101\uff8d\102\uff8d\103\uff8d\104\uff8d\105\uff8d" +
    "\106\uff8d\107\uff8d\110\uff8d\111\uff8d\112\uff8d\113\uff8d\114" +
    "\uff8d\115\uff8d\116\uff8d\117\uff8d\120\uff8d\121\uff8d\122\uff8d" +
    "\123\uff8d\124\uff8d\125\uff8d\126\uff8d\127\uff8d\130\uff8d\131" +
    "\uff8d\132\uff8d\133\uff8d\134\uff8d\135\uff8d\136\uff8d\137\uff8d" +
    "\140\uff8d\141\uff8d\142\uff8d\143\uff8d\144\uff8d\u0135\uff8d\u0136" +
    "\uff8d\u0137\uff8d\u0138\uff8d\u0139\uff8d\u013a\uff8d\u013b\uff8d\u013c\uff8d" +
    "\u013d\uff8d\u013e\uff8d\u013f\uff8d\u0140\uff8d\001\002\000\036\002" +
    "\uffeb\u012a\uffeb\u012b\uffeb\u012c\uffeb\u012d\uffeb\u012e\uffeb\u012f\uffeb" +
    "\u0130\uffeb\u0131\uffeb\u0132\uffeb\u0133\uffeb\u0134\uffeb\u0142\uffeb\u0143" +
    "\uffeb\001\002\000\004\002\001\001\002\000\004\002\uffc1" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\uffc9\001" +
    "\002\000\004\002\uffc3\001\002\000\004\002\uffc0\001\002" +
    "\000\004\002\uffc4\001\002\000\004\002\uffc5\001\002\000" +
    "\004\002\uffc7\001\002\000\004\002\uffc8\001\002\000\004" +
    "\002\uffc2\001\002\000\004\002\uffca\001\002\000\004\002" +
    "\uffc6\001\002\000\032\002\uffda\u012a\uffda\u012b\uffda\u012c\uffda" +
    "\u012d\uffda\u012e\uffda\u012f\uffda\u0130\uffda\u0131\uffda\u0132\uffda\u0133" +
    "\uffda\u0134\uffda\001\002\000\044\002\uff07\013\uff07\014\uff07" +
    "\015\uff07\u012a\uff07\u012b\uff07\u012c\uff07\u012d\uff07\u012e\uff07\u012f" +
    "\uff07\u0130\uff07\u0131\uff07\u0132\uff07\u0133\uff07\u0134\uff07\u0142\uff07" +
    "\u0143\uff07\001\002\000\044\002\uff1a\013\uff1a\014\uff1a\015" +
    "\uff1a\u012a\uff1a\u012b\uff1a\u012c\uff1a\u012d\uff1a\u012e\uff1a\u012f\uff1a" +
    "\u0130\uff1a\u0131\uff1a\u0132\uff1a\u0133\uff1a\u0134\uff1a\u0142\uff1a\u0143" +
    "\uff1a\001\002\000\044\002\uff0a\013\uff0a\014\uff0a\015\uff0a" +
    "\u012a\uff0a\u012b\uff0a\u012c\uff0a\u012d\uff0a\u012e\uff0a\u012f\uff0a\u0130" +
    "\uff0a\u0131\uff0a\u0132\uff0a\u0133\uff0a\u0134\uff0a\u0142\uff0a\u0143\uff0a" +
    "\001\002\000\044\002\uff14\013\uff14\014\uff14\015\uff14\u012a" +
    "\uff14\u012b\uff14\u012c\uff14\u012d\uff14\u012e\uff14\u012f\uff14\u0130\uff14" +
    "\u0131\uff14\u0132\uff14\u0133\uff14\u0134\uff14\u0142\uff14\u0143\uff14\001" +
    "\002\000\044\002\uff26\013\uff26\014\uff26\015\uff26\u012a\uff26" +
    "\u012b\uff26\u012c\uff26\u012d\uff26\u012e\uff26\u012f\uff26\u0130\uff26\u0131" +
    "\uff26\u0132\uff26\u0133\uff26\u0134\uff26\u0142\uff26\u0143\uff26\001\002" +
    "\000\044\002\ufefb\013\ufefb\014\ufefb\015\ufefb\u012a\ufefb\u012b" +
    "\ufefb\u012c\ufefb\u012d\ufefb\u012e\ufefb\u012f\ufefb\u0130\ufefb\u0131\ufefb" +
    "\u0132\ufefb\u0133\ufefb\u0134\ufefb\u0142\ufefb\u0143\ufefb\001\002\000" +
    "\044\002\uff24\013\uff24\014\uff24\015\uff24\u012a\uff24\u012b\uff24" +
    "\u012c\uff24\u012d\uff24\u012e\uff24\u012f\uff24\u0130\uff24\u0131\uff24\u0132" +
    "\uff24\u0133\uff24\u0134\uff24\u0142\uff24\u0143\uff24\001\002\000\044" +
    "\002\ufeeb\013\ufeeb\014\ufeeb\015\ufeeb\u012a\ufeeb\u012b\ufeeb\u012c" +
    "\ufeeb\u012d\ufeeb\u012e\ufeeb\u012f\ufeeb\u0130\ufeeb\u0131\ufeeb\u0132\ufeeb" +
    "\u0133\ufeeb\u0134\ufeeb\u0142\ufeeb\u0143\ufeeb\001\002\000\044\002" +
    "\ufeff\013\ufeff\014\ufeff\015\ufeff\u012a\ufeff\u012b\ufeff\u012c\ufeff" +
    "\u012d\ufeff\u012e\ufeff\u012f\ufeff\u0130\ufeff\u0131\ufeff\u0132\ufeff\u0133" +
    "\ufeff\u0134\ufeff\u0142\ufeff\u0143\ufeff\001\002\000\044\002\ufeec" +
    "\013\ufeec\014\ufeec\015\ufeec\u012a\ufeec\u012b\ufeec\u012c\ufeec\u012d" +
    "\ufeec\u012e\ufeec\u012f\ufeec\u0130\ufeec\u0131\ufeec\u0132\ufeec\u0133\ufeec" +
    "\u0134\ufeec\u0142\ufeec\u0143\ufeec\001\002\000\044\002\uff05\013" +
    "\uff05\014\uff05\015\uff05\u012a\uff05\u012b\uff05\u012c\uff05\u012d\uff05" +
    "\u012e\uff05\u012f\uff05\u0130\uff05\u0131\uff05\u0132\uff05\u0133\uff05\u0134" +
    "\uff05\u0142\uff05\u0143\uff05\001\002\000\044\002\uff19\013\uff19" +
    "\014\uff19\015\uff19\u012a\uff19\u012b\uff19\u012c\uff19\u012d\uff19\u012e" +
    "\uff19\u012f\uff19\u0130\uff19\u0131\uff19\u0132\uff19\u0133\uff19\u0134\uff19" +
    "\u0142\uff19\u0143\uff19\001\002\000\044\002\uff20\013\uff20\014" +
    "\uff20\015\uff20\u012a\uff20\u012b\uff20\u012c\uff20\u012d\uff20\u012e\uff20" +
    "\u012f\uff20\u0130\uff20\u0131\uff20\u0132\uff20\u0133\uff20\u0134\uff20\u0142" +
    "\uff20\u0143\uff20\001\002\000\044\002\uff1c\013\uff1c\014\uff1c" +
    "\015\uff1c\u012a\uff1c\u012b\uff1c\u012c\uff1c\u012d\uff1c\u012e\uff1c\u012f" +
    "\uff1c\u0130\uff1c\u0131\uff1c\u0132\uff1c\u0133\uff1c\u0134\uff1c\u0142\uff1c" +
    "\u0143\uff1c\001\002\000\044\002\uff18\013\uff18\014\uff18\015" +
    "\uff18\u012a\uff18\u012b\uff18\u012c\uff18\u012d\uff18\u012e\uff18\u012f\uff18" +
    "\u0130\uff18\u0131\uff18\u0132\uff18\u0133\uff18\u0134\uff18\u0142\uff18\u0143" +
    "\uff18\001\002\000\044\002\ufefe\013\ufefe\014\ufefe\015\ufefe" +
    "\u012a\ufefe\u012b\ufefe\u012c\ufefe\u012d\ufefe\u012e\ufefe\u012f\ufefe\u0130" +
    "\ufefe\u0131\ufefe\u0132\ufefe\u0133\ufefe\u0134\ufefe\u0142\ufefe\u0143\ufefe" +
    "\001\002\000\044\002\ufeef\013\ufeef\014\ufeef\015\ufeef\u012a" +
    "\ufeef\u012b\ufeef\u012c\ufeef\u012d\ufeef\u012e\ufeef\u012f\ufeef\u0130\ufeef" +
    "\u0131\ufeef\u0132\ufeef\u0133\ufeef\u0134\ufeef\u0142\ufeef\u0143\ufeef\001" +
    "\002\000\044\002\uff04\013\uff04\014\uff04\015\uff04\u012a\uff04" +
    "\u012b\uff04\u012c\uff04\u012d\uff04\u012e\uff04\u012f\uff04\u0130\uff04\u0131" +
    "\uff04\u0132\uff04\u0133\uff04\u0134\uff04\u0142\uff04\u0143\uff04\001\002" +
    "\000\044\002\uff06\013\uff06\014\uff06\015\uff06\u012a\uff06\u012b" +
    "\uff06\u012c\uff06\u012d\uff06\u012e\uff06\u012f\uff06\u0130\uff06\u0131\uff06" +
    "\u0132\uff06\u0133\uff06\u0134\uff06\u0142\uff06\u0143\uff06\001\002\000" +
    "\044\002\uff2e\013\uff2e\014\uff2e\015\uff2e\u012a\uff2e\u012b\uff2e" +
    "\u012c\uff2e\u012d\uff2e\u012e\uff2e\u012f\uff2e\u0130\uff2e\u0131\uff2e\u0132" +
    "\uff2e\u0133\uff2e\u0134\uff2e\u0142\uff2e\u0143\uff2e\001\002\000\044" +
    "\002\uff11\013\uff11\014\uff11\015\uff11\u012a\uff11\u012b\uff11\u012c" +
    "\uff11\u012d\uff11\u012e\uff11\u012f\uff11\u0130\uff11\u0131\uff11\u0132\uff11" +
    "\u0133\uff11\u0134\uff11\u0142\uff11\u0143\uff11\001\002\000\044\002" +
    "\uff00\013\uff00\014\uff00\015\uff00\u012a\uff00\u012b\uff00\u012c\uff00" +
    "\u012d\uff00\u012e\uff00\u012f\uff00\u0130\uff00\u0131\uff00\u0132\uff00\u0133" +
    "\uff00\u0134\uff00\u0142\uff00\u0143\uff00\001\002\000\044\002\uff15" +
    "\013\uff15\014\uff15\015\uff15\u012a\uff15\u012b\uff15\u012c\uff15\u012d" +
    "\uff15\u012e\uff15\u012f\uff15\u0130\uff15\u0131\uff15\u0132\uff15\u0133\uff15" +
    "\u0134\uff15\u0142\uff15\u0143\uff15\001\002\000\044\002\ufeed\013" +
    "\ufeed\014\ufeed\015\ufeed\u012a\ufeed\u012b\ufeed\u012c\ufeed\u012d\ufeed" +
    "\u012e\ufeed\u012f\ufeed\u0130\ufeed\u0131\ufeed\u0132\ufeed\u0133\ufeed\u0134" +
    "\ufeed\u0142\ufeed\u0143\ufeed\001\002\000\044\002\ufefd\013\ufefd" +
    "\014\ufefd\015\ufefd\u012a\ufefd\u012b\ufefd\u012c\ufefd\u012d\ufefd\u012e" +
    "\ufefd\u012f\ufefd\u0130\ufefd\u0131\ufefd\u0132\ufefd\u0133\ufefd\u0134\ufefd" +
    "\u0142\ufefd\u0143\ufefd\001\002\000\044\002\uff13\013\uff13\014" +
    "\uff13\015\uff13\u012a\uff13\u012b\uff13\u012c\uff13\u012d\uff13\u012e\uff13" +
    "\u012f\uff13\u0130\uff13\u0131\uff13\u0132\uff13\u0133\uff13\u0134\uff13\u0142" +
    "\uff13\u0143\uff13\001\002\000\044\002\uff35\013\uff35\014\uff35" +
    "\015\uff35\u012a\uff35\u012b\uff35\u012c\uff35\u012d\uff35\u012e\uff35\u012f" +
    "\uff35\u0130\uff35\u0131\uff35\u0132\uff35\u0133\uff35\u0134\uff35\u0142\uff35" +
    "\u0143\uff35\001\002\000\044\002\uff38\013\uff38\014\uff38\015" +
    "\uff38\u012a\uff38\u012b\uff38\u012c\uff38\u012d\uff38\u012e\uff38\u012f\uff38" +
    "\u0130\uff38\u0131\uff38\u0132\uff38\u0133\uff38\u0134\uff38\u0142\uff38\u0143" +
    "\uff38\001\002\000\044\002\uff08\013\uff08\014\uff08\015\uff08" +
    "\u012a\uff08\u012b\uff08\u012c\uff08\u012d\uff08\u012e\uff08\u012f\uff08\u0130" +
    "\uff08\u0131\uff08\u0132\uff08\u0133\uff08\u0134\uff08\u0142\uff08\u0143\uff08" +
    "\001\002\000\044\002\uff02\013\uff02\014\uff02\015\uff02\u012a" +
    "\uff02\u012b\uff02\u012c\uff02\u012d\uff02\u012e\uff02\u012f\uff02\u0130\uff02" +
    "\u0131\uff02\u0132\uff02\u0133\uff02\u0134\uff02\u0142\uff02\u0143\uff02\001" +
    "\002\000\044\002\ufef9\013\ufef9\014\ufef9\015\ufef9\u012a\ufef9" +
    "\u012b\ufef9\u012c\ufef9\u012d\ufef9\u012e\ufef9\u012f\ufef9\u0130\ufef9\u0131" +
    "\ufef9\u0132\ufef9\u0133\ufef9\u0134\ufef9\u0142\ufef9\u0143\ufef9\001\002" +
    "\000\044\002\ufeea\013\ufeea\014\ufeea\015\ufeea\u012a\ufeea\u012b" +
    "\ufeea\u012c\ufeea\u012d\ufeea\u012e\ufeea\u012f\ufeea\u0130\ufeea\u0131\ufeea" +
    "\u0132\ufeea\u0133\ufeea\u0134\ufeea\u0142\ufeea\u0143\ufeea\001\002\000" +
    "\044\002\ufef3\013\ufef3\014\ufef3\015\ufef3\u012a\ufef3\u012b\ufef3" +
    "\u012c\ufef3\u012d\ufef3\u012e\ufef3\u012f\ufef3\u0130\ufef3\u0131\ufef3\u0132" +
    "\ufef3\u0133\ufef3\u0134\ufef3\u0142\ufef3\u0143\ufef3\001\002\000\044" +
    "\002\uff31\013\uff31\014\uff31\015\uff31\u012a\uff31\u012b\uff31\u012c" +
    "\uff31\u012d\uff31\u012e\uff31\u012f\uff31\u0130\uff31\u0131\uff31\u0132\uff31" +
    "\u0133\uff31\u0134\uff31\u0142\uff31\u0143\uff31\001\002\000\044\002" +
    "\uff30\013\uff30\014\uff30\015\uff30\u012a\uff30\u012b\uff30\u012c\uff30" +
    "\u012d\uff30\u012e\uff30\u012f\uff30\u0130\uff30\u0131\uff30\u0132\uff30\u0133" +
    "\uff30\u0134\uff30\u0142\uff30\u0143\uff30\001\002\000\044\002\uff2f" +
    "\013\uff2f\014\uff2f\015\uff2f\u012a\uff2f\u012b\uff2f\u012c\uff2f\u012d" +
    "\uff2f\u012e\uff2f\u012f\uff2f\u0130\uff2f\u0131\uff2f\u0132\uff2f\u0133\uff2f" +
    "\u0134\uff2f\u0142\uff2f\u0143\uff2f\001\002\000\044\002\uff37\013" +
    "\uff37\014\uff37\015\uff37\u012a\uff37\u012b\uff37\u012c\uff37\u012d\uff37" +
    "\u012e\uff37\u012f\uff37\u0130\uff37\u0131\uff37\u0132\uff37\u0133\uff37\u0134" +
    "\uff37\u0142\uff37\u0143\uff37\001\002\000\044\002\uff34\013\uff34" +
    "\014\uff34\015\uff34\u012a\uff34\u012b\uff34\u012c\uff34\u012d\uff34\u012e" +
    "\uff34\u012f\uff34\u0130\uff34\u0131\uff34\u0132\uff34\u0133\uff34\u0134\uff34" +
    "\u0142\uff34\u0143\uff34\001\002\000\044\002\uff2c\013\uff2c\014" +
    "\uff2c\015\uff2c\u012a\uff2c\u012b\uff2c\u012c\uff2c\u012d\uff2c\u012e\uff2c" +
    "\u012f\uff2c\u0130\uff2c\u0131\uff2c\u0132\uff2c\u0133\uff2c\u0134\uff2c\u0142" +
    "\uff2c\u0143\uff2c\001\002\000\044\002\uff0f\013\uff0f\014\uff0f" +
    "\015\uff0f\u012a\uff0f\u012b\uff0f\u012c\uff0f\u012d\uff0f\u012e\uff0f\u012f" +
    "\uff0f\u0130\uff0f\u0131\uff0f\u0132\uff0f\u0133\uff0f\u0134\uff0f\u0142\uff0f" +
    "\u0143\uff0f\001\002\000\244\024\u0111\025\355\026\366\027" +
    "\u0101\030\354\031\367\032\u0108\033\u0107\034\363\035\364" +
    "\036\365\037\345\040\u0104\041\370\042\374\043\u0122\044" +
    "\u010b\045\u0114\046\u011a\047\326\050\u0117\051\330\052\u011b" +
    "\053\u0113\054\377\055\336\056\u0116\057\u010d\060\u0115\061" +
    "\337\062\u0124\063\323\064\335\065\340\066\u011d\067\u0120" +
    "\070\350\071\325\072\353\073\u0100\074\346\075\u0118\076" +
    "\371\077\u0123\100\373\101\u0103\102\u011e\103\324\104\u011c" +
    "\105\356\106\322\107\344\110\334\111\343\112\u010a\113" +
    "\357\114\u0109\115\347\116\332\117\341\120\352\121\376" +
    "\122\327\123\u0102\124\360\125\u0110\126\u011f\127\u0112\130" +
    "\u010c\131\u010f\132\362\133\u0105\134\u0121\135\u0119\136\342" +
    "\137\u010e\140\351\141\333\142\331\143\361\144\375\001" +
    "\002\000\044\002\uff0d\013\uff0d\014\uff0d\015\uff0d\u012a\uff0d" +
    "\u012b\uff0d\u012c\uff0d\u012d\uff0d\u012e\uff0d\u012f\uff0d\u0130\uff0d\u0131" +
    "\uff0d\u0132\uff0d\u0133\uff0d\u0134\uff0d\u0142\uff0d\u0143\uff0d\001\002" +
    "\000\044\002\uff2b\013\uff2b\014\uff2b\015\uff2b\u012a\uff2b\u012b" +
    "\uff2b\u012c\uff2b\u012d\uff2b\u012e\uff2b\u012f\uff2b\u0130\uff2b\u0131\uff2b" +
    "\u0132\uff2b\u0133\uff2b\u0134\uff2b\u0142\uff2b\u0143\uff2b\001\002\000" +
    "\044\002\ufee9\013\ufee9\014\ufee9\015\ufee9\u012a\ufee9\u012b\ufee9" +
    "\u012c\ufee9\u012d\ufee9\u012e\ufee9\u012f\ufee9\u0130\ufee9\u0131\ufee9\u0132" +
    "\ufee9\u0133\ufee9\u0134\ufee9\u0142\ufee9\u0143\ufee9\001\002\000\044" +
    "\002\ufefc\013\ufefc\014\ufefc\015\ufefc\u012a\ufefc\u012b\ufefc\u012c" +
    "\ufefc\u012d\ufefc\u012e\ufefc\u012f\ufefc\u0130\ufefc\u0131\ufefc\u0132\ufefc" +
    "\u0133\ufefc\u0134\ufefc\u0142\ufefc\u0143\ufefc\001\002\000\044\002" +
    "\uff21\013\uff21\014\uff21\015\uff21\u012a\uff21\u012b\uff21\u012c\uff21" +
    "\u012d\uff21\u012e\uff21\u012f\uff21\u0130\uff21\u0131\uff21\u0132\uff21\u0133" +
    "\uff21\u0134\uff21\u0142\uff21\u0143\uff21\001\002\000\044\002\uff12" +
    "\013\uff12\014\uff12\015\uff12\u012a\uff12\u012b\uff12\u012c\uff12\u012d" +
    "\uff12\u012e\uff12\u012f\uff12\u0130\uff12\u0131\uff12\u0132\uff12\u0133\uff12" +
    "\u0134\uff12\u0142\uff12\u0143\uff12\001\002\000\044\002\uff36\013" +
    "\uff36\014\uff36\015\uff36\u012a\uff36\u012b\uff36\u012c\uff36\u012d\uff36" +
    "\u012e\uff36\u012f\uff36\u0130\uff36\u0131\uff36\u0132\uff36\u0133\uff36\u0134" +
    "\uff36\u0142\uff36\u0143\uff36\001\002\000\044\002\ufefa\013\ufefa" +
    "\014\ufefa\015\ufefa\u012a\ufefa\u012b\ufefa\u012c\ufefa\u012d\ufefa\u012e" +
    "\ufefa\u012f\ufefa\u0130\ufefa\u0131\ufefa\u0132\ufefa\u0133\ufefa\u0134\ufefa" +
    "\u0142\ufefa\u0143\ufefa\001\002\000\044\002\uff0c\013\uff0c\014" +
    "\uff0c\015\uff0c\u012a\uff0c\u012b\uff0c\u012c\uff0c\u012d\uff0c\u012e\uff0c" +
    "\u012f\uff0c\u0130\uff0c\u0131\uff0c\u0132\uff0c\u0133\uff0c\u0134\uff0c\u0142" +
    "\uff0c\u0143\uff0c\001\002\000\044\002\uff2d\013\uff2d\014\uff2d" +
    "\015\uff2d\u012a\uff2d\u012b\uff2d\u012c\uff2d\u012d\uff2d\u012e\uff2d\u012f" +
    "\uff2d\u0130\uff2d\u0131\uff2d\u0132\uff2d\u0133\uff2d\u0134\uff2d\u0142\uff2d" +
    "\u0143\uff2d\001\002\000\044\002\ufef2\013\ufef2\014\ufef2\015" +
    "\ufef2\u012a\ufef2\u012b\ufef2\u012c\ufef2\u012d\ufef2\u012e\ufef2\u012f\ufef2" +
    "\u0130\ufef2\u0131\ufef2\u0132\ufef2\u0133\ufef2\u0134\ufef2\u0142\ufef2\u0143" +
    "\ufef2\001\002\000\044\002\uffee\013\uffee\014\uffee\015\uffee" +
    "\u012a\uffee\u012b\uffee\u012c\uffee\u012d\uffee\u012e\uffee\u012f\uffee\u0130" +
    "\uffee\u0131\uffee\u0132\uffee\u0133\uffee\u0134\uffee\u0142\uffee\u0143\uffee" +
    "\001\002\000\044\002\uff32\013\uff32\014\uff32\015\uff32\u012a" +
    "\uff32\u012b\uff32\u012c\uff32\u012d\uff32\u012e\uff32\u012f\uff32\u0130\uff32" +
    "\u0131\uff32\u0132\uff32\u0133\uff32\u0134\uff32\u0142\uff32\u0143\uff32\001" +
    "\002\000\044\002\uff33\013\uff33\014\uff33\015\uff33\u012a\uff33" +
    "\u012b\uff33\u012c\uff33\u012d\uff33\u012e\uff33\u012f\uff33\u0130\uff33\u0131" +
    "\uff33\u0132\uff33\u0133\uff33\u0134\uff33\u0142\uff33\u0143\uff33\001\002" +
    "\000\044\002\uff01\013\uff01\014\uff01\015\uff01\u012a\uff01\u012b" +
    "\uff01\u012c\uff01\u012d\uff01\u012e\uff01\u012f\uff01\u0130\uff01\u0131\uff01" +
    "\u0132\uff01\u0133\uff01\u0134\uff01\u0142\uff01\u0143\uff01\001\002\000" +
    "\044\002\uff03\013\uff03\014\uff03\015\uff03\u012a\uff03\u012b\uff03" +
    "\u012c\uff03\u012d\uff03\u012e\uff03\u012f\uff03\u0130\uff03\u0131\uff03\u0132" +
    "\uff03\u0133\uff03\u0134\uff03\u0142\uff03\u0143\uff03\001\002\000\044" +
    "\002\uff29\013\uff29\014\uff29\015\uff29\u012a\uff29\u012b\uff29\u012c" +
    "\uff29\u012d\uff29\u012e\uff29\u012f\uff29\u0130\uff29\u0131\uff29\u0132\uff29" +
    "\u0133\uff29\u0134\uff29\u0142\uff29\u0143\uff29\001\002\000\044\002" +
    "\ufef5\013\ufef5\014\ufef5\015\ufef5\u012a\ufef5\u012b\ufef5\u012c\ufef5" +
    "\u012d\ufef5\u012e\ufef5\u012f\ufef5\u0130\ufef5\u0131\ufef5\u0132\ufef5\u0133" +
    "\ufef5\u0134\ufef5\u0142\ufef5\u0143\ufef5\001\002\000\044\002\uff1e" +
    "\013\uff1e\014\uff1e\015\uff1e\u012a\uff1e\u012b\uff1e\u012c\uff1e\u012d" +
    "\uff1e\u012e\uff1e\u012f\uff1e\u0130\uff1e\u0131\uff1e\u0132\uff1e\u0133\uff1e" +
    "\u0134\uff1e\u0142\uff1e\u0143\uff1e\001\002\000\044\002\ufeee\013" +
    "\ufeee\014\ufeee\015\ufeee\u012a\ufeee\u012b\ufeee\u012c\ufeee\u012d\ufeee" +
    "\u012e\ufeee\u012f\ufeee\u0130\ufeee\u0131\ufeee\u0132\ufeee\u0133\ufeee\u0134" +
    "\ufeee\u0142\ufeee\u0143\ufeee\001\002\000\044\002\ufef4\013\ufef4" +
    "\014\ufef4\015\ufef4\u012a\ufef4\u012b\ufef4\u012c\ufef4\u012d\ufef4\u012e" +
    "\ufef4\u012f\ufef4\u0130\ufef4\u0131\ufef4\u0132\ufef4\u0133\ufef4\u0134\ufef4" +
    "\u0142\ufef4\u0143\ufef4\001\002\000\044\002\ufef8\013\ufef8\014" +
    "\ufef8\015\ufef8\u012a\ufef8\u012b\ufef8\u012c\ufef8\u012d\ufef8\u012e\ufef8" +
    "\u012f\ufef8\u0130\ufef8\u0131\ufef8\u0132\ufef8\u0133\ufef8\u0134\ufef8\u0142" +
    "\ufef8\u0143\ufef8\001\002\000\044\002\uff39\013\uff39\014\uff39" +
    "\015\uff39\u012a\uff39\u012b\uff39\u012c\uff39\u012d\uff39\u012e\uff39\u012f" +
    "\uff39\u0130\uff39\u0131\uff39\u0132\uff39\u0133\uff39\u0134\uff39\u0142\uff39" +
    "\u0143\uff39\001\002\000\044\002\ufef6\013\ufef6\014\ufef6\015" +
    "\ufef6\u012a\ufef6\u012b\ufef6\u012c\ufef6\u012d\ufef6\u012e\ufef6\u012f\ufef6" +
    "\u0130\ufef6\u0131\ufef6\u0132\ufef6\u0133\ufef6\u0134\ufef6\u0142\ufef6\u0143" +
    "\ufef6\001\002\000\044\002\uff22\013\uff22\014\uff22\015\uff22" +
    "\u012a\uff22\u012b\uff22\u012c\uff22\u012d\uff22\u012e\uff22\u012f\uff22\u0130" +
    "\uff22\u0131\uff22\u0132\uff22\u0133\uff22\u0134\uff22\u0142\uff22\u0143\uff22" +
    "\001\002\000\044\002\uff28\013\uff28\014\uff28\015\uff28\u012a" +
    "\uff28\u012b\uff28\u012c\uff28\u012d\uff28\u012e\uff28\u012f\uff28\u0130\uff28" +
    "\u0131\uff28\u0132\uff28\u0133\uff28\u0134\uff28\u0142\uff28\u0143\uff28\001" +
    "\002\000\044\002\uff1d\013\uff1d\014\uff1d\015\uff1d\u012a\uff1d" +
    "\u012b\uff1d\u012c\uff1d\u012d\uff1d\u012e\uff1d\u012f\uff1d\u0130\uff1d\u0131" +
    "\uff1d\u0132\uff1d\u0133\uff1d\u0134\uff1d\u0142\uff1d\u0143\uff1d\001\002" +
    "\000\044\002\uff1f\013\uff1f\014\uff1f\015\uff1f\u012a\uff1f\u012b" +
    "\uff1f\u012c\uff1f\u012d\uff1f\u012e\uff1f\u012f\uff1f\u0130\uff1f\u0131\uff1f" +
    "\u0132\uff1f\u0133\uff1f\u0134\uff1f\u0142\uff1f\u0143\uff1f\001\002\000" +
    "\044\002\uff25\013\uff25\014\uff25\015\uff25\u012a\uff25\u012b\uff25" +
    "\u012c\uff25\u012d\uff25\u012e\uff25\u012f\uff25\u0130\uff25\u0131\uff25\u0132" +
    "\uff25\u0133\uff25\u0134\uff25\u0142\uff25\u0143\uff25\001\002\000\044" +
    "\002\uff10\013\uff10\014\uff10\015\uff10\u012a\uff10\u012b\uff10\u012c" +
    "\uff10\u012d\uff10\u012e\uff10\u012f\uff10\u0130\uff10\u0131\uff10\u0132\uff10" +
    "\u0133\uff10\u0134\uff10\u0142\uff10\u0143\uff10\001\002\000\044\002" +
    "\ufef0\013\ufef0\014\ufef0\015\ufef0\u012a\ufef0\u012b\ufef0\u012c\ufef0" +
    "\u012d\ufef0\u012e\ufef0\u012f\ufef0\u0130\ufef0\u0131\ufef0\u0132\ufef0\u0133" +
    "\ufef0\u0134\ufef0\u0142\ufef0\u0143\ufef0\001\002\000\044\002\uff27" +
    "\013\uff27\014\uff27\015\uff27\u012a\uff27\u012b\uff27\u012c\uff27\u012d" +
    "\uff27\u012e\uff27\u012f\uff27\u0130\uff27\u0131\uff27\u0132\uff27\u0133\uff27" +
    "\u0134\uff27\u0142\uff27\u0143\uff27\001\002\000\044\002\uff23\013" +
    "\uff23\014\uff23\015\uff23\u012a\uff23\u012b\uff23\u012c\uff23\u012d\uff23" +
    "\u012e\uff23\u012f\uff23\u0130\uff23\u0131\uff23\u0132\uff23\u0133\uff23\u0134" +
    "\uff23\u0142\uff23\u0143\uff23\001\002\000\044\002\uff09\013\uff09" +
    "\014\uff09\015\uff09\u012a\uff09\u012b\uff09\u012c\uff09\u012d\uff09\u012e" +
    "\uff09\u012f\uff09\u0130\uff09\u0131\uff09\u0132\uff09\u0133\uff09\u0134\uff09" +
    "\u0142\uff09\u0143\uff09\001\002\000\044\002\uff17\013\uff17\014" +
    "\uff17\015\uff17\u012a\uff17\u012b\uff17\u012c\uff17\u012d\uff17\u012e\uff17" +
    "\u012f\uff17\u0130\uff17\u0131\uff17\u0132\uff17\u0133\uff17\u0134\uff17\u0142" +
    "\uff17\u0143\uff17\001\002\000\044\002\uff0b\013\uff0b\014\uff0b" +
    "\015\uff0b\u012a\uff0b\u012b\uff0b\u012c\uff0b\u012d\uff0b\u012e\uff0b\u012f" +
    "\uff0b\u0130\uff0b\u0131\uff0b\u0132\uff0b\u0133\uff0b\u0134\uff0b\u0142\uff0b" +
    "\u0143\uff0b\001\002\000\044\002\ufef7\013\ufef7\014\ufef7\015" +
    "\ufef7\u012a\ufef7\u012b\ufef7\u012c\ufef7\u012d\ufef7\u012e\ufef7\u012f\ufef7" +
    "\u0130\ufef7\u0131\ufef7\u0132\ufef7\u0133\ufef7\u0134\ufef7\u0142\ufef7\u0143" +
    "\ufef7\001\002\000\044\002\uff16\013\uff16\014\uff16\015\uff16" +
    "\u012a\uff16\u012b\uff16\u012c\uff16\u012d\uff16\u012e\uff16\u012f\uff16\u0130" +
    "\uff16\u0131\uff16\u0132\uff16\u0133\uff16\u0134\uff16\u0142\uff16\u0143\uff16" +
    "\001\002\000\044\002\ufef1\013\ufef1\014\ufef1\015\ufef1\u012a" +
    "\ufef1\u012b\ufef1\u012c\ufef1\u012d\ufef1\u012e\ufef1\u012f\ufef1\u0130\ufef1" +
    "\u0131\ufef1\u0132\ufef1\u0133\ufef1\u0134\ufef1\u0142\ufef1\u0143\ufef1\001" +
    "\002\000\044\002\uff2a\013\uff2a\014\uff2a\015\uff2a\u012a\uff2a" +
    "\u012b\uff2a\u012c\uff2a\u012d\uff2a\u012e\uff2a\u012f\uff2a\u0130\uff2a\u0131" +
    "\uff2a\u0132\uff2a\u0133\uff2a\u0134\uff2a\u0142\uff2a\u0143\uff2a\001\002" +
    "\000\044\002\uff0e\013\uff0e\014\uff0e\015\uff0e\u012a\uff0e\u012b" +
    "\uff0e\u012c\uff0e\u012d\uff0e\u012e\uff0e\u012f\uff0e\u0130\uff0e\u0131\uff0e" +
    "\u0132\uff0e\u0133\uff0e\u0134\uff0e\u0142\uff0e\u0143\uff0e\001\002\000" +
    "\044\002\uff1b\013\uff1b\014\uff1b\015\uff1b\u012a\uff1b\u012b\uff1b" +
    "\u012c\uff1b\u012d\uff1b\u012e\uff1b\u012f\uff1b\u0130\uff1b\u0131\uff1b\u0132" +
    "\uff1b\u0133\uff1b\u0134\uff1b\u0142\uff1b\u0143\uff1b\001\002\000\044" +
    "\002\uffef\013\uffef\014\uffef\015\uffef\u012a\uffef\u012b\uffef\u012c" +
    "\uffef\u012d\uffef\u012e\uffef\u012f\uffef\u0130\uffef\u0131\uffef\u0132\uffef" +
    "\u0133\uffef\u0134\uffef\u0142\uffef\u0143\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0123\000\026\002\016\003\033\004\020\005\030\010" +
    "\022\011\015\013\007\022\026\023\036\025\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\371\016\u0105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\305" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\056\012\053\017\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\047\001\001\000\002\001" +
    "\001\000\004\024\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\051\005\030\010" +
    "\022\011\015\013\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\234\015\174\026\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\302\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\u0124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public static Nodo padre;
	public int contador=0;

	//Listas para almacenar las PALABRAS RESERVADAS, SIMBOLOS, CADENAS Y VALORES NUMÉRICOS
	public static LinkedList<String> PalabraReservada = new LinkedList<String>();
	public static LinkedList<String> Simbolo = new LinkedList<String>();
	public static LinkedList<String> Cadenas = new LinkedList<String>();
        public static LinkedList<String> Variables = new LinkedList<String>();
	public static LinkedList<String> ValoresNumericos = new LinkedList<String>();
	
        public static LinkedList<String> Errores = new LinkedList<String>();

    
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/
/* 
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
            parser.Errores.add("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+". \n");
    }
*/ 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
/*
      public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
            parser.Errores.add("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+". \n");
    }
*/  

    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }
    
    public Symbol getS(){
        return this.s;
}  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // SUSTANTIVO ::= HERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // SUSTANTIVO ::= UNKNOWN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // SUSTANTIVO ::= NEIGHBOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // SUSTANTIVO ::= FRIEND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // SUSTANTIVO ::= PARENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // SUSTANTIVO ::= ADULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // SUSTANTIVO ::= CHILD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // SUSTANTIVO ::= STUDENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // SUSTANTIVO ::= LAWYER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // SUSTANTIVO ::= ENGINEER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // SUSTANTIVO ::= SCIENTIST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // SUSTANTIVO ::= ARTIST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // SUSTANTIVO ::= SINGER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // SUSTANTIVO ::= ACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // SUSTANTIVO ::= PILOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // SUSTANTIVO ::= NURSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // SUSTANTIVO ::= DOCTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // SUSTANTIVO ::= TEACHER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // SUSTANTIVO ::= BUTTERFLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // SUSTANTIVO ::= BEE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // SUSTANTIVO ::= ANT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // SUSTANTIVO ::= SPIDER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // SUSTANTIVO ::= SNAKE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // SUSTANTIVO ::= RABBIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // SUSTANTIVO ::= GIRAFFE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // SUSTANTIVO ::= MONKEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // SUSTANTIVO ::= LION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // SUSTANTIVO ::= ELEPHANT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // SUSTANTIVO ::= HORSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // SUSTANTIVO ::= COW 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // SUSTANTIVO ::= CHICKEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // SUSTANTIVO ::= POTATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // SUSTANTIVO ::= TOMATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // SUSTANTIVO ::= BANANA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // SUSTANTIVO ::= APPLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // SUSTANTIVO ::= ORANGE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // SUSTANTIVO ::= ICECREAM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // SUSTANTIVO ::= PIZZA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // SUSTANTIVO ::= SALAD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // SUSTANTIVO ::= TRAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // SUSTANTIVO ::= AIRPLANE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // SUSTANTIVO ::= BEACH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // SUSTANTIVO ::= GARDEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // SUSTANTIVO ::= IMAGE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // SUSTANTIVO ::= MUSIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // SUSTANTIVO ::= GUITAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // SUSTANTIVO ::= TELEVISION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // SUSTANTIVO ::= PICTURE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // SUSTANTIVO ::= WATCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // SUSTANTIVO ::= WALLET 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // SUSTANTIVO ::= KEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // SUSTANTIVO ::= TIGER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // SUSTANTIVO ::= BALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // SUSTANTIVO ::= SHOE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // SUSTANTIVO ::= HAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // SUSTANTIVO ::= SHIRT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // SUSTANTIVO ::= BED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // SUSTANTIVO ::= STRANGER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // SUSTANTIVO ::= LAMP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // SUSTANTIVO ::= RIVER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // SUSTANTIVO ::= MOON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // SUSTANTIVO ::= FISH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // SUSTANTIVO ::= DOOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // SUSTANTIVO ::= PENCIL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // SUSTANTIVO ::= CLOCK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // SUSTANTIVO ::= HI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // SUSTANTIVO ::= HELLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // SUSTANTIVO ::= BOOKSHELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // SUSTANTIVO ::= SUN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // SUSTANTIVO ::= PHONE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // SUSTANTIVO ::= COMPUTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // SUSTANTIVO ::= PEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // SUSTANTIVO ::= TABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // SUSTANTIVO ::= FLOWER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // SUSTANTIVO ::= TREE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // SUSTANTIVO ::= CHAIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // SUSTANTIVO ::= CAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // SUSTANTIVO ::= HOUSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // SUSTANTIVO ::= BOOK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // SUSTANTIVO ::= CAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // SUSTANTIVO ::= DOG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUSTANTIVO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // ADJECALIFICATIVO ::= GORGEOUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // ADJECALIFICATIVO ::= NICE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // ADJECALIFICATIVO ::= DULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // ADJECALIFICATIVO ::= SILLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // ADJECALIFICATIVO ::= HARD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // ADJECALIFICATIVO ::= SHINY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // ADJECALIFICATIVO ::= ROUGH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // ADJECALIFICATIVO ::= RUDE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // ADJECALIFICATIVO ::= LOUD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // ADJECALIFICATIVO ::= CARING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // ADJECALIFICATIVO ::= UNFAITHFUL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // ADJECALIFICATIVO ::= HOSTILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // ADJECALIFICATIVO ::= HOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // ADJECALIFICATIVO ::= FIERCE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // ADJECALIFICATIVO ::= DEPENDENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ADJECALIFICATIVO ::= INDEPENDENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // ADJECALIFICATIVO ::= ATHLETIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // ADJECALIFICATIVO ::= ARROGANT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // ADJECALIFICATIVO ::= REPULSIVE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // ADJECALIFICATIVO ::= HARSH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // ADJECALIFICATIVO ::= PESSIMISTIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // ADJECALIFICATIVO ::= CAUTIOUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // ADJECALIFICATIVO ::= INSECURE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // ADJECALIFICATIVO ::= CONFIDENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // ADJECALIFICATIVO ::= SLOW 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // ADJECALIFICATIVO ::= IMPATIENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // ADJECALIFICATIVO ::= SELFISH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // ADJECALIFICATIVO ::= INDIFFERENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // ADJECALIFICATIVO ::= ANXIOUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // ADJECALIFICATIVO ::= DISHONEST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // ADJECALIFICATIVO ::= FOOLISH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // ADJECALIFICATIVO ::= WISE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // ADJECALIFICATIVO ::= CLUMSY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ADJECALIFICATIVO ::= CUTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ADJECALIFICATIVO ::= DISGUSTING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // ADJECALIFICATIVO ::= DISCOURTEOUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ADJECALIFICATIVO ::= POLITE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ADJECALIFICATIVO ::= PLEASANT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ADJECALIFICATIVO ::= SOFT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ADJECALIFICATIVO ::= SHORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ADJECALIFICATIVO ::= NOISY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ADJECALIFICATIVO ::= TIRED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ADJECALIFICATIVO ::= CUNNING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ADJECALIFICATIVO ::= BORING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ADJECALIFICATIVO ::= DIRTY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ADJECALIFICATIVO ::= COWARDLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ADJECALIFICATIVO ::= BAD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ADJECALIFICATIVO ::= STUPID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ADJECALIFICATIVO ::= WEAK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ADJECALIFICATIVO ::= CLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ADJECALIFICATIVO ::= FAST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ADJECALIFICATIVO ::= UGLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ADJECALIFICATIVO ::= SAD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ADJECALIFICATIVO ::= LOW 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ADJECALIFICATIVO ::= INCREDIBLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ADJECALIFICATIVO ::= FANTASTIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ADJECALIFICATIVO ::= EXCELLENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ADJECALIFICATIVO ::= WONDERFUL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ADJECALIFICATIVO ::= CHARMING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ADJECALIFICATIVO ::= LOVELY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ADJECALIFICATIVO ::= INTERESTING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ADJECALIFICATIVO ::= EXCITING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ADJECALIFICATIVO ::= DELICIOUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ADJECALIFICATIVO ::= AMAZING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJECALIFICATIVO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ADJETIVO ::= WELCOME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ADJETIVO ::= BRILLIANT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ADJETIVO ::= GOODBYE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ADJETIVO ::= CALM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ADJETIVO ::= VERSATILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ADJETIVO ::= TALENTED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ADJETIVO ::= SOCIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ADJETIVO ::= CLEVER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ADJETIVO ::= MODEST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ADJETIVO ::= INNOVATIVE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ADJETIVO ::= COURTEOUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ADJETIVO ::= ENTHUSIASTIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ADJETIVO ::= DYNAMIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ADJETIVO ::= COMPASSIONATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ADJETIVO ::= ADAPTABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ADJETIVO ::= THOUGHTFUL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ADJETIVO ::= SENSITIVE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ADJETIVO ::= PEACEFUL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ADJETIVO ::= RELAXED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ADJETIVO ::= INVENTIVE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ADJETIVO ::= GRATEFUL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ADJETIVO ::= GENUINE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ADJETIVO ::= OPTIMISTIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ADJETIVO ::= DILIGENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ADJETIVO ::= CHEERFUL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ADJETIVO ::= ADMIRABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ADJETIVO ::= SHY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ADJETIVO ::= RELIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ADJETIVO ::= ENERGETIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ADJETIVO ::= CURIOUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ADJETIVO ::= QUIET 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ADJETIVO ::= ADVENTUROUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ADJETIVO ::= HONEST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ADJETIVO ::= FRIENDLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ADJETIVO ::= GENTLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ADJETIVO ::= DETERMINED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ADJETIVO ::= AFFECTIONATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ADJETIVO ::= GRACIOUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ADJETIVO ::= WITTY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ADJETIVO ::= LOYAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ADJETIVO ::= HUMBLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ADJETIVO ::= TOUGH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ADJETIVO ::= STRONG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ADJETIVO ::= JOVIAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ADJETIVO ::= JOYFUL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ADJETIVO ::= RESPONSIBLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ADJETIVO ::= PATIENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ADJETIVO ::= PASSIONATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ADJETIVO ::= SINCERE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ADJETIVO ::= CREATIVE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ADJETIVO ::= GENEROUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ADJETIVO ::= KIND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ADJETIVO ::= FUN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ADJETIVO ::= NAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ADJETIVO ::= ELEGANT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ADJETIVO ::= SMART 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ADJETIVO ::= COLD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ADJETIVO ::= RED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ADJETIVO ::= BRAVE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ADJETIVO ::= TALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ADJETIVO ::= FUNNY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ADJETIVO ::= OLD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ADJETIVO ::= SMALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ADJETIVO ::= INTELLIGENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ADJETIVO ::= HAPPY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ADJETIVO ::= BEAUTIFUL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ADJETIVO ::= BIG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADJETIVO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ARTICULO ::= AN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARTICULO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ARTICULO ::= A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARTICULO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ARTICULO ::= THE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARTICULO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PUNTUACION ::= cerrllac 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PUNTUACION ::= abrllac 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PUNTUACION ::= cerrpar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PUNTUACION ::= abrpar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PUNTUACION ::= cerrin 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PUNTUACION ::= cerrad 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PUNTUACION ::= dospum 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PUNTUACION ::= puncom 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PUNTUACION ::= comm 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PUNTUACION ::= punn 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PUNTUACION ::= nadaa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONJUNCION ::= OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONJUNCION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONJUNCION ::= AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONJUNCION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PRONOMBRE ::= ME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PRONOMBRE ::= YOURSELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PRONOMBRE ::= MYSELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PRONOMBRE ::= HIM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PRONOMBRE ::= THEM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PRONOMBRE ::= US 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PRONOMBRE ::= THEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PRONOMBRE ::= WE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PRONOMBRE ::= IT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PRONOMBRE ::= SHE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PRONOMBRE ::= HE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PRONOMBRE ::= YOU 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PRONOMBRE ::= I 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRONOMBRE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VERBO2 ::= ENJOY YOURSELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO2",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VERBO ::= IS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VERBO ::= ARE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VERBO ::= AM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INTERROGACIONSAL ::= HOW ARE YOU 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTERROGACIONSAL",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ADVERBIO ::= ALWAYS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADVERBIO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ADVERBIO ::= NEVER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADVERBIO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ADVERBIO ::= WELL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADVERBIO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ADVERBIO ::= LOUDLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADVERBIO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ADVERBIO ::= CAREFULLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADVERBIO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ADVERBIO ::= EASILY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADVERBIO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ADVERBIO ::= HAPPILY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADVERBIO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ADVERBIO ::= QUIETLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADVERBIO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ADVERBIO ::= SLOWLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADVERBIO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ADVERBIO ::= MUCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADVERBIO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ADVERBIO ::= HERE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADVERBIO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ADVERBIO ::= QUICKLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADVERBIO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FRASEVERBAL ::= VERBO ADJETIVO ADVERBIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FRASEVERBAL",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FRASEVERBAL ::= VERBO ADJECALIFICATIVO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FRASEVERBAL",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FRASEVERBAL ::= VERBO ADVERBIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FRASEVERBAL",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FRASENOMINAL ::= ARTICULO SUSTANTIVO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FRASENOMINAL",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FRASENOMINAL ::= ARTICULO ADJETIVO SUSTANTIVO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FRASENOMINAL",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PREDICADO ::= FRASEVERBAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PREDICADO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SUJETO ::= FRASENOMINAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUJETO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SUJETO ::= PRONOMBRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUJETO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // COMPUESTASENTENCIA ::= SIMPLESENTENCIA CONJUNCION SIMPLESENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPUESTASENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SIMPLESENTENCIA ::= SUJETO PREDICADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIMPLESENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SIMPLESENTENCIA ::= SUJETO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIMPLESENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SALUDO ::= HELLO INTERROGACIONSAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALUDO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SALUDO ::= HI INTERROGACIONSAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALUDO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SALUDO ::= HELLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALUDO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SALUDO ::= HI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALUDO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SALUDO ::= WELCOME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALUDO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= VERBO2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= COMPUESTASENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SIMPLESENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SALUDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PARRAFO ::= SENTENCIA PUNTUACION 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("PARRAFO");
    tmp.setValor(" Parrafo");
    tmp.setIdNod(parser.contador++);
    tmp.AddHijos((Nodo) s1);
    tmp.AddHijos((Nodo) s2);
    RESULT=tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARRAFO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PARRAFO ::= SENTENCIA 
            {
              Object RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object instr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		

    Nodo nd = new Nodo("PARRAFO");
    nd.setIdNod(parser.contador++);

    nd.AddHijos((Nodo) instr);
    parser.padre = (Nodo) nd;
    System.out.println(parser.padre);
    RESULT = instr;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARRAFO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PARRAFO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

